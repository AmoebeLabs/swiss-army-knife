{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the Swiss Army Knife custom card for Home Assistant documentation \u00b6 The Swiss Army Knife custom card gives you the freedom to design your own visualization. For this, SAK gives you 17 tools to visualize sensor data from Home Assistant and interact with the system to switch lights for instance or change brightness. This card is not yet released. Documentation is for testing purposes!","title":"Home"},{"location":"#welcome-to-the-swiss-army-knife-custom-card-for-home-assistant-documentation","text":"The Swiss Army Knife custom card gives you the freedom to design your own visualization. For this, SAK gives you 17 tools to visualize sensor data from Home Assistant and interact with the system to switch lights for instance or change brightness. This card is not yet released. Documentation is for testing purposes!","title":"Welcome to the Swiss Army Knife custom card for Home Assistant documentation"},{"location":"a-page/","text":"Testing my first chapter! \u00b6 Look if this is gonna work for me. Who knows? It seems to rebuild indeed on save. Almost instant! Still have to learn a bit of MD, but that will come as I copy stuff from other sites. Does this do it?","title":"A page"},{"location":"a-page/#testing-my-first-chapter","text":"Look if this is gonna work for me. Who knows? It seems to rebuild indeed on save. Almost instant! Still have to learn a bit of MD, but that will come as I copy stuff from other sites. Does this do it?","title":"Testing my first chapter!"},{"location":"second-page/","text":"Testing my first chapter! \u00b6 Look if this is gonna work for me. Who knows? It seems to rebuild indeed on save. Almost instant! Still have to learn a bit of MD, but that will come as I copy stuff from other sites. Does this do it?","title":"Second page"},{"location":"second-page/#testing-my-first-chapter","text":"Look if this is gonna work for me. Who knows? It seems to rebuild indeed on save. Almost instant! Still have to learn a bit of MD, but that will come as I copy stuff from other sites. Does this do it?","title":"Testing my first chapter!"},{"location":"basics/card-structure/","text":"The Swiss Army Knife uses the following structure: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 # Define the type of the card to use - type : 'custom:dev-swiss-army-knife-card' entities : - <list of entities> # Define aspect ratio of card. In this case square aspectratio : 1/1 # Display the card or not. disable_card : false # The layout of the card starts here layout : # Overall styles for the card and toolsets. Mainly used for defining filters! styles : card : toolsets : # Define Neumorphic filter over the full toolset. filter : url(#sak-nm-default) # Define material shadow filter over the full toolset # filter: url(#ds-1) # Define the list of toolsets from here toolsets : # define list of toolsets with its tools - toolset : background # define list of tools within toolset tools : - type : 'usersvg'","title":"Card structure"},{"location":"basics/coordinate-system/","text":"The Swiss Army Knife card uses its own, simplified, coordinate system to simplify the design and placement of tools on a card. Basics \u00b6 Card aspect ratio and size \u00b6 Tool placement and size \u00b6 Toolset placement \u00b6 Use relative sizes for everything \u00b6","title":"Coordinate system"},{"location":"basics/coordinate-system/#basics","text":"","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Basics"},{"location":"basics/coordinate-system/#card-aspect-ratio-and-size","text":"","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Card aspect ratio and size"},{"location":"basics/coordinate-system/#tool-placement-and-size","text":"","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Tool placement and size"},{"location":"basics/coordinate-system/#toolset-placement","text":"","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Toolset placement"},{"location":"basics/coordinate-system/#use-relative-sizes-for-everything","text":"","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Use relative sizes for everything"},{"location":"basics/svg-as-basis/","text":"The Swiss Army Knife card uses SVG (Scalable Vector Graphics) as its sole basis to visualize a card.","title":"SVG as basis"},{"location":"basics/templates/","text":"","title":"Templates"},{"location":"basics/animations/colorstops/","text":"One way to style the color of a tool is using colorstops where the state of the entity is used to choose a color for the tool. Both the fill and stroke attributes can be painted. Basic usage \u00b6 1 2 3 4 5 - type : 'custom:swiss-army-knife-card' entities : - entity : sensor.u_s_air_quality_index name : 'Air quality' area : 'Tha Moon' 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 - type : 'circle' position : cx : 50 cy : 50 radius : 17.5 entity_index : 0 # First entity is index 0 show : style : 'colorstops' # Format using colorstops colorstops : # MUST be equal to show style! fill : true # Use the fill property (or stroke) colors : 0 : '#A8E05F' # Good (0..50) - Green 51 : '#FDD74B' # Moderate (51..100) - Yellow 101 : '#FE9B57' # Unhealthy for sensitive groups - Orange 151 : '#FE6A69' # Unhealthy (101..150) - Red 201 : '#A97ABC' # Very Unhealthy (201..300) - Purple 301 : '#A87383' # Hazardous (300 and up) - Brown styles : circle : transition : fill 0.5s # Take 0.5s to change color","title":"Colorstops"},{"location":"basics/animations/colorstops/#basic-usage","text":"1 2 3 4 5 - type : 'custom:swiss-army-knife-card' entities : - entity : sensor.u_s_air_quality_index name : 'Air quality' area : 'Tha Moon' 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 - type : 'circle' position : cx : 50 cy : 50 radius : 17.5 entity_index : 0 # First entity is index 0 show : style : 'colorstops' # Format using colorstops colorstops : # MUST be equal to show style! fill : true # Use the fill property (or stroke) colors : 0 : '#A8E05F' # Good (0..50) - Green 51 : '#FDD74B' # Moderate (51..100) - Yellow 101 : '#FE9B57' # Unhealthy for sensitive groups - Orange 151 : '#FE6A69' # Unhealthy (101..150) - Red 201 : '#A97ABC' # Very Unhealthy (201..300) - Purple 301 : '#A87383' # Hazardous (300 and up) - Brown styles : circle : transition : fill 0.5s # Take 0.5s to change color","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Basic usage"},{"location":"basics/animations/overview/","text":"","title":"Overview"},{"location":"basics/animations/state-operators/","text":"Another, more complex but with more functionality to style a tool dependant on the state of the tool are state operators. State operators are defined in the animations section. Basic usage \u00b6 1 2 3 4 5 - type : 'custom:swiss-army-knife-card' entities : - entity : sensor.u_s_air_quality_index name : 'Air quality' area : 'Tha Moon' 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 - type : 'circle' position : cx : 50 cy : 50 radius : 17.5 entity_index : 0 animations : - state : '50' # Good (0..50) - Green operator : <= styles : circle : fill : '#A8E05F' - state : '100' # Moderate (51..100) - Yellow operator : <= styles : circle : fill : '#FDD74B' - state : '150' # Unhealthy for sensitive groups - Orange operator : <= styles : circle : fill : '#FE9B57' - state : '200' # Unhealthy (101..150) - Red operator : <= styles : circle : fill : '#FE6A69' - state : '300' # Very Unhealthy (201..300) - Purple operator : <= styles : circle : fill : '#A97ABC' - state : '9999' # Hazardous (300 and up) - Brown operator : <= styles : circle : fill : '#A87383' States are evaluated from top to bottom And once a match is found, the evaluation stops. We saw something similar using colorstops : 1 2 3 4 5 - type : 'custom:swiss-army-knife-card' entities : - entity : sensor.u_s_air_quality_index name : 'Air quality' area : 'Tha Moon' 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 - type : 'circle' position : cx : 50 cy : 50 radius : 17.5 entity_index : 0 # First entity is index 0 show : style : 'colorstops' # Format using colorstops colorstops : # MUST be equal to show style! fill : true # Use the fill property (or stroke) colors : 0 : '#A8E05F' # Good (0..50) - Green 51 : '#FDD74B' # Moderate (51..100) - Yellow 101 : '#FE9B57' # Unhealthy for sensitive groups - Orange 151 : '#FE6A69' # Unhealthy (101..150) - Red 201 : '#A97ABC' # Very Unhealthy (201..300) - Purple 301 : '#A87383' # Hazardous (300 and up) - Brown styles : circle : transition : fill 0.5s # Take 0.5s to change color Supported operators \u00b6 Operator Example Description < 55 Current state is less than value <= 20 Current state is less than or equal to value == 70 or off Current state is equal to value . This is the default behaviour >= 20 Current state is greater than or equal to value > 20 Current state is greater than value != on Current state is not equal to value All values MUST be enclosed within single quotes, ie numbers should also be used as strings: '50' Advanced usage \u00b6 TBD","title":"State operators"},{"location":"basics/animations/state-operators/#basic-usage","text":"1 2 3 4 5 - type : 'custom:swiss-army-knife-card' entities : - entity : sensor.u_s_air_quality_index name : 'Air quality' area : 'Tha Moon' 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 - type : 'circle' position : cx : 50 cy : 50 radius : 17.5 entity_index : 0 animations : - state : '50' # Good (0..50) - Green operator : <= styles : circle : fill : '#A8E05F' - state : '100' # Moderate (51..100) - Yellow operator : <= styles : circle : fill : '#FDD74B' - state : '150' # Unhealthy for sensitive groups - Orange operator : <= styles : circle : fill : '#FE9B57' - state : '200' # Unhealthy (101..150) - Red operator : <= styles : circle : fill : '#FE6A69' - state : '300' # Very Unhealthy (201..300) - Purple operator : <= styles : circle : fill : '#A97ABC' - state : '9999' # Hazardous (300 and up) - Brown operator : <= styles : circle : fill : '#A87383' States are evaluated from top to bottom And once a match is found, the evaluation stops. We saw something similar using colorstops : 1 2 3 4 5 - type : 'custom:swiss-army-knife-card' entities : - entity : sensor.u_s_air_quality_index name : 'Air quality' area : 'Tha Moon' 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 - type : 'circle' position : cx : 50 cy : 50 radius : 17.5 entity_index : 0 # First entity is index 0 show : style : 'colorstops' # Format using colorstops colorstops : # MUST be equal to show style! fill : true # Use the fill property (or stroke) colors : 0 : '#A8E05F' # Good (0..50) - Green 51 : '#FDD74B' # Moderate (51..100) - Yellow 101 : '#FE9B57' # Unhealthy for sensitive groups - Orange 151 : '#FE6A69' # Unhealthy (101..150) - Red 201 : '#A97ABC' # Very Unhealthy (201..300) - Purple 301 : '#A87383' # Hazardous (300 and up) - Brown styles : circle : transition : fill 0.5s # Take 0.5s to change color","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Basic usage"},{"location":"basics/animations/state-operators/#supported-operators","text":"Operator Example Description < 55 Current state is less than value <= 20 Current state is less than or equal to value == 70 or off Current state is equal to value . This is the default behaviour >= 20 Current state is greater than or equal to value > 20 Current state is greater than value != on Current state is not equal to value All values MUST be enclosed within single quotes, ie numbers should also be used as strings: '50'","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Supported operators"},{"location":"basics/animations/state-operators/#advanced-usage","text":"TBD","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Advanced usage"},{"location":"basics/styling/classes/","text":"CSS Classes can be used to get uniform styling over multiple cards with minimal work. More than one class can be enabled to be used for a tool. Basic usage \u00b6 1 2 3 4 5 6 7 8 9 - type : 'circle' position : cx : 50 cy : 50 radius : 25 classes : circle : # Class definitions for circle my-first-class : true # User defined CSS class my-second-class : true # User defined CSS class Default tool classes \u00b6 SAK defines classes with default styling for all the existing tools. These classes are defined in the sak-css-definitions.yaml file in the sak_templates folder. Default classes are automatically assigned to the tools There is no need for the user to specify these classes in the tools definition. Don't change this file! If you want to change the default definition, see the next chapter... Overriding default tool classes \u00b6 The default css classes used by SAK to style the tools can be altered by overriding these classes in the user-css-definitions.yaml file. Say you don't like the fact that text is spaced for the entity name and you want to set that to 0. The SAK definition is: 1 2 3 4 5 6 7 8 9 10 11 12 13 - descr : Entity Name tool content : > .sak-name { overflow: visible; } .sak-name__name { font-size: 3em; fill: var(--primary-text-color); opacity: 1.0; text-anchor: middle; alignment-baseline: central; letter-spacing: 0.05em; } You override the letter-spacing in your own definition with a value of 0: 1 2 3 4 5 - descr : Override Entity Name tool content : > .sak-name__name { letter-spacing: 0.0em; } Using your own tool classes \u00b6 Just as you can override default SAK classes, you can define your own set of classes to style your tools. These classes are defined in the user-css-definitions.yaml file in the sak_templates folder. Example #8, the Homekit alike cards use user defined classes to style the cards. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 # Demo using classes for example #8, some homekit like cards... #------------------------------------------------------------------------------ - descr : default Area styling content : > .homekit-area__area { text-anchor: start; font-size: 12em; font-weight: 700; fill: var(--primary-text-color); } - descr : default Name styling content : > .homekit-name__name { text-anchor: start; font-size: 12em; font-weight: 700; fill: var(--primary-text-color); } # Note: font-size MUST be defined as style for the state. # Otherwise, uom can't be rendered! - descr : default State & Uom styling content : > .homekit-state__value { text-anchor: start; font-weight: 700; fill: var(--primary-text-color); } .homekit-state__uom { fill: var(--primary-text-color); font-weight: 700; } And this looks like this in the example view, view-sake8.yaml file: 1 2 3 4 5 6 7 8 - type : name position : cx : 10 cy : 70 entity_index : 0 classes : name : homekit-name__name : true # Use homekit class","title":"Classes"},{"location":"basics/styling/classes/#basic-usage","text":"1 2 3 4 5 6 7 8 9 - type : 'circle' position : cx : 50 cy : 50 radius : 25 classes : circle : # Class definitions for circle my-first-class : true # User defined CSS class my-second-class : true # User defined CSS class","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Basic usage"},{"location":"basics/styling/classes/#default-tool-classes","text":"SAK defines classes with default styling for all the existing tools. These classes are defined in the sak-css-definitions.yaml file in the sak_templates folder. Default classes are automatically assigned to the tools There is no need for the user to specify these classes in the tools definition. Don't change this file! If you want to change the default definition, see the next chapter...","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Default tool classes"},{"location":"basics/styling/classes/#overriding-default-tool-classes","text":"The default css classes used by SAK to style the tools can be altered by overriding these classes in the user-css-definitions.yaml file. Say you don't like the fact that text is spaced for the entity name and you want to set that to 0. The SAK definition is: 1 2 3 4 5 6 7 8 9 10 11 12 13 - descr : Entity Name tool content : > .sak-name { overflow: visible; } .sak-name__name { font-size: 3em; fill: var(--primary-text-color); opacity: 1.0; text-anchor: middle; alignment-baseline: central; letter-spacing: 0.05em; } You override the letter-spacing in your own definition with a value of 0: 1 2 3 4 5 - descr : Override Entity Name tool content : > .sak-name__name { letter-spacing: 0.0em; }","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Overriding default tool classes"},{"location":"basics/styling/classes/#using-your-own-tool-classes","text":"Just as you can override default SAK classes, you can define your own set of classes to style your tools. These classes are defined in the user-css-definitions.yaml file in the sak_templates folder. Example #8, the Homekit alike cards use user defined classes to style the cards. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 # Demo using classes for example #8, some homekit like cards... #------------------------------------------------------------------------------ - descr : default Area styling content : > .homekit-area__area { text-anchor: start; font-size: 12em; font-weight: 700; fill: var(--primary-text-color); } - descr : default Name styling content : > .homekit-name__name { text-anchor: start; font-size: 12em; font-weight: 700; fill: var(--primary-text-color); } # Note: font-size MUST be defined as style for the state. # Otherwise, uom can't be rendered! - descr : default State & Uom styling content : > .homekit-state__value { text-anchor: start; font-weight: 700; fill: var(--primary-text-color); } .homekit-state__uom { fill: var(--primary-text-color); font-weight: 700; } And this looks like this in the example view, view-sake8.yaml file: 1 2 3 4 5 6 7 8 - type : name position : cx : 10 cy : 70 entity_index : 0 classes : name : homekit-name__name : true # Use homekit class","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Using your own tool classes"},{"location":"basics/styling/overview/","text":"The Swiss Army Knife has built-in support for SVG and CSS styling. This support is aimed to re-use styles: SAK lets you define your own CSS classes, CSS Animations and SVG Filters as a template and re-use them in any SAK card you make. You are not limited to the SAK defined classes, animations and filters!","title":"Overview"},{"location":"basics/styling/styles/","text":"Each tool can be styled using SVG attribute and in most cases CSS attribute styles. These styles are defined in the styles section. Within that styles section, the tool or toolpart must be selected. For single part tools, the selector is the same as the type of the tool. For multi-part tools, each part has its own styling sub-section. Basic usage \u00b6 Single part tool, a Circle: 1 2 3 4 5 6 7 8 9 - type : 'circle' position : cx : 50 cy : 50 radius : 25 styles : circle : stroke : red fill : red Multi-part tool, an Entity State composed of a 'value' and 'uom': 1 2 3 4 5 6 7 8 9 - type : 'state' position : cx : 50 cy : 50 styles : value : # Value part selector font-size : 10em uom : # Unit of measurement part selector opacity : .6 Overriding CSS Class styles \u00b6 The next definition results in a circle with red stroke and blue fill. The stroke comes from the Class definition, and the fill from the class definition is overwritten by the style definition. 1 2 3 4 5 6 7 8 9 10 11 - type : 'circle' position : cx : 50 cy : 50 radius : 25 classes : circle : my-red-circle : true styles : circle : fill : blue","title":"Styles"},{"location":"basics/styling/styles/#basic-usage","text":"Single part tool, a Circle: 1 2 3 4 5 6 7 8 9 - type : 'circle' position : cx : 50 cy : 50 radius : 25 styles : circle : stroke : red fill : red Multi-part tool, an Entity State composed of a 'value' and 'uom': 1 2 3 4 5 6 7 8 9 - type : 'state' position : cx : 50 cy : 50 styles : value : # Value part selector font-size : 10em uom : # Unit of measurement part selector opacity : .6","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Basic usage"},{"location":"basics/styling/styles/#overriding-css-class-styles","text":"The next definition results in a circle with red stroke and blue fill. The stroke comes from the Class definition, and the fill from the class definition is overwritten by the style definition. 1 2 3 4 5 6 7 8 9 10 11 - type : 'circle' position : cx : 50 cy : 50 radius : 25 classes : circle : my-red-circle : true styles : circle : fill : blue","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Overriding CSS Class styles"},{"location":"changelog/changelog/","text":"","title":"Changelog"},{"location":"examples/example-1/","text":"A single card displaying data from Airvisual, the current weather and a 5 day weather forecast. Visualization \u00b6 This visualization is divided into three major blocks: The top part shows the weathertype, temperature, humidity and AQI value. The weathertype is displayed using an external animated SVG Next are three segmented arc tools with dedicated colorstops and the state value and icon inside. The AQI icon is state dependant. The second / middle block shows pressure, wind and wind direction and sunset and sunrise The last block shows the 5 day weather forecast. The localized short day name using a bit of javascript in the YAML definition The expected weather type using (again) external animated SVG's The maximum expected temperature The minimum expected temperature The expected precipitation Data sources \u00b6 Met.no Weather integration Airvisual integration In total approx 50 entities are used to build this visualization. Configuration \u00b6 If you LOVE YAML If you DON'T love YAML It's your lucky day This is your go-to card: absolutely NO re-use, so no templates are used to define this card. It's a whopping 1.500 lines of YAML! It was my first card, made in a time where templates didn't exist yet! Skip this one for now Skip this example and look at the other examples first! Or start with this one, and learn how to read YAML the hard way... Lovelace view \u00b6 This example is in the view-sake1.yaml file in the /lovelace/views folder. File assets \u00b6 To display the weather type, you need the external animated SVG's which are located in the /local/images/weather folder Definitions used in the animations section to display the weather type icon images : - clear-night-night : /local/images/weather/clear-night.svg - cloudy-day : /local/images/weather/cloudy-day.svg - cloudy-night : /local/images/weather/cloudy-night.svg - fog-day : /local/images/weather/fog-day.svg - fog-night : /local/images/weather/fog-night.svg - hail-day : /local/images/weather/hail-day.svg - hail-night : /local/images/weather/hail-night.svg - lightning-day : /local/images/weather/lightning.svg - lightning-night : /local/images/weather/lightning.svg - partlycloudy-day : /local/images/weather/partlycloudy-day.svg - partlycloudy-night : /local/images/weather/partlycloudy-night.svg - pouring-day : /local/images/weather/pouring.svg - pouring-night : /local/images/weather/pouring-night.svg - rainy-day : /local/images/weather/rainy-day.svg - rainy-night : /local/images/weather/rainy-night.svg - snowy-day : /local/images/weather/snowy-day.svg - snowy-night : /local/images/weather/snowy-night.svg - snowy-rainy-day : /local/images/weather/snowy-rainy-day.svg - snowy-rainy-night : /local/images/weather/snowy-rainy-night.svg - sunny-day : /local/images/weather/sunny-day.svg - sunny-night : /local/images/weather/clear-night.svg - snowy-rainy-day : /local/images/weather/snowy-rainy-day.svg - snowy-rainy-night : /local/images/weather/snowy-rainy-night.svg - windy-day : /local/images/weather/windy-day.svg - windy-night : /local/images/weather/windy-night.svg - windy-variant-day : /local/images/weather/windy-variant.svg - windy-variant-night : /local/images/weather/windy-variant.svg animations : - state : '[[[ return (state); ]]]' image : > [[[ if (states[\"sun.sun\"].state == 'below_horizon') return (state + '-night'); return (state + '-day'); ]]] Interactions \u00b6 All tools support by default the \"more-info\" dialog once clicked. Remarks \u00b6 This view shows the dutch translation for \"Partly Cloudy \u2192 Gedeeltelijk bewolkt\" and the wind direction \"WSW \u2192 WZW\". Support for translations is possible using a YAML definition.","title":"1. Airvisual & Weather forecast"},{"location":"examples/example-1/#visualization","text":"This visualization is divided into three major blocks: The top part shows the weathertype, temperature, humidity and AQI value. The weathertype is displayed using an external animated SVG Next are three segmented arc tools with dedicated colorstops and the state value and icon inside. The AQI icon is state dependant. The second / middle block shows pressure, wind and wind direction and sunset and sunrise The last block shows the 5 day weather forecast. The localized short day name using a bit of javascript in the YAML definition The expected weather type using (again) external animated SVG's The maximum expected temperature The minimum expected temperature The expected precipitation","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Visualization"},{"location":"examples/example-1/#data-sources","text":"Met.no Weather integration Airvisual integration In total approx 50 entities are used to build this visualization.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Data sources"},{"location":"examples/example-1/#configuration","text":"If you LOVE YAML If you DON'T love YAML It's your lucky day This is your go-to card: absolutely NO re-use, so no templates are used to define this card. It's a whopping 1.500 lines of YAML! It was my first card, made in a time where templates didn't exist yet! Skip this one for now Skip this example and look at the other examples first! Or start with this one, and learn how to read YAML the hard way...","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Configuration"},{"location":"examples/example-1/#lovelace-view","text":"This example is in the view-sake1.yaml file in the /lovelace/views folder.","title":"Lovelace view"},{"location":"examples/example-1/#file-assets","text":"To display the weather type, you need the external animated SVG's which are located in the /local/images/weather folder Definitions used in the animations section to display the weather type icon images : - clear-night-night : /local/images/weather/clear-night.svg - cloudy-day : /local/images/weather/cloudy-day.svg - cloudy-night : /local/images/weather/cloudy-night.svg - fog-day : /local/images/weather/fog-day.svg - fog-night : /local/images/weather/fog-night.svg - hail-day : /local/images/weather/hail-day.svg - hail-night : /local/images/weather/hail-night.svg - lightning-day : /local/images/weather/lightning.svg - lightning-night : /local/images/weather/lightning.svg - partlycloudy-day : /local/images/weather/partlycloudy-day.svg - partlycloudy-night : /local/images/weather/partlycloudy-night.svg - pouring-day : /local/images/weather/pouring.svg - pouring-night : /local/images/weather/pouring-night.svg - rainy-day : /local/images/weather/rainy-day.svg - rainy-night : /local/images/weather/rainy-night.svg - snowy-day : /local/images/weather/snowy-day.svg - snowy-night : /local/images/weather/snowy-night.svg - snowy-rainy-day : /local/images/weather/snowy-rainy-day.svg - snowy-rainy-night : /local/images/weather/snowy-rainy-night.svg - sunny-day : /local/images/weather/sunny-day.svg - sunny-night : /local/images/weather/clear-night.svg - snowy-rainy-day : /local/images/weather/snowy-rainy-day.svg - snowy-rainy-night : /local/images/weather/snowy-rainy-night.svg - windy-day : /local/images/weather/windy-day.svg - windy-night : /local/images/weather/windy-night.svg - windy-variant-day : /local/images/weather/windy-variant.svg - windy-variant-night : /local/images/weather/windy-variant.svg animations : - state : '[[[ return (state); ]]]' image : > [[[ if (states[\"sun.sun\"].state == 'below_horizon') return (state + '-night'); return (state + '-day'); ]]]","title":"File assets"},{"location":"examples/example-1/#interactions","text":"All tools support by default the \"more-info\" dialog once clicked.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Interactions"},{"location":"examples/example-1/#remarks","text":"This view shows the dutch translation for \"Partly Cloudy \u2192 Gedeeltelijk bewolkt\" and the wind direction \"WSW \u2192 WZW\". Support for translations is possible using a YAML definition.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Remarks"},{"location":"examples/example-2/","text":"Visualization of lights and interaction to switch lights on and off and to control brightness using a slider for the first row. Visualization \u00b6 Tip This visualization shows some non-card alike aspects of the Swiss Army Knife: the horizontal divider lines, and the texts \"SCENES\", \"VERLICHTING (Lights)\" and \"WOONKAMER (Livingroom)\" are all made with SAK. The first lights row shows some cards with different experimental sliders and a segmented arc to display the brightness. The other rows show a standard light card. The light switch (all cards) The light switch is made out of 3 circles and an icon: the 1 st (bottom) circle is used to get the Neumorphic effect: a button that 'rises' out of the background. It also servers as the edge of the light button. the second circle is used to display the activation ring; orange if 'on' and light grey if 'off'. the third (top) circle is used to display the inset shadow effect as if the button is \"pressed\". last but not least: the light icon is displayed on top of all those circles. First card The first card shows a \"more-info\" button in the top left, the ligh button, the name of the light, and a slider with the actual percentage on the right side of the slider. The position of that value can be defined in the card. Second and third card The configurable position of the percentage is visible in the second and third card: apart from using a different styled slider, the percentage is shown in the circle where the segmented arc is also defined. The rest of the cards The other 4 - identical - cards show the light button, the area (Woonkamer = Livingroom), the name of the light, and if present: the brightness in the lower right corner. Brightness is only displayed if the light is on This is a change in Home Assistant some months ago. Data sources \u00b6 Ikea Tradfri Zigbee lights using zigbee2mqtt, ie the MQTT integration Dumb on/off lights using MQTT. Configuration \u00b6 Lovelace view \u00b6 This example is in the view-sake2.yaml file in the /lovelace/views folder. This example uses decluttering templates for all cards except for the first row of lights! Both SAK templates and Decluttering templates are used to display the cards. This view is therefore as compact and easy to read as possible and is a good example of re-use. Excerpt of the headers and dividers in this view... 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 - type : custom:decluttering-card template : divider_template - type : custom:decluttering-card template : header_template variables : - content : 'Scenes' - type : custom:decluttering-card template : divider_template - type : custom:decluttering-card template : header_template variables : - content : 'Verlichting' - type : custom:decluttering-card template : header_template variables : - content : 'Woonkamer' - font_color : var(--secondary-text-color) - font_size : 3em And the excerpt of the lights on second and third row... 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 - type : horizontal-stack cards : - type : custom:decluttering-card template : sak_light_button_template_nm_tpl variables : - entity : light.livingroom_light_gasheater_light - area : Woonkamer - name : Rode Lamp - icon : 'mdi:floor-lamp' - type : custom:decluttering-card template : sak_light_button_template_nm_tpl variables : - entity : light.livingroom_light_cupboard_light - area : Woonkamer - name : Boekenkast - icon : 'mdi:book-open-outline' SAK templates \u00b6 The following templates are defined in the /lovelace/sak_templates/sak-templates.yaml file: The toolset_light_button_nm is the template used for the standard lights (second and third row of cards). The toolset_light_button_slider_nm for the first card on the first row. The toolset_light_button_slider3_nm for the second card on the first row. The toolset_light_button_slider2_nm for the third card on the first row. Excerpt of the sak-templates.yaml file... 1 2 3 4 5 6 7 8 9 10 11 toolset_light_button_nm : !include toolset-light-button-nm-template.yaml toolset_light_button_slider_nm : !include toolset-light-button-slider-nm-template.yaml toolset_light_button_slider2_nm : !include toolset-light-button-slider2-nm-template.yaml toolset_light_button_slider3_nm : !include toolset-light-button-slider3-nm-template.yaml Decluttering templates \u00b6 Decluttering templates are used extensively in this view except for the cards on the first row. The following templates are defined in /lovelace/decluttering_templates/decluttering_templates.yaml file: The header_template is used for displaying the header sak card The divider_template is used for displaying the divider line sak card The sak_button_template_nm_tpl is used for displaying the light card Excerpt of the decluttering_templates.yaml file... 1 2 3 4 5 6 7 header_template : !include sak-header-template-mw.yaml divider_template : !include sak-divider-template-mw.yaml sak_light_button_template_nm_tpl : !include sak-light-button-nm-tpl.yaml Interactions \u00b6 Sliders \u2192 Experimental First row The first row has an explicit \"more-info\" menu button and sliders for brightness The menu in the upper left corner calls the \"more-info\" popup for the light. Clicking the light icon toggles the state of the light Clicking on the slider will set the brightness to the percentage. Dragging the slider will set the brightness and update the lights brightness semi-realtime 4 times a second. Menu in upper left corner can be difficult to touch/click The SVG Icon has no real \"touch/click\" area attached (yet). Therefore it is difficult to activate the menu as SVG Icons can only be touched/clicked on the foreground part of the icon. The slider has a touch/click area attached, so is perfectly to use Except for a little bug where the thumb is pulled to the edge of the touch/click area or the brightness is set to 100%, and cannot be controlled anymore. In this case clicking/touching the slider makes the thumb accessible again. The thumb of the slider of the first card is not positioned correctly The slider expects to be in the center of the card, which this slider is not. As a result the thumb is positioned more to the left than it should be. Will be fixed of course . Other rows All cards displayed toggle the light by clicking on the light icon All cards displayed show the \"more-info\" dialog if name or brightness percentage is clicked. Remarks \u00b6 Home Assistant sends a brightness value between 0..255. A little piece of javascript in the card converts this to 0..100% as a derived state, including a unit of measurement definition of \"%\". This means that the value and the uom can be styled as if it is an existing state.","title":"2. Lights"},{"location":"examples/example-2/#visualization","text":"Tip This visualization shows some non-card alike aspects of the Swiss Army Knife: the horizontal divider lines, and the texts \"SCENES\", \"VERLICHTING (Lights)\" and \"WOONKAMER (Livingroom)\" are all made with SAK. The first lights row shows some cards with different experimental sliders and a segmented arc to display the brightness. The other rows show a standard light card. The light switch (all cards) The light switch is made out of 3 circles and an icon: the 1 st (bottom) circle is used to get the Neumorphic effect: a button that 'rises' out of the background. It also servers as the edge of the light button. the second circle is used to display the activation ring; orange if 'on' and light grey if 'off'. the third (top) circle is used to display the inset shadow effect as if the button is \"pressed\". last but not least: the light icon is displayed on top of all those circles. First card The first card shows a \"more-info\" button in the top left, the ligh button, the name of the light, and a slider with the actual percentage on the right side of the slider. The position of that value can be defined in the card. Second and third card The configurable position of the percentage is visible in the second and third card: apart from using a different styled slider, the percentage is shown in the circle where the segmented arc is also defined. The rest of the cards The other 4 - identical - cards show the light button, the area (Woonkamer = Livingroom), the name of the light, and if present: the brightness in the lower right corner. Brightness is only displayed if the light is on This is a change in Home Assistant some months ago.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Visualization"},{"location":"examples/example-2/#data-sources","text":"Ikea Tradfri Zigbee lights using zigbee2mqtt, ie the MQTT integration Dumb on/off lights using MQTT.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Data sources"},{"location":"examples/example-2/#configuration","text":"","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Configuration"},{"location":"examples/example-2/#lovelace-view","text":"This example is in the view-sake2.yaml file in the /lovelace/views folder. This example uses decluttering templates for all cards except for the first row of lights! Both SAK templates and Decluttering templates are used to display the cards. This view is therefore as compact and easy to read as possible and is a good example of re-use. Excerpt of the headers and dividers in this view... 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 - type : custom:decluttering-card template : divider_template - type : custom:decluttering-card template : header_template variables : - content : 'Scenes' - type : custom:decluttering-card template : divider_template - type : custom:decluttering-card template : header_template variables : - content : 'Verlichting' - type : custom:decluttering-card template : header_template variables : - content : 'Woonkamer' - font_color : var(--secondary-text-color) - font_size : 3em And the excerpt of the lights on second and third row... 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 - type : horizontal-stack cards : - type : custom:decluttering-card template : sak_light_button_template_nm_tpl variables : - entity : light.livingroom_light_gasheater_light - area : Woonkamer - name : Rode Lamp - icon : 'mdi:floor-lamp' - type : custom:decluttering-card template : sak_light_button_template_nm_tpl variables : - entity : light.livingroom_light_cupboard_light - area : Woonkamer - name : Boekenkast - icon : 'mdi:book-open-outline'","title":"Lovelace view"},{"location":"examples/example-2/#sak-templates","text":"The following templates are defined in the /lovelace/sak_templates/sak-templates.yaml file: The toolset_light_button_nm is the template used for the standard lights (second and third row of cards). The toolset_light_button_slider_nm for the first card on the first row. The toolset_light_button_slider3_nm for the second card on the first row. The toolset_light_button_slider2_nm for the third card on the first row. Excerpt of the sak-templates.yaml file... 1 2 3 4 5 6 7 8 9 10 11 toolset_light_button_nm : !include toolset-light-button-nm-template.yaml toolset_light_button_slider_nm : !include toolset-light-button-slider-nm-template.yaml toolset_light_button_slider2_nm : !include toolset-light-button-slider2-nm-template.yaml toolset_light_button_slider3_nm : !include toolset-light-button-slider3-nm-template.yaml","title":"SAK templates"},{"location":"examples/example-2/#decluttering-templates","text":"Decluttering templates are used extensively in this view except for the cards on the first row. The following templates are defined in /lovelace/decluttering_templates/decluttering_templates.yaml file: The header_template is used for displaying the header sak card The divider_template is used for displaying the divider line sak card The sak_button_template_nm_tpl is used for displaying the light card Excerpt of the decluttering_templates.yaml file... 1 2 3 4 5 6 7 header_template : !include sak-header-template-mw.yaml divider_template : !include sak-divider-template-mw.yaml sak_light_button_template_nm_tpl : !include sak-light-button-nm-tpl.yaml","title":"Decluttering templates"},{"location":"examples/example-2/#interactions","text":"Sliders \u2192 Experimental First row The first row has an explicit \"more-info\" menu button and sliders for brightness The menu in the upper left corner calls the \"more-info\" popup for the light. Clicking the light icon toggles the state of the light Clicking on the slider will set the brightness to the percentage. Dragging the slider will set the brightness and update the lights brightness semi-realtime 4 times a second. Menu in upper left corner can be difficult to touch/click The SVG Icon has no real \"touch/click\" area attached (yet). Therefore it is difficult to activate the menu as SVG Icons can only be touched/clicked on the foreground part of the icon. The slider has a touch/click area attached, so is perfectly to use Except for a little bug where the thumb is pulled to the edge of the touch/click area or the brightness is set to 100%, and cannot be controlled anymore. In this case clicking/touching the slider makes the thumb accessible again. The thumb of the slider of the first card is not positioned correctly The slider expects to be in the center of the card, which this slider is not. As a result the thumb is positioned more to the left than it should be. Will be fixed of course . Other rows All cards displayed toggle the light by clicking on the light icon All cards displayed show the \"more-info\" dialog if name or brightness percentage is clicked.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Interactions"},{"location":"examples/example-2/#remarks","text":"Home Assistant sends a brightness value between 0..255. A little piece of javascript in the card converts this to 0..100% as a derived state, including a unit of measurement definition of \"%\". This means that the value and the uom can be styled as if it is an existing state.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Remarks"},{"location":"examples/example-3/","text":"Visualization of some environment sensors. Visualization \u00b6 Data sources \u00b6 Aqara Zigbee sensors with temperature, humidity and pressure data. Configuration \u00b6 Lovelace view \u00b6 This example is in the view-sake3.yaml file in the /lovelace/views folder. SAK templates \u00b6 Decluttering templates \u00b6 Interactions \u00b6 Remarks \u00b6","title":"3. Sensors"},{"location":"examples/example-3/#visualization","text":"","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Visualization"},{"location":"examples/example-3/#data-sources","text":"Aqara Zigbee sensors with temperature, humidity and pressure data.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Data sources"},{"location":"examples/example-3/#configuration","text":"","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Configuration"},{"location":"examples/example-3/#lovelace-view","text":"This example is in the view-sake3.yaml file in the /lovelace/views folder.","title":"Lovelace view"},{"location":"examples/example-3/#sak-templates","text":"","title":"SAK templates"},{"location":"examples/example-3/#decluttering-templates","text":"","title":"Decluttering templates"},{"location":"examples/example-3/#interactions","text":"","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Interactions"},{"location":"examples/example-3/#remarks","text":"","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Remarks"},{"location":"examples/example-4/","text":"Visualization \u00b6 Data sources \u00b6 Configuration \u00b6 Lovelace view \u00b6 This example is in the view-sake4.yaml file in the /lovelace/views folder. SAK templates \u00b6 Decluttering templates \u00b6 Interactions \u00b6 Remarks \u00b6","title":"4. More sensors"},{"location":"examples/example-4/#visualization","text":"","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Visualization"},{"location":"examples/example-4/#data-sources","text":"","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Data sources"},{"location":"examples/example-4/#configuration","text":"","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Configuration"},{"location":"examples/example-4/#lovelace-view","text":"This example is in the view-sake4.yaml file in the /lovelace/views folder.","title":"Lovelace view"},{"location":"examples/example-4/#sak-templates","text":"","title":"SAK templates"},{"location":"examples/example-4/#decluttering-templates","text":"","title":"Decluttering templates"},{"location":"examples/example-4/#interactions","text":"","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Interactions"},{"location":"examples/example-4/#remarks","text":"","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Remarks"},{"location":"examples/example-5/","text":"Visualization \u00b6 Data sources \u00b6 Configuration \u00b6 Lovelace view \u00b6 This example is in the view-sake5.yaml file in the /lovelace/views folder. SAK templates \u00b6 Decluttering templates \u00b6 Interactions \u00b6 Remarks \u00b6","title":"5. Car dashboard alike"},{"location":"examples/example-5/#visualization","text":"","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Visualization"},{"location":"examples/example-5/#data-sources","text":"","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Data sources"},{"location":"examples/example-5/#configuration","text":"","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Configuration"},{"location":"examples/example-5/#lovelace-view","text":"This example is in the view-sake5.yaml file in the /lovelace/views folder.","title":"Lovelace view"},{"location":"examples/example-5/#sak-templates","text":"","title":"SAK templates"},{"location":"examples/example-5/#decluttering-templates","text":"","title":"Decluttering templates"},{"location":"examples/example-5/#interactions","text":"","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Interactions"},{"location":"examples/example-5/#remarks","text":"","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Remarks"},{"location":"examples/example-6/","text":"Visualization \u00b6 Data sources \u00b6 Configuration \u00b6 Lovelace view \u00b6 This example is in the view-sake6.yaml file in the /lovelace/views folder. SAK templates \u00b6 Decluttering templates \u00b6 Interactions \u00b6 Remarks \u00b6","title":"6. Weather on SVG background"},{"location":"examples/example-6/#visualization","text":"","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Visualization"},{"location":"examples/example-6/#data-sources","text":"","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Data sources"},{"location":"examples/example-6/#configuration","text":"","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Configuration"},{"location":"examples/example-6/#lovelace-view","text":"This example is in the view-sake6.yaml file in the /lovelace/views folder.","title":"Lovelace view"},{"location":"examples/example-6/#sak-templates","text":"","title":"SAK templates"},{"location":"examples/example-6/#decluttering-templates","text":"","title":"Decluttering templates"},{"location":"examples/example-6/#interactions","text":"","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Interactions"},{"location":"examples/example-6/#remarks","text":"","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Remarks"},{"location":"examples/example-7/","text":"Visualization \u00b6 Data sources \u00b6 Configuration \u00b6 Lovelace view \u00b6 This example is in the view-sake7.yaml file in the /lovelace/views folder. SAK templates \u00b6 Decluttering templates \u00b6 Interactions \u00b6 Remarks \u00b6","title":"7. Servers"},{"location":"examples/example-7/#visualization","text":"","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Visualization"},{"location":"examples/example-7/#data-sources","text":"","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Data sources"},{"location":"examples/example-7/#configuration","text":"","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Configuration"},{"location":"examples/example-7/#lovelace-view","text":"This example is in the view-sake7.yaml file in the /lovelace/views folder.","title":"Lovelace view"},{"location":"examples/example-7/#sak-templates","text":"","title":"SAK templates"},{"location":"examples/example-7/#decluttering-templates","text":"","title":"Decluttering templates"},{"location":"examples/example-7/#interactions","text":"","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Interactions"},{"location":"examples/example-7/#remarks","text":"","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Remarks"},{"location":"examples/example-8/","text":"Visualization \u00b6 Data sources \u00b6 Configuration \u00b6 Lovelace view \u00b6 This example is in the view-sake8.yaml file in the /lovelace/views folder. SAK templates \u00b6 Decluttering templates \u00b6 Interactions \u00b6 Remarks \u00b6","title":"8. Homekit alike"},{"location":"examples/example-8/#visualization","text":"","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Visualization"},{"location":"examples/example-8/#data-sources","text":"","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Data sources"},{"location":"examples/example-8/#configuration","text":"","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Configuration"},{"location":"examples/example-8/#lovelace-view","text":"This example is in the view-sake8.yaml file in the /lovelace/views folder.","title":"Lovelace view"},{"location":"examples/example-8/#sak-templates","text":"","title":"SAK templates"},{"location":"examples/example-8/#decluttering-templates","text":"","title":"Decluttering templates"},{"location":"examples/example-8/#interactions","text":"","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Interactions"},{"location":"examples/example-8/#remarks","text":"","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Remarks"},{"location":"examples/introduction/","text":"TBD Overview of all the examples \u00b6 An overview of all the examples Example 1 : Example 2 : Example 3 : Example 4 : Example 5 : Example 6 : Example 7 : Example 8 :","title":"Introduction"},{"location":"examples/introduction/#overview-of-all-the-examples","text":"An overview of all the examples Example 1 : Example 2 : Example 3 : Example 4 : Example 5 : Example 6 : Example 7 : Example 8 :","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Overview of all the examples"},{"location":"start/designing-your-card/","text":"Where to start? \u00b6 So, you came here to read how to design your own card. That's good! If you're a graphic designer or at least some UX guy/woman, you will probably have tons of idea's, and after understanding the possibilities, you immediately fire up Adobe Indesign, Affinity Designer, Inkscape or Procreate on your PC/Mac/iPad or went online on Figma or some other online tool to sketch your design. You're one of those people: The nice thing about the Swiss Army Knife is that you can design your own card. But not everybody is a graphical designer, so how to approach designing a visualization in that case if you're one of the below people? The bad thing about the Swiss Army Knife is that you do need a design for a card. Get inspired! \u00b6 If you browse the internet you can find all sorts of visualizations. I just picked 3 as an example: The left one is a very simple and flat design without any fancy things on it. The middle is a based on a Neumorphic design. A Design that I used for most of my examples. You'll probably recognize the typical discs! The right one resembles a homekit design. It is clean and simple. All three are completely different designs, and all three can be build using the Swiss Army Knife card! Of course, you can't build them EXACTLY that way, but you can come a long way mimicking these examples. You will find several designs in the examples Most of them are (currently) using a Neumorphic design, but other flat and Homekit alike designs are also there. Ok, I got inspired. Now what? \u00b6 Well, you can try different approaches. Re-use an existing card and modify this to your own needs to design your own card Re-use some existing design you found on the internet to design your own card Create something completely new and have a unique card design Most of the possible card visualizations have been created I think, so being inspired by something that you found on the internet and use that as the basis for your own cards is well proven approach. Once you have decided what kind of style you want, you can start designing your cards. You can choose the simple approach or a more professional approach: The simple approach by \"Sketching something\" and then try to create this using trial-and-error in YAML Make a real design in an app on a 100x100 artboard, and then make the card using the design's measurements and coordinates The simple approach using a sketch \u00b6 I used this a lot and created about 50 of these sketches in Procreate on my iPad. Only some of them made it in production. Many of them where not useful, too complex to make or just ugly. Below you see one of those sketches. It shows a pre-version of the server example #7 and a real production example of the lights in example #2. Not yet Leonardo da Vinci quality, but I'm learning. At least my handwriting is on par with a doctor I then uses this sketch to create the card. This took some guessing about coordinates and sizes. I use Notepad++ as editor to produce the YAML and after every \"save\" action, I hit F5 to refresh HA's view to check if I'm satisfied with the result. If not, rinse and repeat... The server card took a lot of trial-and-error to get the 4 CPU/Load circles aligned the way I wanted to: The lights where much easier, as it involved much less parts: The professional approach using an app \u00b6 Below you see Affinity Designer in action. For example #6, I wanted to create something different with circles as the background, and on top of that some SAK tools (circles) with weather and airvisual data. For this I created an artboard with size 100mmx100mm. This is the default 'coordinate' system for a square card. This means that the coordinates shown by Affinity Designer can be copied 1:1 in the cards YAML definition. No trial-and-error this time placing the tools at the right location. The units used are NOT relevant, it's all about a 100x100 canvas. Use centons if you like... As an example I selected one of the circles where the weather type will be put. In the lower right corner of the Affinity Designer screen, you can see that I selected the center coordinates and (if you look closely) that the X coordinate is 77 (mm) and the Y coordinate 59 (mm). You also notice the width/height for the circle is 22 (mm). The resulting partial YAML definition is as follows: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 - toolset : weather-type position : # The center X and Y position from Affinity Designer cx : 77 cy : 59 tools : # The height is 22. We make the circle a bit smaller: # Outer is 22. Radius = 22/2 - 4 = 7 - type : 'circle' id : 0 position : cx : 50 cy : 50 radius : 7 styles : circle : fill : white And the final result after placing all the SAK tools on top of the background: a nice visualization, a bit artistic, clean and showing a fair bit of information. The gradient also gives a nice touch to the overall presentation.","title":"Designing your card"},{"location":"start/designing-your-card/#where-to-start","text":"So, you came here to read how to design your own card. That's good! If you're a graphic designer or at least some UX guy/woman, you will probably have tons of idea's, and after understanding the possibilities, you immediately fire up Adobe Indesign, Affinity Designer, Inkscape or Procreate on your PC/Mac/iPad or went online on Figma or some other online tool to sketch your design. You're one of those people: The nice thing about the Swiss Army Knife is that you can design your own card. But not everybody is a graphical designer, so how to approach designing a visualization in that case if you're one of the below people? The bad thing about the Swiss Army Knife is that you do need a design for a card.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Where to start?"},{"location":"start/designing-your-card/#get-inspired","text":"If you browse the internet you can find all sorts of visualizations. I just picked 3 as an example: The left one is a very simple and flat design without any fancy things on it. The middle is a based on a Neumorphic design. A Design that I used for most of my examples. You'll probably recognize the typical discs! The right one resembles a homekit design. It is clean and simple. All three are completely different designs, and all three can be build using the Swiss Army Knife card! Of course, you can't build them EXACTLY that way, but you can come a long way mimicking these examples. You will find several designs in the examples Most of them are (currently) using a Neumorphic design, but other flat and Homekit alike designs are also there.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Get inspired!"},{"location":"start/designing-your-card/#ok-i-got-inspired-now-what","text":"Well, you can try different approaches. Re-use an existing card and modify this to your own needs to design your own card Re-use some existing design you found on the internet to design your own card Create something completely new and have a unique card design Most of the possible card visualizations have been created I think, so being inspired by something that you found on the internet and use that as the basis for your own cards is well proven approach. Once you have decided what kind of style you want, you can start designing your cards. You can choose the simple approach or a more professional approach: The simple approach by \"Sketching something\" and then try to create this using trial-and-error in YAML Make a real design in an app on a 100x100 artboard, and then make the card using the design's measurements and coordinates","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Ok, I got inspired. Now what?"},{"location":"start/designing-your-card/#the-simple-approach-using-a-sketch","text":"I used this a lot and created about 50 of these sketches in Procreate on my iPad. Only some of them made it in production. Many of them where not useful, too complex to make or just ugly. Below you see one of those sketches. It shows a pre-version of the server example #7 and a real production example of the lights in example #2. Not yet Leonardo da Vinci quality, but I'm learning. At least my handwriting is on par with a doctor I then uses this sketch to create the card. This took some guessing about coordinates and sizes. I use Notepad++ as editor to produce the YAML and after every \"save\" action, I hit F5 to refresh HA's view to check if I'm satisfied with the result. If not, rinse and repeat... The server card took a lot of trial-and-error to get the 4 CPU/Load circles aligned the way I wanted to: The lights where much easier, as it involved much less parts:","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n The simple approach using a sketch"},{"location":"start/designing-your-card/#the-professional-approach-using-an-app","text":"Below you see Affinity Designer in action. For example #6, I wanted to create something different with circles as the background, and on top of that some SAK tools (circles) with weather and airvisual data. For this I created an artboard with size 100mmx100mm. This is the default 'coordinate' system for a square card. This means that the coordinates shown by Affinity Designer can be copied 1:1 in the cards YAML definition. No trial-and-error this time placing the tools at the right location. The units used are NOT relevant, it's all about a 100x100 canvas. Use centons if you like... As an example I selected one of the circles where the weather type will be put. In the lower right corner of the Affinity Designer screen, you can see that I selected the center coordinates and (if you look closely) that the X coordinate is 77 (mm) and the Y coordinate 59 (mm). You also notice the width/height for the circle is 22 (mm). The resulting partial YAML definition is as follows: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 - toolset : weather-type position : # The center X and Y position from Affinity Designer cx : 77 cy : 59 tools : # The height is 22. We make the circle a bit smaller: # Outer is 22. Radius = 22/2 - 4 = 7 - type : 'circle' id : 0 position : cx : 50 cy : 50 radius : 7 styles : circle : fill : white And the final result after placing all the SAK tools on top of the background: a nice visualization, a bit artistic, clean and showing a fair bit of information. The gradient also gives a nice touch to the overall presentation.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n The professional approach using an app"},{"location":"start/installation/","text":"Install using HACS \u00b6 By the time this card is released, it will become available in HACS.","title":"Installation"},{"location":"start/installation/#install-using-hacs","text":"By the time this card is released, it will become available in HACS.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Install using HACS"},{"location":"start/introduction/","text":"I'm a long time user of Home Assistant. In those days YAML was about the only way to configure Home Assistant, and every two weeks you were confronted with the famous list of \"breaking changes\" which led to changing your configuration again and explaining the wife that it was ok that lights went on during daytime and not in the evening: I just needed a few hours to fix it. No worries I'm visually oriented. And with the introduction of Lovelace and the numerous custom cards as a result, many choices to visualize the sensor data where created: for about everything you wanted, there was a built-in card or custom-card thanks to the vibrant community. Happy, but I want more! \u00b6 Despite those choices, I adapted these cards in many cases to get the visualization I wanted. And by doing that I learned step-by-step the inner workings of a custom card and the basis for these cards: the web-component Lit. During the adaption of another custom card, the question came up \"What if I would have the possibility to design my own visualization?\". In that case I could design completely different cards than currently available. But: I'm not a real programmer, I learn by looking how other people solve problems, and by understanding that, I can create my own code to solve my own problems, so how feasible is it to create my own card? And then shit happened... \u00b6 The kind of shit that can't be fixed easily: my little sister got diagnosed with cancer. The first MRI scans where good though: 100% chance of survival and she got her operation. But then things turned for the worse: metastatic cancer. She died 6 months later in 2021, almost in full isolation due to the covid pandemic. At the time of that fatal message I needed something positive to balance all the negative things and decided to take the challenge and start building my own card: The Swiss Army Knife with all its tools was born! The dilemma: release or not? \u00b6 I stopped working on this card after my sister died: I had other things to do, and its purpose was suddenly \"gone\" somehow. It dit however serve its main purpose: it has helped me a lot to balance my life. It was the perfect 'companion' in that time. And in hindsight I've come much, much, much further than I ever hoped when I started. SAK was complex to program, and I had to learn quite a few things about Javascript, Lit, SVG, browser dependencies and animation frames. But what to do now? The card is not finished, has no documentation and given the size that might be a pretty undertaking. Furthermore the card will have bugs, probably a lot of them. So a release means there is a lot of work to be done. And the most important question: what will I get out of this? I still need positivity to handle the loss of my sister. But what if I got help? I placed a teaser of the card on the Dutch Tweakers forum: And Yes! About 10 Home Assistant users wanted to become beta testers. A small group using this card would not overwhelm me with work, so that's how the release started with a beta program, and me starting with the documentation you're reading now! The documentation is made with Material for MkDocs: a great piece of software that has a great navigation system, even greater formatting solutions and on top of that customization to better suit my needs. Some statistics \u00b6 Last but not least: some statistics. As of December 2021 about 1.000 hours of work are put into this card. That is with a 40 hour week about 6 months of work! The size of the card itself, including comments is about 8.000 lines of JavaScript. I hope, somewhere in the future, I can convert this to TypeScript. I made about 50 sketches and designs for visualizations. Just to try out functionality, or to create new functionality. In total, the created Lovelace Views, SAK templates and Decluttering templates cover about 11.000 lines of YAML. File sizes vary between 170 lines for a view with perfect re-use, templates, etc. up to so-called copy/paste views containing many cards and resulting in a size of 3.500 lines of YAML. About 10 example views are created to be used as an example or inspiration for other users than me. These examples are included in the documentation (See Examples) and in GitHub. As this card is not yet publicly released, nothing is available on GitHub yet!","title":"Introduction"},{"location":"start/introduction/#happy-but-i-want-more","text":"Despite those choices, I adapted these cards in many cases to get the visualization I wanted. And by doing that I learned step-by-step the inner workings of a custom card and the basis for these cards: the web-component Lit. During the adaption of another custom card, the question came up \"What if I would have the possibility to design my own visualization?\". In that case I could design completely different cards than currently available. But: I'm not a real programmer, I learn by looking how other people solve problems, and by understanding that, I can create my own code to solve my own problems, so how feasible is it to create my own card?","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Happy, but I want more!"},{"location":"start/introduction/#and-then-shit-happened","text":"The kind of shit that can't be fixed easily: my little sister got diagnosed with cancer. The first MRI scans where good though: 100% chance of survival and she got her operation. But then things turned for the worse: metastatic cancer. She died 6 months later in 2021, almost in full isolation due to the covid pandemic. At the time of that fatal message I needed something positive to balance all the negative things and decided to take the challenge and start building my own card: The Swiss Army Knife with all its tools was born!","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n And then shit happened..."},{"location":"start/introduction/#the-dilemma-release-or-not","text":"I stopped working on this card after my sister died: I had other things to do, and its purpose was suddenly \"gone\" somehow. It dit however serve its main purpose: it has helped me a lot to balance my life. It was the perfect 'companion' in that time. And in hindsight I've come much, much, much further than I ever hoped when I started. SAK was complex to program, and I had to learn quite a few things about Javascript, Lit, SVG, browser dependencies and animation frames. But what to do now? The card is not finished, has no documentation and given the size that might be a pretty undertaking. Furthermore the card will have bugs, probably a lot of them. So a release means there is a lot of work to be done. And the most important question: what will I get out of this? I still need positivity to handle the loss of my sister. But what if I got help? I placed a teaser of the card on the Dutch Tweakers forum: And Yes! About 10 Home Assistant users wanted to become beta testers. A small group using this card would not overwhelm me with work, so that's how the release started with a beta program, and me starting with the documentation you're reading now! The documentation is made with Material for MkDocs: a great piece of software that has a great navigation system, even greater formatting solutions and on top of that customization to better suit my needs.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n The dilemma: release or not?"},{"location":"start/introduction/#some-statistics","text":"Last but not least: some statistics. As of December 2021 about 1.000 hours of work are put into this card. That is with a 40 hour week about 6 months of work! The size of the card itself, including comments is about 8.000 lines of JavaScript. I hope, somewhere in the future, I can convert this to TypeScript. I made about 50 sketches and designs for visualizations. Just to try out functionality, or to create new functionality. In total, the created Lovelace Views, SAK templates and Decluttering templates cover about 11.000 lines of YAML. File sizes vary between 170 lines for a view with perfect re-use, templates, etc. up to so-called copy/paste views containing many cards and resulting in a size of 3.500 lines of YAML. About 10 example views are created to be used as an example or inspiration for other users than me. These examples are included in the documentation (See Examples) and in GitHub. As this card is not yet publicly released, nothing is available on GitHub yet!","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Some statistics"},{"location":"tools/circle-tool/","text":"The Circle tool \u00b6 The Circle tool is based on the SVG basic <circle> element shape. Basic usage \u00b6 1 2 3 4 5 - type : 'circle' # tooltype is 'circle' position : # Position on (100x100) canvas cx : 50 # cx=50 is center position cy : 50 # cy=50 is center position radius : 25 # radius of circle. Width/height is 50 Styling \u00b6 The Circle tool has support for the following forms of styling: Method Support Description classes Using SAK or User defined class definitions styles Using inline SVG and CSS styles The Circle tool is composed of a single object: \"circle\" and this is the selector for styling: 1 2 3 4 5 6 7 8 9 10 11 - type : 'circle' position : cx : 50 cy : 50 radius : 25 classes : circle : # Circle selector <...> styles : circle : # Circle selector <...> Populair attributes: Attribute Does what? Example fill Fill color fill: red sets fill to color red stroke-width Stroke width stroke-width: 2em sets width to relative width of 2em stroke Stroke color stroke: blue sets stroke to blue opacity Opacity (stroke/fill) opacity: 0.7 sets the opacity of circle to 70% fill-opacity Opacity for fill fill-opacity: 0.5 sets the fill opacity to 50% stroke-opacity Opacity for stroke stroke-opacity: 0.5 sets the stroke opacity to 50% Reference: https://developer.mozilla.org/en-US/docs/Web/SVG/Element/circle Animations \u00b6 The Circle tool has support for the following forms of animations: Method Support Description colorstops Using a colorstops definition colorlists Using a colorlist definition animations Using operator based animations with class/style styling The use of animations require the tool to be connected to an entity Connect the tool to an entity using the entity_index: <0..x> section. The entity is defined in the entities: section of the card.","title":"Circle"},{"location":"tools/circle-tool/#the-circle-tool","text":"The Circle tool is based on the SVG basic <circle> element shape.","title":"The Circle tool"},{"location":"tools/circle-tool/#basic-usage","text":"1 2 3 4 5 - type : 'circle' # tooltype is 'circle' position : # Position on (100x100) canvas cx : 50 # cx=50 is center position cy : 50 # cy=50 is center position radius : 25 # radius of circle. Width/height is 50","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Basic usage"},{"location":"tools/circle-tool/#styling","text":"The Circle tool has support for the following forms of styling: Method Support Description classes Using SAK or User defined class definitions styles Using inline SVG and CSS styles The Circle tool is composed of a single object: \"circle\" and this is the selector for styling: 1 2 3 4 5 6 7 8 9 10 11 - type : 'circle' position : cx : 50 cy : 50 radius : 25 classes : circle : # Circle selector <...> styles : circle : # Circle selector <...> Populair attributes: Attribute Does what? Example fill Fill color fill: red sets fill to color red stroke-width Stroke width stroke-width: 2em sets width to relative width of 2em stroke Stroke color stroke: blue sets stroke to blue opacity Opacity (stroke/fill) opacity: 0.7 sets the opacity of circle to 70% fill-opacity Opacity for fill fill-opacity: 0.5 sets the fill opacity to 50% stroke-opacity Opacity for stroke stroke-opacity: 0.5 sets the stroke opacity to 50% Reference: https://developer.mozilla.org/en-US/docs/Web/SVG/Element/circle","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Styling"},{"location":"tools/circle-tool/#animations","text":"The Circle tool has support for the following forms of animations: Method Support Description colorstops Using a colorstops definition colorlists Using a colorlist definition animations Using operator based animations with class/style styling The use of animations require the tool to be connected to an entity Connect the tool to an entity using the entity_index: <0..x> section. The entity is defined in the entities: section of the card.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Animations"},{"location":"tools/ellipse-tool/","text":"The Ellipse tool \u00b6 The Ellipse tool is based on the SVG basic <ellipse> element shape. Basic usage \u00b6 1 2 3 4 5 6 - type : 'ellipse' # tooltype is 'ellipse' position : # Position on (100x100) canvas cx : 50 # cx=50 is center position cy : 50 # cy=50 is center position radiusx : 50 # Width is 100 radiusy : 25 # Height is 50 Set the x and y radius the same to create a circle Styling \u00b6 The Ellipse tool has support for the following forms of styling: Method Support Description classes Using SAK or User defined class definitions styles Using inline SVG and CSS styles The Ellipse tool is composed of a single object: \"ellipse\" and this is the selector for styling: 1 2 3 4 5 6 7 8 9 10 11 12 - type : 'ellipse' position : cx : 50 cy : 50 radiusx : 50 radiusy : 25 classes : ellipse : # Ellipse selector <...> styles : ellipse : # Ellipse selector <...> Populair attributes: Attribute Does what? Example fill Fill color fill: red sets fill to color red stroke-width Stroke width stroke-width: 2em sets width to relative width of 2em stroke Stroke color stroke: blue sets stroke to blue opacity Opacity (stroke/fill) opacity: 0.7 sets the opacity of ellipse to 70% fill-opacity Opacity for fill fill-opacity: 0.5 sets the fill opacity to 50% stroke-opacity Opacity for stroke stroke-opacity: 0.5 sets the stroke opacity to 50% Reference: https://developer.mozilla.org/en-US/docs/Web/SVG/Element/ellipse Animations \u00b6 The Ellipse tool has support for the following forms of animations: Method Support Description colorstops Using a colorstops definition colorlists Using a colorlist definition animations Using operator based animations with class/style styling The use of animations require the tool to be connected to an entity Connect the tool to an entity using the entity_index: <0..x> section. The entity is defined in the entities: section of the card.","title":"Ellipse"},{"location":"tools/ellipse-tool/#the-ellipse-tool","text":"The Ellipse tool is based on the SVG basic <ellipse> element shape.","title":"The Ellipse tool"},{"location":"tools/ellipse-tool/#basic-usage","text":"1 2 3 4 5 6 - type : 'ellipse' # tooltype is 'ellipse' position : # Position on (100x100) canvas cx : 50 # cx=50 is center position cy : 50 # cy=50 is center position radiusx : 50 # Width is 100 radiusy : 25 # Height is 50 Set the x and y radius the same to create a circle","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Basic usage"},{"location":"tools/ellipse-tool/#styling","text":"The Ellipse tool has support for the following forms of styling: Method Support Description classes Using SAK or User defined class definitions styles Using inline SVG and CSS styles The Ellipse tool is composed of a single object: \"ellipse\" and this is the selector for styling: 1 2 3 4 5 6 7 8 9 10 11 12 - type : 'ellipse' position : cx : 50 cy : 50 radiusx : 50 radiusy : 25 classes : ellipse : # Ellipse selector <...> styles : ellipse : # Ellipse selector <...> Populair attributes: Attribute Does what? Example fill Fill color fill: red sets fill to color red stroke-width Stroke width stroke-width: 2em sets width to relative width of 2em stroke Stroke color stroke: blue sets stroke to blue opacity Opacity (stroke/fill) opacity: 0.7 sets the opacity of ellipse to 70% fill-opacity Opacity for fill fill-opacity: 0.5 sets the fill opacity to 50% stroke-opacity Opacity for stroke stroke-opacity: 0.5 sets the stroke opacity to 50% Reference: https://developer.mozilla.org/en-US/docs/Web/SVG/Element/ellipse","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Styling"},{"location":"tools/ellipse-tool/#animations","text":"The Ellipse tool has support for the following forms of animations: Method Support Description colorstops Using a colorstops definition colorlists Using a colorlist definition animations Using operator based animations with class/style styling The use of animations require the tool to be connected to an entity Connect the tool to an entity using the entity_index: <0..x> section. The entity is defined in the entities: section of the card.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Animations"},{"location":"tools/line-tool/","text":"The Line tool \u00b6 The Line tool is based on the SVG basic <line> element shape Basic usage \u00b6 1 2 3 4 5 6 - type : 'line' # tooltype is 'line' position : # Position on (100x100) canvas cx : 50 # cx=50 is center position cy : 50 # cy=50 is center position length : 25 # length of line. orientation : 'vertical' # Vertical or horizontal Use the stroke-width styling to set the width of the line Use the stroke-width to set the width of the line in the styles section or using a class definition and enabling that class in the classes section. Use the transform style to rotate the tool Use transform: rotate(45deg) for example to rotate the line by 45 degrees. There will be support in the future to define the line with (x1,y1) and (x2,y2) coordinates to make any angle possible. Styling \u00b6 The Line tool has support for the following forms of styling: Method Support Description classes Using SAK or User defined class definitions styles Using inline SVG and CSS styles The Line tool is composed of a single object: \"line\" and this is the selector for styling: 1 2 3 4 5 6 7 8 9 10 11 12 - type : 'line' position : cx : 50 cy : 50 length : 25 orientation : 'vertical' classes : line : # Line selector <...> styles : line : # Line selector <...> Populair attributes: Attribute Does what? Example stroke-width Line width stroke-width: 2em sets width to relative width of 2em stroke Line color stroke: red opacity Line opacity opacity: 0.7 sets the opacity of the stroke to 70% Reference: https://developer.mozilla.org/en-US/docs/Web/SVG/Element/line Animations \u00b6 The Line tool has support for the following forms of animations: Method Support Description colorstops Using a colorstops definition colorlists Using a colorlist definition animations Using operator based animations with class/style styling The use of animations require the tool to be connected to an entity Connect the tool to an entity using the entity_index: <0..x> section. The entity is defined in the entities: section of the card.","title":"Line"},{"location":"tools/line-tool/#the-line-tool","text":"The Line tool is based on the SVG basic <line> element shape","title":"The Line tool"},{"location":"tools/line-tool/#basic-usage","text":"1 2 3 4 5 6 - type : 'line' # tooltype is 'line' position : # Position on (100x100) canvas cx : 50 # cx=50 is center position cy : 50 # cy=50 is center position length : 25 # length of line. orientation : 'vertical' # Vertical or horizontal Use the stroke-width styling to set the width of the line Use the stroke-width to set the width of the line in the styles section or using a class definition and enabling that class in the classes section. Use the transform style to rotate the tool Use transform: rotate(45deg) for example to rotate the line by 45 degrees. There will be support in the future to define the line with (x1,y1) and (x2,y2) coordinates to make any angle possible.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Basic usage"},{"location":"tools/line-tool/#styling","text":"The Line tool has support for the following forms of styling: Method Support Description classes Using SAK or User defined class definitions styles Using inline SVG and CSS styles The Line tool is composed of a single object: \"line\" and this is the selector for styling: 1 2 3 4 5 6 7 8 9 10 11 12 - type : 'line' position : cx : 50 cy : 50 length : 25 orientation : 'vertical' classes : line : # Line selector <...> styles : line : # Line selector <...> Populair attributes: Attribute Does what? Example stroke-width Line width stroke-width: 2em sets width to relative width of 2em stroke Line color stroke: red opacity Line opacity opacity: 0.7 sets the opacity of the stroke to 70% Reference: https://developer.mozilla.org/en-US/docs/Web/SVG/Element/line","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Styling"},{"location":"tools/line-tool/#animations","text":"The Line tool has support for the following forms of animations: Method Support Description colorstops Using a colorstops definition colorlists Using a colorlist definition animations Using operator based animations with class/style styling The use of animations require the tool to be connected to an entity Connect the tool to an entity using the entity_index: <0..x> section. The entity is defined in the entities: section of the card.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Animations"},{"location":"tools/switch-tool/","text":"The Switch tool \u00b6 The Switch tool is based on two SVG basic <rectangle> element shapes. It is a composite tool with a built-in animation to move the thumb to 'off' or 'on' position and to change the color to 'off' or 'on' color. Basic usage \u00b6 1 2 3 4 5 6 - type : 'switch' # tooltype is 'switch' position : # Position on (100x100) canvas cx : 50 # cx=50 is center position cy : 50 # cy=50 is center position orientation : 'horizontal' # Vertical or horizontal entity_index : 0 The switch tool must ALWAYS be connected to an 'on' / 'off' state entity. Lights and Switches are the most used entities for this tool. Extended usage \u00b6 The Switch tools parts can be defined/styled individually. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 - type : switch position : cx : 50 cy : 50 track : # Configure track part radius : 1 # Round corners with radius=1 thumb : # Configure thumb part width : 5 # Set width height : 5 # Set height radius : 1 # Set corner radius offset : 2.5 # offset = width/2 for on/off move orientation : 'horizontal' entity_index : 0 animations : - state : 'on' # Define thumb colors when 'on' id : 1 styles : thumb : --thumb-stroke : 'var(--primary-background-color)' fill : 'var(--switch-checked-button-color)' styles : thumb : # Overwrite thumb setting --thumb-stroke : 'var(--primary-background-color)' Style the switch to round or square By specifying both the track and the thumb sizes and corner radius, you can create completely different switches. Styling \u00b6 The Switch tool has support for the following forms of styling: Method Support Description classes Using SAK or User defined class definitions styles Using inswitch SVG and CSS styles The Switch tool is composed of two parts: \"track\" and \"thumb\" can be used as the selector for styling: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 - type : 'switch' position : cx : 50 cy : 50 orientation : 'vertical' entity_index : 0 classes : track : # Track selector <...> thumb : # Thumb selector <...> styles : track : # Track selector <...> thumb : # Thumb selector <...> Populair attributes: Attribute Does what? Example Animations \u00b6 The Switch tool has support for the following forms of animations: Method Support Description colorstops Using a colorstops definition colorlists Using a colorlist definition animations Using operator based animations with class/style styling Examples \u00b6 Some examples with different settings in 'off' and 'on' state. From left to right, the partial configuration is as follows: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 - type : switch # #1 position : cx : 60 cy : 30 orientation : 'vertical' - type : switch # #2 position : cx : 80 cy : 30 orientation : 'horizontal' - type : switch # #3 position : cx : 100 cy : 30 track : radius : 1 thumb : width : 5 height : 5 radius : 1 offset : 2.5 orientation : 'horizontal' - type : switch # #4 position : cx : 120 cy : 30 track : radius : 1 thumb : width : 5 height : 10 radius : 1 offset : 2.5 orientation : 'horizontal' - type : switch # #5 position : cx : 140 cy : 30 orientation : 'horizontal' thumb : width : 5 height : 5 radius : 2.5 offset : 2.5","title":"Switch"},{"location":"tools/switch-tool/#the-switch-tool","text":"The Switch tool is based on two SVG basic <rectangle> element shapes. It is a composite tool with a built-in animation to move the thumb to 'off' or 'on' position and to change the color to 'off' or 'on' color.","title":"The Switch tool"},{"location":"tools/switch-tool/#basic-usage","text":"1 2 3 4 5 6 - type : 'switch' # tooltype is 'switch' position : # Position on (100x100) canvas cx : 50 # cx=50 is center position cy : 50 # cy=50 is center position orientation : 'horizontal' # Vertical or horizontal entity_index : 0 The switch tool must ALWAYS be connected to an 'on' / 'off' state entity. Lights and Switches are the most used entities for this tool.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Basic usage"},{"location":"tools/switch-tool/#extended-usage","text":"The Switch tools parts can be defined/styled individually. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 - type : switch position : cx : 50 cy : 50 track : # Configure track part radius : 1 # Round corners with radius=1 thumb : # Configure thumb part width : 5 # Set width height : 5 # Set height radius : 1 # Set corner radius offset : 2.5 # offset = width/2 for on/off move orientation : 'horizontal' entity_index : 0 animations : - state : 'on' # Define thumb colors when 'on' id : 1 styles : thumb : --thumb-stroke : 'var(--primary-background-color)' fill : 'var(--switch-checked-button-color)' styles : thumb : # Overwrite thumb setting --thumb-stroke : 'var(--primary-background-color)' Style the switch to round or square By specifying both the track and the thumb sizes and corner radius, you can create completely different switches.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Extended usage"},{"location":"tools/switch-tool/#styling","text":"The Switch tool has support for the following forms of styling: Method Support Description classes Using SAK or User defined class definitions styles Using inswitch SVG and CSS styles The Switch tool is composed of two parts: \"track\" and \"thumb\" can be used as the selector for styling: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 - type : 'switch' position : cx : 50 cy : 50 orientation : 'vertical' entity_index : 0 classes : track : # Track selector <...> thumb : # Thumb selector <...> styles : track : # Track selector <...> thumb : # Thumb selector <...> Populair attributes: Attribute Does what? Example","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Styling"},{"location":"tools/switch-tool/#animations","text":"The Switch tool has support for the following forms of animations: Method Support Description colorstops Using a colorstops definition colorlists Using a colorlist definition animations Using operator based animations with class/style styling","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Animations"},{"location":"tools/switch-tool/#examples","text":"Some examples with different settings in 'off' and 'on' state. From left to right, the partial configuration is as follows: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 - type : switch # #1 position : cx : 60 cy : 30 orientation : 'vertical' - type : switch # #2 position : cx : 80 cy : 30 orientation : 'horizontal' - type : switch # #3 position : cx : 100 cy : 30 track : radius : 1 thumb : width : 5 height : 5 radius : 1 offset : 2.5 orientation : 'horizontal' - type : switch # #4 position : cx : 120 cy : 30 track : radius : 1 thumb : width : 5 height : 10 radius : 1 offset : 2.5 orientation : 'horizontal' - type : switch # #5 position : cx : 140 cy : 30 orientation : 'horizontal' thumb : width : 5 height : 5 radius : 2.5 offset : 2.5","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Examples"}]}