{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"basics/card-structure/","tags":["YAML","Structure","Card"],"text":"The Swiss Army Knife YAML structure \u00b6 The main aspects of a SAK Card are shown below using yellow lines. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 # Define the type of the card to use. # # This is normally part of a \"cards\" section from a horizontal or vertical Lovelace stack # ----- - type : 'custom:swiss-army-knife-card' # Define the entities entities : - <list of entities> # # Define aspect ratio and size of card. # - In this case the card is square and has a size of 100x100 # - A 2/1 ratio would have a size of 200x100 # - etc. # # Odd values like 1/0.05 are also possible. Size is 100x5 # This is used for instance to just draw a line/separator # # Specification: # - aspectratio (string) # ----- aspectratio : 1/1 # # Display the card or not. # - default false. Card is displayed. # - use true to just draw header text or a separator. # ----- disable_card : false # # ***** card/layout section ***** # # Specification: # - layout (map) # ----- layout : # ***** card/layout/styles section ***** # # Overall styles for the card and toolsets. Mainly used for defining filters! # # Specification: # - styles (map) # ----- styles : card : toolsets : # Define Neumorphic filter over the full toolset. filter : url(#sak-nm-default) # Define material shadow filter over the full toolset # filter: url(#ds-1) # # ***** card/layout/toolsets section ***** # # Define the list of toolsets from here # # Specification: # - toolsets (list of toolset configs) # ----- toolsets : # define list of toolsets with its tools - toolset : background # # define list of tools within toolset # # Specification: # - tools (list of tool configs) # tools : # # define the tools # - type : 'usersvg' <...etc...>","title":"Card structure"},{"location":"basics/card-structure/#the-swiss-army-knife-yaml-structure","text":"The main aspects of a SAK Card are shown below using yellow lines. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 # Define the type of the card to use. # # This is normally part of a \"cards\" section from a horizontal or vertical Lovelace stack # ----- - type : 'custom:swiss-army-knife-card' # Define the entities entities : - <list of entities> # # Define aspect ratio and size of card. # - In this case the card is square and has a size of 100x100 # - A 2/1 ratio would have a size of 200x100 # - etc. # # Odd values like 1/0.05 are also possible. Size is 100x5 # This is used for instance to just draw a line/separator # # Specification: # - aspectratio (string) # ----- aspectratio : 1/1 # # Display the card or not. # - default false. Card is displayed. # - use true to just draw header text or a separator. # ----- disable_card : false # # ***** card/layout section ***** # # Specification: # - layout (map) # ----- layout : # ***** card/layout/styles section ***** # # Overall styles for the card and toolsets. Mainly used for defining filters! # # Specification: # - styles (map) # ----- styles : card : toolsets : # Define Neumorphic filter over the full toolset. filter : url(#sak-nm-default) # Define material shadow filter over the full toolset # filter: url(#ds-1) # # ***** card/layout/toolsets section ***** # # Define the list of toolsets from here # # Specification: # - toolsets (list of toolset configs) # ----- toolsets : # define list of toolsets with its tools - toolset : background # # define list of tools within toolset # # Specification: # - tools (list of tool configs) # tools : # # define the tools # - type : 'usersvg' <...etc...>","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n The Swiss Army Knife YAML structure"},{"location":"basics/coordinate-system/","tags":["Coordinate System","Design"],"text":"The Swiss Army Knife map uses a easy to understand coordinate system to simplify the design and placement of toolsets and tools on a card. Basics \u00b6 The coordinate system of a SAK Card is based on the following characteristics: Card: A SAK Card has a configurable aspectratio That aspect ratio determines the internal grid size: aspect ratio * 100 . Toolset & Tools: A Toolset has a default 100x100 grid size. It does NOT depend on the size of a card. The top-left is the origin (0,0) The center coordinates of a toolset are (50,50) All tool dimensions are relative to the default toolset grid size: a line with a length of 10 means 10% of this default grid. The next paragraph shows an example, and the paragraphs thereafter more details. An example: Toolset and tool placement @ work \u00b6 Now we know the basics, let's look at the example with a card size of 200x100 (2/1 aspect ratio) and two identical toolsets consisting of a circle , icon , and state . The tools are neatly configured around the center position (50,50) of the toolset grid: the circle is placed at (50,50) with its radius of 25, the icon is placed at (50,40) and the state is placed at (50,60). The first toolset is placed at (40,50) on the card, and the second toolset at (160,50) on the card. In a kind of 3D world, it looks like this: The YAML configuration is shown below. Here you see the toolsets (named set1 and set2) and the different tools: circle , state and icon . For brevity only the coordinates/sizes part is shown. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 aspectratio : 2/1 # Gives a 200x100 canvas size layout : # Circles with icon and state are placed at (40,50) and (160,50) toolsets : - toolset : set1 position : cx : 40 cy : 50 tools : - type : circle position : cx : 50 # Circle is centered on 100x100 cy : 50 radius : 25 - type : state position : cx : 50 # x centered cy : 60 # y a bit lower - type : icon position : cx : 50 # x centered cy : 40 # y a bit higher align : center icon_size : 15 - toolset : set2 position : cx : 160 cy : 50 tools : - type : circle position : cx : 50 # Circle is centered on 100x100 cy : 50 radius : 25 - type : state position : cx : 50 # x centered cy : 60 # y a bit lower - type : icon position : cx : 50 # x centered cy : 40 # y a bit higher align : center icon_size : 15 More indepth: Card aspect ratio and size \u00b6 Below you see the configuration of a 1/1 square card which equals a grid size of 100x100. - type : 'custom:swiss-army-knife-card' aspectratio : 1/1 # Square 1/1 card with resulting 100x100 grid size Example cards with different aspect ratio's \u00b6 Some examples for aspect ratio's and (grid size) of: 0.5/1 (50x100), 1/1 (100x100), 2/1 (200x100) and 3/1 (300x100): You are not limited to these aspect ratio's. Any aspect ratio will work But what about the internal grid size then? \u00b6 If I would place three square cards in a horizontal-stack with different aspect ratio's, I get three equally sized cards. All cards scale to the same actual size in pixels, independently of their internal grid sizes of 100x100, 200x200 and 400x400. 1/1 2/2 4/4 The result of these different internal sizes can be seen in the following example: I \"designed\" a toolset with a single circle on a standard 100x100 canvas and placed the toolset for each card on the same position (50,50); The circle scales to the actual grid size of the card. Scalable Vector Graphics at work! 1/1 2/2 4/4 The 1/1, 2/1 and 3/1 are mostly used for mobile phones, and the much larger ones, say 4/4 for panels The tools on a 4/4 would be too small to read on a mobile phone, but are excellent on large displays. More indepth: Toolset aspect ratio and size \u00b6 As already mentioned, the position and dimensions of a tool always reference a default toolset grid size of 100x100: (0,0) is the upper left corner of the grid (100,100) is the lower right corner of the grid (50,50) is the center of the grid and servers as the 'anchor' used by the Toolset to position the tools on a card. Furthermore, all dimensions are relative to the grid: a line with a length of 10 takes 10% of the grid. a circle with radius of 50 fits exactly the grid. The size and position of tools are not limited by this grid size! So: a tool can be wider and higher a tool can be placed outside these default coordinates: so coordinates can be < 0 or > 100. This means that - without scaling - such a toolset does NOT fit a 1/1 card! Such toolsets are therefore designed for larger cards. Don't forget that toolsets can scale tools and are re-usable if defined as a template Use relative sizes for styles too, where possible \u00b6 The dimensions of the tool are relative. Therefore, it is recommended to also use relative dimensions for styling. A simple example is the CSS font-size attribute: use em and not px to configure the size of a font, ie use font-size: 12em . SAK has set the default font-size for SAK cards to be about the same size as 1% of the grid: so font-size: 10em should equal 10% of the grid.","title":"Coordinate system"},{"location":"basics/coordinate-system/#basics","text":"The coordinate system of a SAK Card is based on the following characteristics: Card: A SAK Card has a configurable aspectratio That aspect ratio determines the internal grid size: aspect ratio * 100 . Toolset & Tools: A Toolset has a default 100x100 grid size. It does NOT depend on the size of a card. The top-left is the origin (0,0) The center coordinates of a toolset are (50,50) All tool dimensions are relative to the default toolset grid size: a line with a length of 10 means 10% of this default grid. The next paragraph shows an example, and the paragraphs thereafter more details.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Basics"},{"location":"basics/coordinate-system/#an-example-toolset-and-tool-placement-work","text":"Now we know the basics, let's look at the example with a card size of 200x100 (2/1 aspect ratio) and two identical toolsets consisting of a circle , icon , and state . The tools are neatly configured around the center position (50,50) of the toolset grid: the circle is placed at (50,50) with its radius of 25, the icon is placed at (50,40) and the state is placed at (50,60). The first toolset is placed at (40,50) on the card, and the second toolset at (160,50) on the card. In a kind of 3D world, it looks like this: The YAML configuration is shown below. Here you see the toolsets (named set1 and set2) and the different tools: circle , state and icon . For brevity only the coordinates/sizes part is shown. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 aspectratio : 2/1 # Gives a 200x100 canvas size layout : # Circles with icon and state are placed at (40,50) and (160,50) toolsets : - toolset : set1 position : cx : 40 cy : 50 tools : - type : circle position : cx : 50 # Circle is centered on 100x100 cy : 50 radius : 25 - type : state position : cx : 50 # x centered cy : 60 # y a bit lower - type : icon position : cx : 50 # x centered cy : 40 # y a bit higher align : center icon_size : 15 - toolset : set2 position : cx : 160 cy : 50 tools : - type : circle position : cx : 50 # Circle is centered on 100x100 cy : 50 radius : 25 - type : state position : cx : 50 # x centered cy : 60 # y a bit lower - type : icon position : cx : 50 # x centered cy : 40 # y a bit higher align : center icon_size : 15","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n An example: Toolset and tool placement @ work"},{"location":"basics/coordinate-system/#more-indepth-card-aspect-ratio-and-size","text":"Below you see the configuration of a 1/1 square card which equals a grid size of 100x100. - type : 'custom:swiss-army-knife-card' aspectratio : 1/1 # Square 1/1 card with resulting 100x100 grid size","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n More indepth: Card aspect ratio and size"},{"location":"basics/coordinate-system/#example-cards-with-different-aspect-ratios","text":"Some examples for aspect ratio's and (grid size) of: 0.5/1 (50x100), 1/1 (100x100), 2/1 (200x100) and 3/1 (300x100): You are not limited to these aspect ratio's. Any aspect ratio will work","title":"Example cards with different aspect ratio's"},{"location":"basics/coordinate-system/#but-what-about-the-internal-grid-size-then","text":"If I would place three square cards in a horizontal-stack with different aspect ratio's, I get three equally sized cards. All cards scale to the same actual size in pixels, independently of their internal grid sizes of 100x100, 200x200 and 400x400. 1/1 2/2 4/4 The result of these different internal sizes can be seen in the following example: I \"designed\" a toolset with a single circle on a standard 100x100 canvas and placed the toolset for each card on the same position (50,50); The circle scales to the actual grid size of the card. Scalable Vector Graphics at work! 1/1 2/2 4/4 The 1/1, 2/1 and 3/1 are mostly used for mobile phones, and the much larger ones, say 4/4 for panels The tools on a 4/4 would be too small to read on a mobile phone, but are excellent on large displays.","title":"But what about the internal grid size then?"},{"location":"basics/coordinate-system/#more-indepth-toolset-aspect-ratio-and-size","text":"As already mentioned, the position and dimensions of a tool always reference a default toolset grid size of 100x100: (0,0) is the upper left corner of the grid (100,100) is the lower right corner of the grid (50,50) is the center of the grid and servers as the 'anchor' used by the Toolset to position the tools on a card. Furthermore, all dimensions are relative to the grid: a line with a length of 10 takes 10% of the grid. a circle with radius of 50 fits exactly the grid. The size and position of tools are not limited by this grid size! So: a tool can be wider and higher a tool can be placed outside these default coordinates: so coordinates can be < 0 or > 100. This means that - without scaling - such a toolset does NOT fit a 1/1 card! Such toolsets are therefore designed for larger cards. Don't forget that toolsets can scale tools and are re-usable if defined as a template","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n More indepth: Toolset aspect ratio and size"},{"location":"basics/coordinate-system/#use-relative-sizes-for-styles-too-where-possible","text":"The dimensions of the tool are relative. Therefore, it is recommended to also use relative dimensions for styling. A simple example is the CSS font-size attribute: use em and not px to configure the size of a font, ie use font-size: 12em . SAK has set the default font-size for SAK cards to be about the same size as 1% of the grid: so font-size: 10em should equal 10% of the grid.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Use relative sizes for styles too, where possible"},{"location":"basics/haptics/","tags":["Interactions","Haptics","Feedback"],"text":"The Swiss Army Knife card supports haptics. Most tools support the default haptics through tap_actions . Each tool description contains the supported haptics. Haptics \u00b6 See: https://companion.home-assistant.io/docs/integrations/haptics/ for devices that support haptics The tool supports haptic feedback through user_actions / tap_action definition Action Haptic Description Click haptic Uses the haptic property defined in the user_actions definition of the tool. If not specified, a default of medium is used 1 2 3 4 5 6 7 8 9 10 11 12 13 tools : - type : icon position : cx : 10 cy : 10 align : center icon_size : 15 entity_index : 0 user_actions : tap_action : haptic : success actions : - action : more-info Possible values for haptic feedback: Haptic Description success Indicates that a task or action has completed. warning Indicates that a task or action has produced a warning of some kind. failure Indicates that a task or action has failed. light Provides a physical metaphor that complements the visual experience. medium Provides a physical metaphor that complements the visual experience. heavy Provides a physical metaphor that complements the visual experience. selection Indicates that the selection is actively changing.","title":"Haptic Feedback"},{"location":"basics/haptics/#haptics","text":"See: https://companion.home-assistant.io/docs/integrations/haptics/ for devices that support haptics The tool supports haptic feedback through user_actions / tap_action definition Action Haptic Description Click haptic Uses the haptic property defined in the user_actions definition of the tool. If not specified, a default of medium is used 1 2 3 4 5 6 7 8 9 10 11 12 13 tools : - type : icon position : cx : 10 cy : 10 align : center icon_size : 15 entity_index : 0 user_actions : tap_action : haptic : success actions : - action : more-info Possible values for haptic feedback: Haptic Description success Indicates that a task or action has completed. warning Indicates that a task or action has produced a warning of some kind. failure Indicates that a task or action has failed. light Provides a physical metaphor that complements the visual experience. medium Provides a physical metaphor that complements the visual experience. heavy Provides a physical metaphor that complements the visual experience. selection Indicates that the selection is actively changing.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Haptics"},{"location":"basics/tools-and-toolsets/","tags":["Tools","Toolsets"],"text":"Tools and Toolsets are the main ingredients of the Swiss Army Knife custom card. They provide the means to visualize Home Assistant data in a free and creative manner. The Swiss Army Knife uses SVG (Scalable Vector Graphics) as its sole basis to visualize the tools on a card. Tools to create visualizations \u00b6 The Swiss Army Knife card offers a series of tools (currently 17) to create visualizations. The tools are: tool type description circle basic A circle ellipse basic An ellipse line basic A vertical, horizontal or oblique line rectangle basic A rectangle with and w/o rounded corners rectex basic A more advanced rectangle with independent rounded corners regpoly basic A regular poly using the Schl\u00e4fli symbol math text basic A text display horseshoe advanced TBD segarc advanced A segmented arc: shows progress data in an arc slider advanced Slider input tool. Used for brightness for example switch advanced A basic on/off switch usersvg advanced For fetching user defined, external SVG files area HA specific Represents an Entity Area icon HA specific Represents an Entity Icon name HA specific Represents an Entity Name state HA specific Represents an Entity State & Unit of Measurement bar HA specific Represents an simple state history (horizontal or vertical bars) Toolsets to combine and control tools \u00b6 Toolsets provide extra functionality to tools. Grouping of tools \u00b6 Well, a 'set' already tells this: a Toolset is a container for a set of tools. Placement on card \u00b6 A Toolset provides a grid to place tools on, and can itself be placed on a card . This makes a Toolset separate the coordinates of a tool and a card on which it is placed. Scaling \u00b6 Toolsets can scale the tools as a whole to 'fit' the card or required size. Server example ( example 7 ) shows this scaling The discs with the arc, icon, and state use the same toolset (using a SAK template ) and use a toolset scale factor to get the required size of the toolset. Because of the scaling, tools need NOT to be designed to their final size on a card You can re-use the same toolset in different sizes, although they are designed on a 100x100 grid. Height and Width can be scaled independently if required. Scaling does not affect the center position. Example showing independent x/y scaling on the 3 rd disc Rotating \u00b6 Toolsets can rotate the tools as a whole Rotation is in degrees and uses (again) the center of the toolset as the rotation anchor. Example showing some rotating disc toolsets Rotating may yield different results depending on the browser Styling \u00b6","title":"Tools and Toolsets"},{"location":"basics/tools-and-toolsets/#tools-to-create-visualizations","text":"The Swiss Army Knife card offers a series of tools (currently 17) to create visualizations. The tools are: tool type description circle basic A circle ellipse basic An ellipse line basic A vertical, horizontal or oblique line rectangle basic A rectangle with and w/o rounded corners rectex basic A more advanced rectangle with independent rounded corners regpoly basic A regular poly using the Schl\u00e4fli symbol math text basic A text display horseshoe advanced TBD segarc advanced A segmented arc: shows progress data in an arc slider advanced Slider input tool. Used for brightness for example switch advanced A basic on/off switch usersvg advanced For fetching user defined, external SVG files area HA specific Represents an Entity Area icon HA specific Represents an Entity Icon name HA specific Represents an Entity Name state HA specific Represents an Entity State & Unit of Measurement bar HA specific Represents an simple state history (horizontal or vertical bars)","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Tools to create visualizations"},{"location":"basics/tools-and-toolsets/#toolsets-to-combine-and-control-tools","text":"Toolsets provide extra functionality to tools.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Toolsets to combine and control tools"},{"location":"basics/tools-and-toolsets/#grouping-of-tools","text":"Well, a 'set' already tells this: a Toolset is a container for a set of tools.","title":"Grouping of tools"},{"location":"basics/tools-and-toolsets/#placement-on-card","text":"A Toolset provides a grid to place tools on, and can itself be placed on a card . This makes a Toolset separate the coordinates of a tool and a card on which it is placed.","title":"Placement on card"},{"location":"basics/tools-and-toolsets/#scaling","text":"Toolsets can scale the tools as a whole to 'fit' the card or required size. Server example ( example 7 ) shows this scaling The discs with the arc, icon, and state use the same toolset (using a SAK template ) and use a toolset scale factor to get the required size of the toolset. Because of the scaling, tools need NOT to be designed to their final size on a card You can re-use the same toolset in different sizes, although they are designed on a 100x100 grid. Height and Width can be scaled independently if required. Scaling does not affect the center position. Example showing independent x/y scaling on the 3 rd disc","title":"Scaling"},{"location":"basics/tools-and-toolsets/#rotating","text":"Toolsets can rotate the tools as a whole Rotation is in degrees and uses (again) the center of the toolset as the rotation anchor. Example showing some rotating disc toolsets Rotating may yield different results depending on the browser","title":"Rotating"},{"location":"basics/tools-and-toolsets/#styling","text":"","title":"Styling"},{"location":"basics/user-interactions/","tags":["Interactions","Input"],"text":"The Swiss Army Knife custom card supports user interactions. These interactions are NOT card-based but tool-based: in other words, every Swiss Army Knife Tool can function as a \"Button\" to perform actions. Interacting with SVG objects \u00b6 There are some things to keep in mind when interacting with SVG objects because their interaction is different from HTML objects. HTML does create a so-called bounding box around the objects to facilitate interaction (mouse or touch) with them. SVG doesn't have that functionality yet: it's part of the unreleased SVG 2.0 specification. Interaction with an SVG object depends on things like an object's 'fill', its 'visibility', and whether it has been painted or not. For an interactive, visual explanation: see Managing SVG Interaction With The Pointer Events Property What does this mean for Swiss Army Knife Tools? \u00b6 Generally speaking: there are no problems with Swiss Army Knife tools: you won't notice the difference between SVG and HTML-based objects. This applies at least to text-based tools like entity names, areas, and states. For the graphical tools like circles and rectangles for instance it depends on the fill color: as long as the object has a fill, user interactions will work as expected. Don't use fill: none , unless you don't want interactions with the inner part of the tool. Use fill: rgba(0,0,0,0) for 'invisible' backgrounds for circles/rectangles that need interaction! Icons are an exception: icons are actually SVG images. Since an icon's background has no fill, it would be difficult to use a three-dot menu icon, for example. You'd have to touch the dots to get every interaction noticed! Therefore, the SAK Icon Tool draws an invisible background behind the icon to respond to tap actions. It uses a rectangle without a line, but with a fill color of fill: rgba(0,0,0,0) . This makes it visually invisible, but still responds to pointer/touch events. Current - per tool - support \u00b6 1.0.0 Each tool has its own user_actions section, independent of the definition of entities . It means that the same entity, but a different tool, can respond differently to a tap action by defining a list of actions : No interaction at all An action to toggle a light An action to get the more-info popup dialog or a custom popup dialog An action to go to another view, ie an URL etc. You can define multiple actions per tap/click action! So you can call multiple Home Assistant backend services with a single click. See the third example in the \"Some examples\" paragraph. A tool connected to an entity will automatically declare the 'more-info' action. But ONLY if there is no tap_action defined! If you don't want any interaction, disable this by defining an empty user_actions.tap_action! Some examples \u00b6 If you want the whole card to interact with a click, define a rectangle with the size of the card. And use a fill color of fill: rgba(0,0,0,0) . This way, you get an invisible rectangle covering your card that does respond to pointer/touch events. Light example Thermostat example Calling multiple services with a single click/tap Example with a light entity and three tools on a card as background. As actions are defined PER tool, we can define a single entity and use that for every tool, but still have different actions for each tool / entity combination! 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 tools : # ------------------------------------------------------------ - type : circle entity_index : 0 # # Circle is used as button to switch light on/off # user_actions : tap_action : haptic : light actions : - action : call-service service : light.toggle # ------------------------------------------------------------ - type : slider entity_index : 0 # # Slider is used to set brightness percentage # # Current slider percentage will be send every 200msec # to Home Assistant, so you can watch the light change. # # Set interval to 0 to disable updates while dragging. # user_actions : drag_action : update_interval : 200 # Update every 200msec haptic : selection actions : - action : call-service service : light.turn_on parameter : brightness_pct tap_action : haptic : light actions : - action : call-service service : light.turn_on parameter : brightness_pct # ------------------------------------------------------------ - type : name entity_index : 0 # # Tapping name will show the more-info popup dialog # user_actions : tap_action : haptic : medium actions : - action : more-info Example with a thermostat entity setpoint: a slider 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 tools : # ------------------------------------------------------------ - type : slider entity_index : 1 # # Slider only specifies tap_action in this case. Dragging # does not imply any action. # user_actions : tap_action : haptic : light actions : - action : call-service service : climate.set_temperature parameter : temperature service_data : # Override entity_id. Otherwise entity_index is used... entity_id : climate.calenta Example with an icon switching two (other) lights and viewing the more-info popup for the current entity. I'm not saying this specific example is useful, but it is just to show how you would define this! You can also see how to override an entity_id in the service call. If not specified, the entity_id is derived from the entity_index. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 tools : - type : icon position : cx : 10 cy : 10 align : center icon_size : 15 icon : mdi:menu entity_index : 0 user_actions : tap_action : haptic : success actions : - action : more-info # Action 1 - action : call-service # Action 2 service : light.toggle service_data : entity_id : light.livingroom_light_duo_right_light - action : call-service # Action 3 service : light.toggle service_data : entity_id : light.livingroom_light_front_right_light styles : icon : fill : var(--primary-text-color) Previous - entity based - support \u00b6 0.9.0-beta.x In General \u00b6 The current method is through the tap_action definition in the entities list section of the card. Just like most Home Assistant cards. 1 2 3 4 5 6 7 8 9 10 11 12 - type : 'custom:swiss-army-knife-card' entities : - entity : light.livingroom_light_cupboard_light name : Boekenkast area : Woonkamer icon : mdi:book-open-outline tap_action : action : call-service service : light.toggle service_data : entity_id : light.livingroom_light_cupboard_light haptic : light Any tool connected to this entity ( entity_index: 0 in this case) will perform this action once clicked. If you want different actions, say a toggle for the circle (button), and more-info for tapping the perentage state/attribute, you have to be a bit creative and define the same entity once more, but with a different tap_action : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 - type : 'custom:swiss-army-knife-card' entities : # Entity to be used for switching light (circle tool) - entity : light.livingroom_light_cupboard_light name : Boekenkast area : Woonkamer icon : mdi:book-open-outline tap_action : action : call-service service : light.toggle service_data : entity_id : light.livingroom_light_cupboard_light haptic : light # Entity to be used for state, name, area \"more-info\" popup action # Is same as first entity, but with different tap_action! - entity : light.livingroom_light_cupboard_light name : Boekenkast area : Woonkamer icon : mdi:book-open-outline tap_action : action : more-info haptic : success # Brightness attribute gives \"more-info\" popup action - entity : light.livingroom_light_cupboard_light name : Boekenkast area : Woonkamer icon : mdi:book-open-outline attribute : brightness unit_of_measurement : \"%\" tap_action : action : more-info haptic : success The Slider \u00b6 The slider is the only tool having its own slider_action section. This was needed to support dragging and other settings. Light example Thermostat example 1 2 3 4 slider_action : update_interval : 200 service : light.turn_on parameter : brightness_pct 1 2 3 4 5 6 7 8 9 slider_action : # Set interval to 0 to disable updates while dragging. # new temperature setpoint is sent to boiler on release # of the slider update_interval : 0 service : climate.set_temperature # Override entity_id. Otherwise entity_index is used... entity_id : climate.calenta parameter : temperature","title":"User Interactions"},{"location":"basics/user-interactions/#interacting-with-svg-objects","text":"There are some things to keep in mind when interacting with SVG objects because their interaction is different from HTML objects. HTML does create a so-called bounding box around the objects to facilitate interaction (mouse or touch) with them. SVG doesn't have that functionality yet: it's part of the unreleased SVG 2.0 specification. Interaction with an SVG object depends on things like an object's 'fill', its 'visibility', and whether it has been painted or not. For an interactive, visual explanation: see Managing SVG Interaction With The Pointer Events Property","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Interacting with SVG objects"},{"location":"basics/user-interactions/#what-does-this-mean-for-swiss-army-knife-tools","text":"Generally speaking: there are no problems with Swiss Army Knife tools: you won't notice the difference between SVG and HTML-based objects. This applies at least to text-based tools like entity names, areas, and states. For the graphical tools like circles and rectangles for instance it depends on the fill color: as long as the object has a fill, user interactions will work as expected. Don't use fill: none , unless you don't want interactions with the inner part of the tool. Use fill: rgba(0,0,0,0) for 'invisible' backgrounds for circles/rectangles that need interaction! Icons are an exception: icons are actually SVG images. Since an icon's background has no fill, it would be difficult to use a three-dot menu icon, for example. You'd have to touch the dots to get every interaction noticed! Therefore, the SAK Icon Tool draws an invisible background behind the icon to respond to tap actions. It uses a rectangle without a line, but with a fill color of fill: rgba(0,0,0,0) . This makes it visually invisible, but still responds to pointer/touch events.","title":"What does this mean for Swiss Army Knife Tools?"},{"location":"basics/user-interactions/#current-per-tool-support","text":"1.0.0 Each tool has its own user_actions section, independent of the definition of entities . It means that the same entity, but a different tool, can respond differently to a tap action by defining a list of actions : No interaction at all An action to toggle a light An action to get the more-info popup dialog or a custom popup dialog An action to go to another view, ie an URL etc. You can define multiple actions per tap/click action! So you can call multiple Home Assistant backend services with a single click. See the third example in the \"Some examples\" paragraph. A tool connected to an entity will automatically declare the 'more-info' action. But ONLY if there is no tap_action defined! If you don't want any interaction, disable this by defining an empty user_actions.tap_action!","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Current - per tool - support"},{"location":"basics/user-interactions/#some-examples","text":"If you want the whole card to interact with a click, define a rectangle with the size of the card. And use a fill color of fill: rgba(0,0,0,0) . This way, you get an invisible rectangle covering your card that does respond to pointer/touch events. Light example Thermostat example Calling multiple services with a single click/tap Example with a light entity and three tools on a card as background. As actions are defined PER tool, we can define a single entity and use that for every tool, but still have different actions for each tool / entity combination! 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 tools : # ------------------------------------------------------------ - type : circle entity_index : 0 # # Circle is used as button to switch light on/off # user_actions : tap_action : haptic : light actions : - action : call-service service : light.toggle # ------------------------------------------------------------ - type : slider entity_index : 0 # # Slider is used to set brightness percentage # # Current slider percentage will be send every 200msec # to Home Assistant, so you can watch the light change. # # Set interval to 0 to disable updates while dragging. # user_actions : drag_action : update_interval : 200 # Update every 200msec haptic : selection actions : - action : call-service service : light.turn_on parameter : brightness_pct tap_action : haptic : light actions : - action : call-service service : light.turn_on parameter : brightness_pct # ------------------------------------------------------------ - type : name entity_index : 0 # # Tapping name will show the more-info popup dialog # user_actions : tap_action : haptic : medium actions : - action : more-info Example with a thermostat entity setpoint: a slider 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 tools : # ------------------------------------------------------------ - type : slider entity_index : 1 # # Slider only specifies tap_action in this case. Dragging # does not imply any action. # user_actions : tap_action : haptic : light actions : - action : call-service service : climate.set_temperature parameter : temperature service_data : # Override entity_id. Otherwise entity_index is used... entity_id : climate.calenta Example with an icon switching two (other) lights and viewing the more-info popup for the current entity. I'm not saying this specific example is useful, but it is just to show how you would define this! You can also see how to override an entity_id in the service call. If not specified, the entity_id is derived from the entity_index. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 tools : - type : icon position : cx : 10 cy : 10 align : center icon_size : 15 icon : mdi:menu entity_index : 0 user_actions : tap_action : haptic : success actions : - action : more-info # Action 1 - action : call-service # Action 2 service : light.toggle service_data : entity_id : light.livingroom_light_duo_right_light - action : call-service # Action 3 service : light.toggle service_data : entity_id : light.livingroom_light_front_right_light styles : icon : fill : var(--primary-text-color)","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Some examples"},{"location":"basics/user-interactions/#previous-entity-based-support","text":"0.9.0-beta.x","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Previous - entity based - support"},{"location":"basics/user-interactions/#in-general","text":"The current method is through the tap_action definition in the entities list section of the card. Just like most Home Assistant cards. 1 2 3 4 5 6 7 8 9 10 11 12 - type : 'custom:swiss-army-knife-card' entities : - entity : light.livingroom_light_cupboard_light name : Boekenkast area : Woonkamer icon : mdi:book-open-outline tap_action : action : call-service service : light.toggle service_data : entity_id : light.livingroom_light_cupboard_light haptic : light Any tool connected to this entity ( entity_index: 0 in this case) will perform this action once clicked. If you want different actions, say a toggle for the circle (button), and more-info for tapping the perentage state/attribute, you have to be a bit creative and define the same entity once more, but with a different tap_action : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 - type : 'custom:swiss-army-knife-card' entities : # Entity to be used for switching light (circle tool) - entity : light.livingroom_light_cupboard_light name : Boekenkast area : Woonkamer icon : mdi:book-open-outline tap_action : action : call-service service : light.toggle service_data : entity_id : light.livingroom_light_cupboard_light haptic : light # Entity to be used for state, name, area \"more-info\" popup action # Is same as first entity, but with different tap_action! - entity : light.livingroom_light_cupboard_light name : Boekenkast area : Woonkamer icon : mdi:book-open-outline tap_action : action : more-info haptic : success # Brightness attribute gives \"more-info\" popup action - entity : light.livingroom_light_cupboard_light name : Boekenkast area : Woonkamer icon : mdi:book-open-outline attribute : brightness unit_of_measurement : \"%\" tap_action : action : more-info haptic : success","title":"In General"},{"location":"basics/user-interactions/#the-slider","text":"The slider is the only tool having its own slider_action section. This was needed to support dragging and other settings. Light example Thermostat example 1 2 3 4 slider_action : update_interval : 200 service : light.turn_on parameter : brightness_pct 1 2 3 4 5 6 7 8 9 slider_action : # Set interval to 0 to disable updates while dragging. # new temperature setpoint is sent to boiler on release # of the slider update_interval : 0 service : climate.set_temperature # Override entity_id. Otherwise entity_index is used... entity_id : climate.calenta parameter : temperature","title":"The Slider"},{"location":"basics/animations/colorstops/","tags":["Animations","Colorstop"],"text":"One way to style the color of a tool is using colorstops where the state of the entity is used to choose a color for the tool. Both the fill and stroke attributes can be painted. Basic usage \u00b6 1 2 3 4 5 - type : 'custom:swiss-army-knife-card' entities : - entity : sensor.u_s_air_quality_index name : 'Air quality' area : 'Tha Moon' 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 - type : 'circle' position : cx : 50 cy : 50 radius : 17.5 entity_index : 0 # First entity is index 0 show : style : 'colorstops' # Format using colorstops colorstops : # MUST be equal to show style! fill : true # Use the fill property (or stroke) colors : 0 : '#A8E05F' # Good (0..50) - Green 51 : '#FDD74B' # Moderate (51..100) - Yellow 101 : '#FE9B57' # Unhealthy for sensitive groups - Orange 151 : '#FE6A69' # Unhealthy (101..150) - Red 201 : '#A97ABC' # Very Unhealthy (201..300) - Purple 301 : '#A87383' # Hazardous (300 and up) - Brown styles : circle : transition : fill 0.5s # Take 0.5s to change color Ramblings \u00b6 There is a possibility that this configuration will change to be able to have different colors for fill and stroke for instance. Currently, just a thought though 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 - type : 'circle' position : cx : 50 cy : 50 radius : 17.5 entity_index : 0 # First entity is index 0 show : style : 'colorstops' # Format using colorstops colorstops : # MUST be equal to show style! colors : - value : 0 fill : '#A8E05F' # Good (0..50) - Green stroke : '#A8E0FF' - value : 51 fill : '#FDD74B' # Moderate (51..100) - Yellow stroke : '#FDD7FF' - value : 101 fill : '#FE9B57' # Unhealthy for sensitive groups - Orange stroke : '#FE9BFF' - value : 151 fill : '#FE6A69' # Unhealthy (101..150) - Red stroke : '#FE6AFF' - value : 201 fill : '#A97ABC' # Very Unhealthy (201..300) - Purple stroke : '#A97AFF' - value : 301 fill : '#A87383' # Hazardous (300 and up) - Brown stroke : '#A873FF' styles : circle : transition : fill 0.5s # Take 0.5s to change color","title":"Colorstop Animations"},{"location":"basics/animations/colorstops/#basic-usage","text":"1 2 3 4 5 - type : 'custom:swiss-army-knife-card' entities : - entity : sensor.u_s_air_quality_index name : 'Air quality' area : 'Tha Moon' 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 - type : 'circle' position : cx : 50 cy : 50 radius : 17.5 entity_index : 0 # First entity is index 0 show : style : 'colorstops' # Format using colorstops colorstops : # MUST be equal to show style! fill : true # Use the fill property (or stroke) colors : 0 : '#A8E05F' # Good (0..50) - Green 51 : '#FDD74B' # Moderate (51..100) - Yellow 101 : '#FE9B57' # Unhealthy for sensitive groups - Orange 151 : '#FE6A69' # Unhealthy (101..150) - Red 201 : '#A97ABC' # Very Unhealthy (201..300) - Purple 301 : '#A87383' # Hazardous (300 and up) - Brown styles : circle : transition : fill 0.5s # Take 0.5s to change color","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Basic usage"},{"location":"basics/animations/colorstops/#ramblings","text":"There is a possibility that this configuration will change to be able to have different colors for fill and stroke for instance. Currently, just a thought though 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 - type : 'circle' position : cx : 50 cy : 50 radius : 17.5 entity_index : 0 # First entity is index 0 show : style : 'colorstops' # Format using colorstops colorstops : # MUST be equal to show style! colors : - value : 0 fill : '#A8E05F' # Good (0..50) - Green stroke : '#A8E0FF' - value : 51 fill : '#FDD74B' # Moderate (51..100) - Yellow stroke : '#FDD7FF' - value : 101 fill : '#FE9B57' # Unhealthy for sensitive groups - Orange stroke : '#FE9BFF' - value : 151 fill : '#FE6A69' # Unhealthy (101..150) - Red stroke : '#FE6AFF' - value : 201 fill : '#A97ABC' # Very Unhealthy (201..300) - Purple stroke : '#A97AFF' - value : 301 fill : '#A87383' # Hazardous (300 and up) - Brown stroke : '#A873FF' styles : circle : transition : fill 0.5s # Take 0.5s to change color","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Ramblings"},{"location":"basics/animations/css-animations/","tags":["Animations","CSS"],"text":"CSS Animations \u00b6 1.0.0 \u00b7 Output Basic usage \u00b6 styles : rect : animation:bounce 5s infinite Built-in animations \u00b6 SAK has a number of built-in animations. They are defined in sak-css-definitions.yaml as part of sak_templates.yaml . Their name and what they do are shown in the following table SAK Built-in.. ..CSS.. ..Animations bounce flash headShake heartBeat jello pulse rubberBand shake swing tada wobble zoomOut spin blinkingText The END Use animations sparingly You don't want your Home Assistant dashboard look like a website from the 90ties And yes, yes, yes, you can add you own CSS animations... Put them in user-css-definitions.yaml . That's the one you may change!","title":"CSS Animations"},{"location":"basics/animations/css-animations/#css-animations","text":"1.0.0 \u00b7 Output","title":"CSS Animations"},{"location":"basics/animations/css-animations/#basic-usage","text":"styles : rect : animation:bounce 5s infinite","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Basic usage"},{"location":"basics/animations/css-animations/#built-in-animations","text":"SAK has a number of built-in animations. They are defined in sak-css-definitions.yaml as part of sak_templates.yaml . Their name and what they do are shown in the following table SAK Built-in.. ..CSS.. ..Animations bounce flash headShake heartBeat jello pulse rubberBand shake swing tada wobble zoomOut spin blinkingText The END Use animations sparingly You don't want your Home Assistant dashboard look like a website from the 90ties And yes, yes, yes, you can add you own CSS animations... Put them in user-css-definitions.yaml . That's the one you may change!","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Built-in animations"},{"location":"basics/animations/state-operators/","tags":["Animations","State Operator"],"text":"State operators enable you to style a tool in a much more advanced way than is possible with colorstops. State operators can do more equations, and also use nonnumerical states. So it is more complex than the colorstop but also has a lot more functionality. State operators are defined in the animations section of the tool. Basic usage \u00b6 Basic usage uses the implicit state operator \"==\", ie tests if state is equal to some value. The below example is from a circle connected to a light entity. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 - type : circle position : cx : 50 cy : 30 radius : 22 entity_index : 0 animations : - state : 'on' # State equals on? styles : circle : fill : orange # Fill circle background with orange - state : 'off' # State equals off? styles : circle : fill : grey # Fill circle background with grey States are evaluated from top to bottom And once a match is found, the evaluation stops. More advanced usage \u00b6 This is a direct 'translation' of the colorstops example 1 2 3 4 5 - type : 'custom:swiss-army-knife-card' entities : - entity : sensor.u_s_air_quality_index name : 'Air quality' area : 'Tha Moon' 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 - type : 'circle' position : cx : 50 cy : 50 radius : 17.5 entity_index : 0 # First entity is index 0 show : style : 'colorstops' # Format using colorstops colorstops : # MUST be equal to show style! fill : true # Use the fill property (or stroke) colors : 0 : '#A8E05F' # Good (0..50) - Green 51 : '#FDD74B' # Moderate (51..100) - Yellow 101 : '#FE9B57' # Unhealthy for sensitive groups - Orange 151 : '#FE6A69' # Unhealthy (101..150) - Red 201 : '#A97ABC' # Very Unhealthy (201..300) - Purple 301 : '#A87383' # Hazardous (300 and up) - Brown styles : circle : transition : fill 0.5s # Take 0.5s to change color 1 2 3 4 5 - type : 'custom:swiss-army-knife-card' entities : - entity : sensor.u_s_air_quality_index name : 'Air quality' area : 'Tha Moon' 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 - type : 'circle' position : cx : 50 cy : 50 radius : 17.5 entity_index : 0 animations : - state : '50' # Good (0..50) - Green operator : <= styles : circle : fill : '#A8E05F' - state : '100' # Moderate (51..100) - Yellow operator : <= styles : circle : fill : '#FDD74B' - state : '150' # Unhealthy for sensitive groups - Orange operator : <= styles : circle : fill : '#FE9B57' - state : '200' # Unhealthy (101..150) - Red operator : <= styles : circle : fill : '#FE6A69' - state : '300' # Very Unhealthy (201..300) - Purple operator : <= styles : circle : fill : '#A97ABC' - state : '9999' # Hazardous (300 and up) - Brown operator : <= styles : circle : fill : '#A87383' JavaScript template usage \u00b6 Advanced usage example using JavaScript to determine the state. This example is from the views that use the weather type and display an animated external SVG to display the current weather type. As you can see the current state is returned, ie always a match. The usersvg tool then returns the current image which is also a JavaScript template that checks the state of the sun.sun and adds either \"day\" or \"night\" to the state to distinguish between day (sun) and night (moon) weather types. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 - type : 'usersvg' id : 2 entity_index : 5 position : cx : 50 cy : 50 height : 13 width : 13 style : 'images' images : - clear-night-night : /local/images/weather/clear-night.svg - cloudy-day : /local/images/weather/cloudy-day.svg # < removed a lot of image lines for brevity> - windy-variant-day : /local/images/weather/windy-variant.svg - windy-variant-night : /local/images/weather/windy-variant.svg animations : - state : '[[[ return (state); ]]]' image : > [[[ if (states[\"sun.sun\"].state == 'below_horizon') return (state + '-night'); return (state + '-day'); ]]] Supported operators \u00b6 Operator Example Description < 55 Current state is less than value <= 20 Current state is less than or equal to value == 70 or off Current state is equal to value . This is the default behaviour >= 20 Current state is greater than or equal to value > 20 Current state is greater than value != on Current state is not equal to value [[[ ]]] JS Template Template is evaluated. All values MUST be enclosed within single quotes, ie numbers should also be used as strings: '50'","title":"State Operator Animations"},{"location":"basics/animations/state-operators/#basic-usage","text":"Basic usage uses the implicit state operator \"==\", ie tests if state is equal to some value. The below example is from a circle connected to a light entity. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 - type : circle position : cx : 50 cy : 30 radius : 22 entity_index : 0 animations : - state : 'on' # State equals on? styles : circle : fill : orange # Fill circle background with orange - state : 'off' # State equals off? styles : circle : fill : grey # Fill circle background with grey States are evaluated from top to bottom And once a match is found, the evaluation stops.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Basic usage"},{"location":"basics/animations/state-operators/#more-advanced-usage","text":"This is a direct 'translation' of the colorstops example 1 2 3 4 5 - type : 'custom:swiss-army-knife-card' entities : - entity : sensor.u_s_air_quality_index name : 'Air quality' area : 'Tha Moon' 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 - type : 'circle' position : cx : 50 cy : 50 radius : 17.5 entity_index : 0 # First entity is index 0 show : style : 'colorstops' # Format using colorstops colorstops : # MUST be equal to show style! fill : true # Use the fill property (or stroke) colors : 0 : '#A8E05F' # Good (0..50) - Green 51 : '#FDD74B' # Moderate (51..100) - Yellow 101 : '#FE9B57' # Unhealthy for sensitive groups - Orange 151 : '#FE6A69' # Unhealthy (101..150) - Red 201 : '#A97ABC' # Very Unhealthy (201..300) - Purple 301 : '#A87383' # Hazardous (300 and up) - Brown styles : circle : transition : fill 0.5s # Take 0.5s to change color 1 2 3 4 5 - type : 'custom:swiss-army-knife-card' entities : - entity : sensor.u_s_air_quality_index name : 'Air quality' area : 'Tha Moon' 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 - type : 'circle' position : cx : 50 cy : 50 radius : 17.5 entity_index : 0 animations : - state : '50' # Good (0..50) - Green operator : <= styles : circle : fill : '#A8E05F' - state : '100' # Moderate (51..100) - Yellow operator : <= styles : circle : fill : '#FDD74B' - state : '150' # Unhealthy for sensitive groups - Orange operator : <= styles : circle : fill : '#FE9B57' - state : '200' # Unhealthy (101..150) - Red operator : <= styles : circle : fill : '#FE6A69' - state : '300' # Very Unhealthy (201..300) - Purple operator : <= styles : circle : fill : '#A97ABC' - state : '9999' # Hazardous (300 and up) - Brown operator : <= styles : circle : fill : '#A87383'","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n More advanced usage"},{"location":"basics/animations/state-operators/#javascript-template-usage","text":"Advanced usage example using JavaScript to determine the state. This example is from the views that use the weather type and display an animated external SVG to display the current weather type. As you can see the current state is returned, ie always a match. The usersvg tool then returns the current image which is also a JavaScript template that checks the state of the sun.sun and adds either \"day\" or \"night\" to the state to distinguish between day (sun) and night (moon) weather types. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 - type : 'usersvg' id : 2 entity_index : 5 position : cx : 50 cy : 50 height : 13 width : 13 style : 'images' images : - clear-night-night : /local/images/weather/clear-night.svg - cloudy-day : /local/images/weather/cloudy-day.svg # < removed a lot of image lines for brevity> - windy-variant-day : /local/images/weather/windy-variant.svg - windy-variant-night : /local/images/weather/windy-variant.svg animations : - state : '[[[ return (state); ]]]' image : > [[[ if (states[\"sun.sun\"].state == 'below_horizon') return (state + '-night'); return (state + '-day'); ]]]","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n JavaScript template usage"},{"location":"basics/animations/state-operators/#supported-operators","text":"Operator Example Description < 55 Current state is less than value <= 20 Current state is less than or equal to value == 70 or off Current state is equal to value . This is the default behaviour >= 20 Current state is greater than or equal to value > 20 Current state is greater than value != on Current state is not equal to value [[[ ]]] JS Template Template is evaluated. All values MUST be enclosed within single quotes, ie numbers should also be used as strings: '50'","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Supported operators"},{"location":"basics/styling/classes/","tags":["Styling","CSS"],"text":"To uniformly style multiple cards with minimal work, CSS Classes are the way to go. More than one class can be enabled to style a tool. Basic usage \u00b6 1 2 3 4 5 6 7 8 9 - type : 'circle' position : cx : 50 cy : 50 radius : 25 classes : circle : # Class definitions for circle my-first-class : true # User defined CSS class my-second-class : true # User defined CSS class Default tool classes \u00b6 SAK defines classes with default styling for all the existing tools. These classes are defined in the sak-css-definitions.yaml file in the sak_templates folder. Default classes are automatically assigned to the tools There is no need for the user to specify these classes in the tools configuration. Don't change this file! If you want to change the default definition, see the next chapter... Overriding default tool classes \u00b6 The default css classes used by SAK to style the tools can be altered by overriding these classes in the user-css-definitions.yaml file. Say you don't like the fact that text is spaced for the entity name and you want to set that to 0. The SAK definition is: 1 2 3 4 5 6 7 8 9 10 11 12 13 - descr : Entity Name tool content : > .sak-name { overflow: visible; } .sak-name__name { font-size: 3em; fill: var(--primary-text-color); opacity: 1.0; text-anchor: middle; alignment-baseline: central; letter-spacing: 0.05em; } You override the letter-spacing in your own definition with a value of 0: 1 2 3 4 5 - descr : Override Entity Name tool content : > .sak-name__name { letter-spacing: 0.0em; } Now look into the mirror to see that big smile on your face. You're so happy you fixed that... Using your own tool classes \u00b6 Just as you can override default SAK classes, you can define your own set of classes to style your tools. These classes are defined in the user-css-definitions.yaml file in the sak_templates folder. Example #8 , the Homekit alike cards use user defined classes to style the cards. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 # Demo using classes for example #8, some Homekit alike cards... #------------------------------------------------------------------------------ - descr : Homekit alike Area styling content : > .homekit-area__area { text-anchor: start; font-size: 12em; font-weight: 700; fill: var(--primary-text-color); } - descr : Homekit alike Name styling content : > .homekit-name__name { text-anchor: start; font-size: 12em; font-weight: 700; fill: var(--primary-text-color); } # Note: font-size MUST be defined as style for the state. # Otherwise, uom can't be rendered! - descr : Homekit alike State & Uom styling content : > .homekit-state__value { text-anchor: start; font-weight: 700; fill: var(--primary-text-color); } .homekit-state__uom { fill: var(--primary-text-color); font-weight: 700; } And this looks like this in the example view, view-sake8.yaml file: 1 2 3 4 5 6 7 8 - type : name position : cx : 10 cy : 70 entity_index : 0 classes : name : homekit-name__name : true # Use homekit class","title":"CSS Classes"},{"location":"basics/styling/classes/#basic-usage","text":"1 2 3 4 5 6 7 8 9 - type : 'circle' position : cx : 50 cy : 50 radius : 25 classes : circle : # Class definitions for circle my-first-class : true # User defined CSS class my-second-class : true # User defined CSS class","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Basic usage"},{"location":"basics/styling/classes/#default-tool-classes","text":"SAK defines classes with default styling for all the existing tools. These classes are defined in the sak-css-definitions.yaml file in the sak_templates folder. Default classes are automatically assigned to the tools There is no need for the user to specify these classes in the tools configuration. Don't change this file! If you want to change the default definition, see the next chapter...","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Default tool classes"},{"location":"basics/styling/classes/#overriding-default-tool-classes","text":"The default css classes used by SAK to style the tools can be altered by overriding these classes in the user-css-definitions.yaml file. Say you don't like the fact that text is spaced for the entity name and you want to set that to 0. The SAK definition is: 1 2 3 4 5 6 7 8 9 10 11 12 13 - descr : Entity Name tool content : > .sak-name { overflow: visible; } .sak-name__name { font-size: 3em; fill: var(--primary-text-color); opacity: 1.0; text-anchor: middle; alignment-baseline: central; letter-spacing: 0.05em; } You override the letter-spacing in your own definition with a value of 0: 1 2 3 4 5 - descr : Override Entity Name tool content : > .sak-name__name { letter-spacing: 0.0em; } Now look into the mirror to see that big smile on your face. You're so happy you fixed that...","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Overriding default tool classes"},{"location":"basics/styling/classes/#using-your-own-tool-classes","text":"Just as you can override default SAK classes, you can define your own set of classes to style your tools. These classes are defined in the user-css-definitions.yaml file in the sak_templates folder. Example #8 , the Homekit alike cards use user defined classes to style the cards. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 # Demo using classes for example #8, some Homekit alike cards... #------------------------------------------------------------------------------ - descr : Homekit alike Area styling content : > .homekit-area__area { text-anchor: start; font-size: 12em; font-weight: 700; fill: var(--primary-text-color); } - descr : Homekit alike Name styling content : > .homekit-name__name { text-anchor: start; font-size: 12em; font-weight: 700; fill: var(--primary-text-color); } # Note: font-size MUST be defined as style for the state. # Otherwise, uom can't be rendered! - descr : Homekit alike State & Uom styling content : > .homekit-state__value { text-anchor: start; font-weight: 700; fill: var(--primary-text-color); } .homekit-state__uom { fill: var(--primary-text-color); font-weight: 700; } And this looks like this in the example view, view-sake8.yaml file: 1 2 3 4 5 6 7 8 - type : name position : cx : 10 cy : 70 entity_index : 0 classes : name : homekit-name__name : true # Use homekit class","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Using your own tool classes"},{"location":"basics/styling/overview/","tags":["Styling"],"text":"Overview of possible CSS and SVG styling \u00b6 The Swiss Army Knife custom card has built-in support for SVG and CSS styling. This support is aimed to re-use styles: SAK lets you define your own CSS classes, CSS Animations, and SVG Filters as a template and re-use them in any SAK card you make. You are not limited to the SAK-defined classes, animations, and filters! Directory and File Structure (sort of) \u00b6 Below you see the 'structure' of the definitions. The sak- files contain system definitions, not to be altered by the user. The user- files contain definitions that you as an enduser should use to define your own custom definitions. . \u251c\u2500 CSS keyframe animations \u2502 \u2514\u2500 template definition: \u2502 \u2514\u2500 sak_templates/sak-css-definitions.yaml \u2502 \u2514\u2500 sak_templates/user-css-definitions.yaml \u2502 \u2514\u2500 usage: \u2502 \u2514\u2500 through styles \u2502 \u251c\u2500 classes \u2502 \u2514\u2500 template definition: \u2502 \u2514\u2500 sak_templates/sak-css-definitions.yaml \u2502 \u2514\u2500 sak_templates/user-css-definitions.yaml \u2502 \u2514\u2500 usage: \u2502 \u2514\u2500 through class enabling \u2502 \u2514\u2500 styles/ \u2502 \u2514\u2500 usage: \u2502 \u2514\u2500 default CSS styles \u2502 \u2514\u2500 default CSS animations \u2502 \u2514\u2500 SAK and user defined CSS keyframe animations","title":"Overview"},{"location":"basics/styling/overview/#overview-of-possible-css-and-svg-styling","text":"The Swiss Army Knife custom card has built-in support for SVG and CSS styling. This support is aimed to re-use styles: SAK lets you define your own CSS classes, CSS Animations, and SVG Filters as a template and re-use them in any SAK card you make. You are not limited to the SAK-defined classes, animations, and filters!","title":"Overview of possible CSS and SVG styling"},{"location":"basics/styling/overview/#directory-and-file-structure-sort-of","text":"Below you see the 'structure' of the definitions. The sak- files contain system definitions, not to be altered by the user. The user- files contain definitions that you as an enduser should use to define your own custom definitions. . \u251c\u2500 CSS keyframe animations \u2502 \u2514\u2500 template definition: \u2502 \u2514\u2500 sak_templates/sak-css-definitions.yaml \u2502 \u2514\u2500 sak_templates/user-css-definitions.yaml \u2502 \u2514\u2500 usage: \u2502 \u2514\u2500 through styles \u2502 \u251c\u2500 classes \u2502 \u2514\u2500 template definition: \u2502 \u2514\u2500 sak_templates/sak-css-definitions.yaml \u2502 \u2514\u2500 sak_templates/user-css-definitions.yaml \u2502 \u2514\u2500 usage: \u2502 \u2514\u2500 through class enabling \u2502 \u2514\u2500 styles/ \u2502 \u2514\u2500 usage: \u2502 \u2514\u2500 default CSS styles \u2502 \u2514\u2500 default CSS animations \u2502 \u2514\u2500 SAK and user defined CSS keyframe animations","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Directory and File Structure (sort of)"},{"location":"basics/styling/styles/","tags":["Styling","CSS"],"text":"Each tool can be styled using SVG attributes and in most cases CSS attribute styles. These styles are defined in the styles section. Within that styles section, the tool or toolpart must be selected. For single part tools, the selector is the same as the type of the tool. For multi-part tools, each part has its own styling sub-section. Basic usage \u00b6 Single part tool, a Circle: 1 2 3 4 5 6 7 8 9 - type : 'circle' position : cx : 50 cy : 50 radius : 25 styles : circle : stroke : red fill : red Multi-part tool, an Entity State composed of a 'value' and 'uom': 1 2 3 4 5 6 7 8 9 - type : 'state' position : cx : 50 cy : 50 styles : value : # Value part selector font-size : 10em uom : # Unit of measurement part selector opacity : .6 Overriding CSS Class styles \u00b6 The following configuration results in a circle with a red stroke and blue fill. The stroke comes from the Class definition. The fill from the class definition is overridden by the style configuration. 1 2 3 4 5 6 7 8 9 10 11 - type : 'circle' position : cx : 50 cy : 50 radius : 25 classes : circle : my-red-circle : true styles : circle : fill : blue","title":"CSS Styles"},{"location":"basics/styling/styles/#basic-usage","text":"Single part tool, a Circle: 1 2 3 4 5 6 7 8 9 - type : 'circle' position : cx : 50 cy : 50 radius : 25 styles : circle : stroke : red fill : red Multi-part tool, an Entity State composed of a 'value' and 'uom': 1 2 3 4 5 6 7 8 9 - type : 'state' position : cx : 50 cy : 50 styles : value : # Value part selector font-size : 10em uom : # Unit of measurement part selector opacity : .6","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Basic usage"},{"location":"basics/styling/styles/#overriding-css-class-styles","text":"The following configuration results in a circle with a red stroke and blue fill. The stroke comes from the Class definition. The fill from the class definition is overridden by the style configuration. 1 2 3 4 5 6 7 8 9 10 11 - type : 'circle' position : cx : 50 cy : 50 radius : 25 classes : circle : my-red-circle : true styles : circle : fill : blue","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Overriding CSS Class styles"},{"location":"basics/templates/javascript-snippets/","tags":["Templates","Built-in","JavaScript"],"text":"Basics \u00b6 The Swiss Army Knife has support for JavaScript function templates as part of the YAML configuration. Format \u00b6 The format used is: between single quotes, '[[[ return <> ]]]' if used on a single line and without quotes in a multi-line definition starting with the YAML qualifier '>' As SAK uses the advised method of first class functions to evaluate JavaScript code snippets (See: Use functions instead of eval() ), the JavaScript snippet needs a return to pass the result. The JavaScript snippet can use the following variables passed to the function: Argument Description state The state value of the entity states The states list to access about any entity defined in HA entity The full entity definition user The active user hass The full hass object config The Tool configuration as defined in the YAML view Support \u00b6 Support is currently limited to two places: The derived_entity field to replace the tool state with a derived state The animations section. Derived Entity Example \u00b6 One of the places where JavaScript templates are supported is to create what is called a \"derived entity\". This one is derived from the received state on the tool and replaces the original tool state. Below shows a card with a light and brightness entity/attribute. The slider tool uses entity 1 (brightness) which is translated from a number to a percentage. view-sake2.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 - type : 'custom:swiss-army-knife-card' entities : - entity : light.livingroom_light_duo_left_light name : Duo Links area : Woonkamer icon : mdi:floor-lamp-dual - entity : light.livingroom_light_duo_left_light name : Duo Links area : Woonkamer icon : mdi:floor-lamp-dual attribute : brightness unit_of_measurement : \"%\" layout : toolsets : - toolset : slider position : cx : 50 cy : 50 tools : - type : slider # Using the brightness of the light as entity entity_index : 1 # Convert incoming brightness 0..255 to 0..100% derived_entity : input : '[[[ return state ]]]' state : > [[[ if (typeof(entity) === 'undefined') return; if (typeof(state) === 'undefined') return; var bri = Math.round(state / 2.55); return (bri ? bri : '0'); ]]] # Set unit to %. unit : > [[[ if (typeof(state) === 'undefined') return undefined; return '%'; ]]] Animations section Example \u00b6 view-sake1.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 style : 'images' images : - clear-night-night : /local/images/weather/clear-night.svg - cloudy-day : /local/images/weather/cloudy-day.svg - cloudy-night : /local/images/weather/cloudy-night.svg # Etcetera animations : # Animation always matches the current state! - state : '[[[ return (state); ]]]' # Check the current sun state to determine image # to select from the images list. Add '-night' or '-day' to state name. image : > [[[ if (states[\"sun.sun\"].state == 'below_horizon') return (state + '-night'); return (state + '-day'); ]]]","title":"Javascript snippets"},{"location":"basics/templates/javascript-snippets/#basics","text":"The Swiss Army Knife has support for JavaScript function templates as part of the YAML configuration.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Basics"},{"location":"basics/templates/javascript-snippets/#format","text":"The format used is: between single quotes, '[[[ return <> ]]]' if used on a single line and without quotes in a multi-line definition starting with the YAML qualifier '>' As SAK uses the advised method of first class functions to evaluate JavaScript code snippets (See: Use functions instead of eval() ), the JavaScript snippet needs a return to pass the result. The JavaScript snippet can use the following variables passed to the function: Argument Description state The state value of the entity states The states list to access about any entity defined in HA entity The full entity definition user The active user hass The full hass object config The Tool configuration as defined in the YAML view","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Format"},{"location":"basics/templates/javascript-snippets/#support","text":"Support is currently limited to two places: The derived_entity field to replace the tool state with a derived state The animations section.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Support"},{"location":"basics/templates/javascript-snippets/#derived-entity-example","text":"One of the places where JavaScript templates are supported is to create what is called a \"derived entity\". This one is derived from the received state on the tool and replaces the original tool state. Below shows a card with a light and brightness entity/attribute. The slider tool uses entity 1 (brightness) which is translated from a number to a percentage. view-sake2.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 - type : 'custom:swiss-army-knife-card' entities : - entity : light.livingroom_light_duo_left_light name : Duo Links area : Woonkamer icon : mdi:floor-lamp-dual - entity : light.livingroom_light_duo_left_light name : Duo Links area : Woonkamer icon : mdi:floor-lamp-dual attribute : brightness unit_of_measurement : \"%\" layout : toolsets : - toolset : slider position : cx : 50 cy : 50 tools : - type : slider # Using the brightness of the light as entity entity_index : 1 # Convert incoming brightness 0..255 to 0..100% derived_entity : input : '[[[ return state ]]]' state : > [[[ if (typeof(entity) === 'undefined') return; if (typeof(state) === 'undefined') return; var bri = Math.round(state / 2.55); return (bri ? bri : '0'); ]]] # Set unit to %. unit : > [[[ if (typeof(state) === 'undefined') return undefined; return '%'; ]]]","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Derived Entity Example"},{"location":"basics/templates/javascript-snippets/#animations-section-example","text":"view-sake1.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 style : 'images' images : - clear-night-night : /local/images/weather/clear-night.svg - cloudy-day : /local/images/weather/cloudy-day.svg - cloudy-night : /local/images/weather/cloudy-night.svg # Etcetera animations : # Animation always matches the current state! - state : '[[[ return (state); ]]]' # Check the current sun state to determine image # to select from the images list. Add '-night' or '-day' to state name. image : > [[[ if (states[\"sun.sun\"].state == 'below_horizon') return (state + '-night'); return (state + '-day'); ]]]","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Animations section Example"},{"location":"basics/templates/overview/","tags":["Templates","Built-in","JavaScript","YAML"],"text":"Overview of Template possibilities \u00b6 The Swiss Army Knife has support for several sorts of templates to re-use YAML parts or add JavaScript snippets. Templating \u00b6 There are three types of templating available: the built-in YAML anchor & aliases SAK templates Third party card templates (decluttering card) They all have different usage. Type re-use method what type of re-use YAML built-in re-use within YAML file only using anchors and aliases YAML dictionaries and fields SAK templates re-use of YAML parts using global templates toolsets, tools, derived_entity, colorstops/list, etc. About any part of the config can be templated Decluttering card re-use of card configurations using global card templates Full card template with variables As the decluttering card is a card template, it can use SAK templates. JavaScript snippets \u00b6 JavaScript snippets can be entered in the YAML configuration to extend the functionality of the card.","title":"Overview"},{"location":"basics/templates/overview/#overview-of-template-possibilities","text":"The Swiss Army Knife has support for several sorts of templates to re-use YAML parts or add JavaScript snippets.","title":"Overview of Template possibilities"},{"location":"basics/templates/overview/#templating","text":"There are three types of templating available: the built-in YAML anchor & aliases SAK templates Third party card templates (decluttering card) They all have different usage. Type re-use method what type of re-use YAML built-in re-use within YAML file only using anchors and aliases YAML dictionaries and fields SAK templates re-use of YAML parts using global templates toolsets, tools, derived_entity, colorstops/list, etc. About any part of the config can be templated Decluttering card re-use of card configurations using global card templates Full card template with variables As the decluttering card is a card template, it can use SAK templates.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Templating"},{"location":"basics/templates/overview/#javascript-snippets","text":"JavaScript snippets can be entered in the YAML configuration to extend the functionality of the card.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n JavaScript snippets"},{"location":"basics/templates/sak-templates/","tags":["Templates","Built-in"],"text":"Swiss Army Knife templates \u00b6 Introduction \u00b6 If you are familiar with the decluttering template card , you already know how to re-use cards and specialize them using variables. SAK templates operate on a different level: they enable the re-use of tools , toolsets , JavaScript templates/snippets , colorstops/lists and more. The upcoming rc.3 will have support for layout templates: you can re-us a complete card in a view! No need to use the decluttering templates anymore. SAK templates therefore make re-use within a SAK card, and between SAK cards possible! And as you can scale a toolset , you can use different sizes of a toolset template in various cards. Example 7 shows an example of re-using a toolset in various sizes. Basics \u00b6 Usage SAK Templates can cover almost any part of the SAK YAML configuration. Most used templates are: toolsets derived entities colorstops and colorlists A template can use another template Yup. Templates can use templates. A toolset template for instance can use a colorstop template. But take care: don't create a loop. There is no safeguard for this (ab)use. Location SAK templates are stored in the lovelace\\sak_templates\\templates folder and automatically included by the sak_templates.yaml file in the lovelace/sak_templates folder. Examples \u00b6 Toolset example \u00b6 This example shows the use of a Toolset template. it shows the name of the template to use it shows the variables to pass to the template view-xyz.yaml 1 2 3 4 5 6 7 8 9 - toolset : memory # template type be of type \"toolset\" # Use pre-defined template for this part. # Template has variables. template : name : tools_segarc_icon_state variables : # Pass the list of variables - entity : 0 # - entity id - cx : 72.5 # - center x position - cy : 74 # - center y position Below the partial config of the tools_segarc_icon_state template: the first 7 lines define the template part with passed variables of the config from line 8, the toolset itself is defined. Identical to any inline toolset config. Except for the variable substitution of course tools-segarc-icon-state template.yaml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 template : type : toolset # toolset template it is... defaults : # Default values for vars - entity : 0 - cx : 25 - cy : 50 - show_scale : false toolset : # From here the toolset is defined! position : cx : '[[cx]]' # Templated var!! cy : '[[cy]]' # Templated var!! scale : 1 tools : - type : segarc id : 0 # Unique id within tools config entity_index : '[[entity]]' # Templated var!! position : cx : 50 cy : 50 start_angle : 0 end_angle : 360 width : 5 radius : 25 scale : min : 0 max : 100 show : scale : '[[show_scale]]' # Templated var!! style : 'colorlist' <...> # rest of config removed for brevity Colorstop example \u00b6 Say you want some consistency for the cards that show the inside temperature colors. You define a colorstops template, and use that in several cards/tools. view 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 - type : 'segarc' position : cx : 50 cy : 50 start_angle : -130 end_angle : 130 width : 7 radius : 45 entity_index : 0 scale : min : 15 # Inside temperature max : 25 offset : -4.5 show : style : colorstops # Use a colorstop segments : colorstops : # The colorstops dict is replaced template : # Use template colorstops (re-use!) name : colorstops_temperature_inside variables : # Pass variables to template - thegap : 1 And the full colorstop template definition: template 1 2 3 4 5 6 7 8 9 10 11 colorstops_temperature_inside : template : type : colorstops # MUST reference colorstops defaults : # Give vars a default value - thegap : 1 colorstops : # The contents of the template! gap : '[[thegap]]' # Use '[[ ]]' for template vars colors : 17 : 'PowderBlue' 19 : 'var(--theme-gradient-color-01)' 21 : 'var(--theme-gradient-color-04)' The result would be a replaced colorstops part: result 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 - type : 'segarc' position : cx : 50 cy : 50 start_angle : -130 end_angle : 130 width : 7 radius : 45 entity_index : 0 scale : min : 15 # Inside temperature max : 25 offset : -4.5 show : style : colorstops # Use a colorstop segments : colorstops : # The colorstops dict is replaced gap : 1 colors : 17 : 'PowderBlue' 19 : 'var(--theme-gradient-color-01)' 21 : 'var(--theme-gradient-color-04)' Derived Entity example \u00b6 Many examples calculate the brightness attribute from a light using a derived_entity : Home Assistant passes the brightness attribute as a value between 0 and 255. This range is converted using a JavaScript template to a 0..100 (%) range. Example 10 is using a template for one card to show that you could re-use this JavaScript template. view 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 - type : segarc id : 0 entity_index : 1 position : cx : 80 cy : 25 start_angle : 0 end_angle : 360 width : 2 radius : 15 scale : min : 0 max : 100 show : scale : false style : 'colorlist' derived_entity : template : name : derived_entity_brightness # BUG: # Do need a variable section here and defaults in # template itself. That should not be the case... # # A template without variables SHOULD be possible... variables : - dummyvar : 'bug' segments : colorlist : gap : 1 colors : - 'var(--primary-text-color)' animation : duration : 5 styles : foreground : fill : var(--primary-text-color) background : fill : var(--theme-background-color-darken-20) And the template definition: template 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 derived_entity_brightness : template : type : derived_entity defaults : - dummyvar : 'dummy' derived_entity : input : '[[[ return state ]]]' state : > [[[ if (typeof(entity) === 'undefined') return; if (typeof(state) === 'undefined') return; var bri = Math.round(state / 2.55); return (bri ? bri : '0'); ]]] unit : > [[[ if (typeof(state) === 'undefined') return undefined; return '%'; ]]] Advanced usage, Overrides and Extensions \u00b6 The standard way of changing the template is to pass pre-defined variables to the template. In some cases however, one wants to change more parts of the template in which case variables may not suit those needs. In those cases, SAK templates provide the same sort of functionality as the built-in YAML Overrides and Extensions. Position override example \u00b6 This example shows the simple use of overwriting parts of the Toolset template without using template variables. In this case the position record is simply overridden instead of passing cx and cy as variables. From: view-sake7.yaml 1 2 3 4 5 6 7 8 9 10 - toolset : memory # Use pre-defined template for this part. # Template has variables. template : name : tools_segarc_icon_state variables : # Pass the list of variables - entity : 0 # - entity id position : # 'Overwrite' the position from template cx : 72.5 # Yes, we could have passed these as... cy : 74 # ...variables! Tool override within toolset example \u00b6 We can even go a bit further and overwrite a tool within the list of tools. A tool needs a unique ID to be able to overwrite the tool config In this case the segarc has id: 0 and parts of the config are overwritten! Overriding and extending parts of a template is powerfull but can be error-prone. So take care! The yellow lines show the parts that are overwritten. From: view-sake7 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 - toolset : memory # Use pre-defined template for this part. # Template has variables. template : name : tools_segarc_icon_state variables : - entity : 0 position : cx : 72.5 cy : 74 # Scale to 80% of toolset template. scale : .8 # Overwrite template with the following configuration not covered by the template # variables. id is required to make this work. So much possibilities... tools : - type : segarc id : 0 show : scale : true style : 'colorstops' segments : colorstops : gap : 1 colors : 00 : 'DarkSeaGreen' 70 : 'yellow' 80 : 'orange' 90 : 'red' The full config for the segarc tool is below. The yellow lines show the dictionaries that are overridden: the show config dictionary the segments config dictionary The tool to replace parts of is selected by the id: field From: template 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 - type : segarc id : 0 entity_index : '[[entity]]' position : cx : 50 cy : 50 start_angle : 0 end_angle : 360 width : 5 radius : 25 scale : min : 0 max : 100 show : scale : '[[show_scale]]' style : 'colorlist' segments : colorlist : gap : 1 colors : - 'var(--theme-gradient-color-01)' animation : duration : 5 styles : foreground : fill : var(--theme-gradient-color-01) background : fill : var(--theme-background-color-darken-20) filter : url(#is-1) The resulting YAML config will be as follows with the overridden and/or extended position: , show: and segments: dicts. From: result 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 - type : segarc id : 0 entity_index : 0 # Replaced variable position : cx : 72.5 # Override cy : 74 # Override scale : .8 # Extension start_angle : 0 end_angle : 360 width : 5 radius : 25 scale : min : 0 max : 100 show : scale : true # Override style : 'colorstops' # Override segments : colorstops : # Override gap : 1 colors : 00 : 'DarkSeaGreen' 70 : 'yellow' 80 : 'orange' 90 : 'red' animation : duration : 5 styles : foreground : fill : var(--theme-gradient-color-01) background : fill : var(--theme-background-color-darken-20) filter : url(#is-1)","title":"SAK templates"},{"location":"basics/templates/sak-templates/#swiss-army-knife-templates","text":"","title":"Swiss Army Knife templates"},{"location":"basics/templates/sak-templates/#introduction","text":"If you are familiar with the decluttering template card , you already know how to re-use cards and specialize them using variables. SAK templates operate on a different level: they enable the re-use of tools , toolsets , JavaScript templates/snippets , colorstops/lists and more. The upcoming rc.3 will have support for layout templates: you can re-us a complete card in a view! No need to use the decluttering templates anymore. SAK templates therefore make re-use within a SAK card, and between SAK cards possible! And as you can scale a toolset , you can use different sizes of a toolset template in various cards. Example 7 shows an example of re-using a toolset in various sizes.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Introduction"},{"location":"basics/templates/sak-templates/#basics","text":"Usage SAK Templates can cover almost any part of the SAK YAML configuration. Most used templates are: toolsets derived entities colorstops and colorlists A template can use another template Yup. Templates can use templates. A toolset template for instance can use a colorstop template. But take care: don't create a loop. There is no safeguard for this (ab)use. Location SAK templates are stored in the lovelace\\sak_templates\\templates folder and automatically included by the sak_templates.yaml file in the lovelace/sak_templates folder.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Basics"},{"location":"basics/templates/sak-templates/#examples","text":"","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Examples"},{"location":"basics/templates/sak-templates/#toolset-example","text":"This example shows the use of a Toolset template. it shows the name of the template to use it shows the variables to pass to the template view-xyz.yaml 1 2 3 4 5 6 7 8 9 - toolset : memory # template type be of type \"toolset\" # Use pre-defined template for this part. # Template has variables. template : name : tools_segarc_icon_state variables : # Pass the list of variables - entity : 0 # - entity id - cx : 72.5 # - center x position - cy : 74 # - center y position Below the partial config of the tools_segarc_icon_state template: the first 7 lines define the template part with passed variables of the config from line 8, the toolset itself is defined. Identical to any inline toolset config. Except for the variable substitution of course tools-segarc-icon-state template.yaml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 template : type : toolset # toolset template it is... defaults : # Default values for vars - entity : 0 - cx : 25 - cy : 50 - show_scale : false toolset : # From here the toolset is defined! position : cx : '[[cx]]' # Templated var!! cy : '[[cy]]' # Templated var!! scale : 1 tools : - type : segarc id : 0 # Unique id within tools config entity_index : '[[entity]]' # Templated var!! position : cx : 50 cy : 50 start_angle : 0 end_angle : 360 width : 5 radius : 25 scale : min : 0 max : 100 show : scale : '[[show_scale]]' # Templated var!! style : 'colorlist' <...> # rest of config removed for brevity","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Toolset example"},{"location":"basics/templates/sak-templates/#colorstop-example","text":"Say you want some consistency for the cards that show the inside temperature colors. You define a colorstops template, and use that in several cards/tools. view 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 - type : 'segarc' position : cx : 50 cy : 50 start_angle : -130 end_angle : 130 width : 7 radius : 45 entity_index : 0 scale : min : 15 # Inside temperature max : 25 offset : -4.5 show : style : colorstops # Use a colorstop segments : colorstops : # The colorstops dict is replaced template : # Use template colorstops (re-use!) name : colorstops_temperature_inside variables : # Pass variables to template - thegap : 1 And the full colorstop template definition: template 1 2 3 4 5 6 7 8 9 10 11 colorstops_temperature_inside : template : type : colorstops # MUST reference colorstops defaults : # Give vars a default value - thegap : 1 colorstops : # The contents of the template! gap : '[[thegap]]' # Use '[[ ]]' for template vars colors : 17 : 'PowderBlue' 19 : 'var(--theme-gradient-color-01)' 21 : 'var(--theme-gradient-color-04)' The result would be a replaced colorstops part: result 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 - type : 'segarc' position : cx : 50 cy : 50 start_angle : -130 end_angle : 130 width : 7 radius : 45 entity_index : 0 scale : min : 15 # Inside temperature max : 25 offset : -4.5 show : style : colorstops # Use a colorstop segments : colorstops : # The colorstops dict is replaced gap : 1 colors : 17 : 'PowderBlue' 19 : 'var(--theme-gradient-color-01)' 21 : 'var(--theme-gradient-color-04)'","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Colorstop example"},{"location":"basics/templates/sak-templates/#derived-entity-example","text":"Many examples calculate the brightness attribute from a light using a derived_entity : Home Assistant passes the brightness attribute as a value between 0 and 255. This range is converted using a JavaScript template to a 0..100 (%) range. Example 10 is using a template for one card to show that you could re-use this JavaScript template. view 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 - type : segarc id : 0 entity_index : 1 position : cx : 80 cy : 25 start_angle : 0 end_angle : 360 width : 2 radius : 15 scale : min : 0 max : 100 show : scale : false style : 'colorlist' derived_entity : template : name : derived_entity_brightness # BUG: # Do need a variable section here and defaults in # template itself. That should not be the case... # # A template without variables SHOULD be possible... variables : - dummyvar : 'bug' segments : colorlist : gap : 1 colors : - 'var(--primary-text-color)' animation : duration : 5 styles : foreground : fill : var(--primary-text-color) background : fill : var(--theme-background-color-darken-20) And the template definition: template 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 derived_entity_brightness : template : type : derived_entity defaults : - dummyvar : 'dummy' derived_entity : input : '[[[ return state ]]]' state : > [[[ if (typeof(entity) === 'undefined') return; if (typeof(state) === 'undefined') return; var bri = Math.round(state / 2.55); return (bri ? bri : '0'); ]]] unit : > [[[ if (typeof(state) === 'undefined') return undefined; return '%'; ]]]","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Derived Entity example"},{"location":"basics/templates/sak-templates/#advanced-usage-overrides-and-extensions","text":"The standard way of changing the template is to pass pre-defined variables to the template. In some cases however, one wants to change more parts of the template in which case variables may not suit those needs. In those cases, SAK templates provide the same sort of functionality as the built-in YAML Overrides and Extensions.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Advanced usage, Overrides and Extensions"},{"location":"basics/templates/sak-templates/#position-override-example","text":"This example shows the simple use of overwriting parts of the Toolset template without using template variables. In this case the position record is simply overridden instead of passing cx and cy as variables. From: view-sake7.yaml 1 2 3 4 5 6 7 8 9 10 - toolset : memory # Use pre-defined template for this part. # Template has variables. template : name : tools_segarc_icon_state variables : # Pass the list of variables - entity : 0 # - entity id position : # 'Overwrite' the position from template cx : 72.5 # Yes, we could have passed these as... cy : 74 # ...variables!","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Position override example"},{"location":"basics/templates/sak-templates/#tool-override-within-toolset-example","text":"We can even go a bit further and overwrite a tool within the list of tools. A tool needs a unique ID to be able to overwrite the tool config In this case the segarc has id: 0 and parts of the config are overwritten! Overriding and extending parts of a template is powerfull but can be error-prone. So take care! The yellow lines show the parts that are overwritten. From: view-sake7 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 - toolset : memory # Use pre-defined template for this part. # Template has variables. template : name : tools_segarc_icon_state variables : - entity : 0 position : cx : 72.5 cy : 74 # Scale to 80% of toolset template. scale : .8 # Overwrite template with the following configuration not covered by the template # variables. id is required to make this work. So much possibilities... tools : - type : segarc id : 0 show : scale : true style : 'colorstops' segments : colorstops : gap : 1 colors : 00 : 'DarkSeaGreen' 70 : 'yellow' 80 : 'orange' 90 : 'red' The full config for the segarc tool is below. The yellow lines show the dictionaries that are overridden: the show config dictionary the segments config dictionary The tool to replace parts of is selected by the id: field From: template 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 - type : segarc id : 0 entity_index : '[[entity]]' position : cx : 50 cy : 50 start_angle : 0 end_angle : 360 width : 5 radius : 25 scale : min : 0 max : 100 show : scale : '[[show_scale]]' style : 'colorlist' segments : colorlist : gap : 1 colors : - 'var(--theme-gradient-color-01)' animation : duration : 5 styles : foreground : fill : var(--theme-gradient-color-01) background : fill : var(--theme-background-color-darken-20) filter : url(#is-1) The resulting YAML config will be as follows with the overridden and/or extended position: , show: and segments: dicts. From: result 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 - type : segarc id : 0 entity_index : 0 # Replaced variable position : cx : 72.5 # Override cy : 74 # Override scale : .8 # Extension start_angle : 0 end_angle : 360 width : 5 radius : 25 scale : min : 0 max : 100 show : scale : true # Override style : 'colorstops' # Override segments : colorstops : # Override gap : 1 colors : 00 : 'DarkSeaGreen' 70 : 'yellow' 80 : 'orange' 90 : 'red' animation : duration : 5 styles : foreground : fill : var(--theme-gradient-color-01) background : fill : var(--theme-background-color-darken-20) filter : url(#is-1)","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Tool override within toolset example"},{"location":"basics/templates/yaml-built-in/","tags":["Templates","YAML"],"text":"YAML built-in templating \u00b6 Basics \u00b6 YAML has built-in methods to cut the visual clutter in large YAML files. It does that by the use of so called Anchors and Aliases . On top of that YAML provides Overrides and Extensions to tweak the Anchor functionality. YAML Anchors and Aliases \u00b6 Anchors and Aliases are YAML constructions that allow you to reduce repeat syntax and extend existing dictionaries. You can place Anchors ( & ) on an entity to mark a multi-line section. You can then use an Alias ( * ) and use that Anchor later in the YAML document to reference that section. Basic example \u00b6 Source 1 2 3 4 5 - &flag Apple # The Anchor - Beachball - Cartoon - Duckface - *flag # The Alias When this list is read by the Home Assistant YAML parser, the value identified by the anchor (Apple) will be filled at the alias when the YAML is composed. The literal anchor ( & ) and alias ( * ) are discarded so they don\u2019t appear in the final result. Result 1 2 3 4 5 - Apple - Beachball - Cartoon - Duckface - Apple More complex example \u00b6 We can also define a dictionary as an Anchor , and re-use the complete dictionary on other locations: Source 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 definitions : steps : # The full step dict is the Anchor - step : &build-test name : Build and test script : - mvn package artifacts : - target/** pipelines : branches : develop : - step : *build-test # Re-use master : - step : *build-test # Re-use When this dictionary is read by the YAML parser, the full dictionary will be filled. Result 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 definitions : steps : # The full step dict is the Anchor - step : &build-test name : Build and test script : - mvn package artifacts : - target/** pipelines : branches : develop : - step : name : Build and test script : - mvn package artifacts : - target/** master : - step : name : Build and test script : - mvn package artifacts : - target/** YAML Overrides and Extensions \u00b6 You can also tweak the Anchor when called by entering <<: before the Alias . Below this, you can write any desired changes. Field/dicts are overridden if the new field/dict has the same name or is added afterward if different. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 definitions : steps : - step : &build-test name : Build and test script : - mvn package artifacts : - target/** pipelines : branches : develop : - step : *build-test master : - step : << : *build-test # Re-use name : Testing on Master # override name field ongoing : false # extension Home Assistant will issue warnings if using overrides, as it thinks you are defining the same field twice You can safely ignore those warnings","title":"YAML built-in"},{"location":"basics/templates/yaml-built-in/#yaml-built-in-templating","text":"","title":"YAML built-in templating"},{"location":"basics/templates/yaml-built-in/#basics","text":"YAML has built-in methods to cut the visual clutter in large YAML files. It does that by the use of so called Anchors and Aliases . On top of that YAML provides Overrides and Extensions to tweak the Anchor functionality.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Basics"},{"location":"basics/templates/yaml-built-in/#yaml-anchors-and-aliases","text":"Anchors and Aliases are YAML constructions that allow you to reduce repeat syntax and extend existing dictionaries. You can place Anchors ( & ) on an entity to mark a multi-line section. You can then use an Alias ( * ) and use that Anchor later in the YAML document to reference that section.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n YAML Anchors and Aliases"},{"location":"basics/templates/yaml-built-in/#basic-example","text":"Source 1 2 3 4 5 - &flag Apple # The Anchor - Beachball - Cartoon - Duckface - *flag # The Alias When this list is read by the Home Assistant YAML parser, the value identified by the anchor (Apple) will be filled at the alias when the YAML is composed. The literal anchor ( & ) and alias ( * ) are discarded so they don\u2019t appear in the final result. Result 1 2 3 4 5 - Apple - Beachball - Cartoon - Duckface - Apple","title":"Basic example"},{"location":"basics/templates/yaml-built-in/#more-complex-example","text":"We can also define a dictionary as an Anchor , and re-use the complete dictionary on other locations: Source 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 definitions : steps : # The full step dict is the Anchor - step : &build-test name : Build and test script : - mvn package artifacts : - target/** pipelines : branches : develop : - step : *build-test # Re-use master : - step : *build-test # Re-use When this dictionary is read by the YAML parser, the full dictionary will be filled. Result 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 definitions : steps : # The full step dict is the Anchor - step : &build-test name : Build and test script : - mvn package artifacts : - target/** pipelines : branches : develop : - step : name : Build and test script : - mvn package artifacts : - target/** master : - step : name : Build and test script : - mvn package artifacts : - target/**","title":"More complex example"},{"location":"basics/templates/yaml-built-in/#yaml-overrides-and-extensions","text":"You can also tweak the Anchor when called by entering <<: before the Alias . Below this, you can write any desired changes. Field/dicts are overridden if the new field/dict has the same name or is added afterward if different. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 definitions : steps : - step : &build-test name : Build and test script : - mvn package artifacts : - target/** pipelines : branches : develop : - step : *build-test master : - step : << : *build-test # Re-use name : Testing on Master # override name field ongoing : false # extension Home Assistant will issue warnings if using overrides, as it thinks you are defining the same field twice You can safely ignore those warnings","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n YAML Overrides and Extensions"},{"location":"changelog/changelog/","text":"Changelog Card","title":"Changelog"},{"location":"design/example-set-functional-cards/","tags":["Design","Functional Cards","Example Set"],"text":"Example Functional Cards I made \u00b6 I made a bunch of functional cards with two goals in mind: To show the possibilities of the Swiss Army Knife with small visual examples. As the YAML template definition and usage is included per card, you get see how to use these cards in a view, how these cards are made, how animations are done, styling and tool usage. This should help you to create your own visualizations, or you can just use these examples! Card Description AirVisual Card Two ( #1 and #2 ) variants for displaying AirVisual data Battery Card Card showing the battery state, including 24 hour history. Several variants. Uses sensor layout template Binary Sensor Card Card showing the on/of state of a Binary Sensor Binary Sensor Card with Alert Same as above, but now four ( #1 , #2 , #3 and #4 ) variations with an alert icon Environment Card Card showing inside environment data Header Card Card that can display header text above other cards Input Boolean Card Card that shows how to display and use the input_boolean.toggle service call Light Card Card that can switch/toggle a Light switch Light Card with Slider Card that can also control the brightness of a light Navigate Card Navigate to other Lovelace View. Shows how to use the navigate user action Person Card Card showing the location status of a Person. Also shows the power of some JavaScript Power Outlet Card Four ( #1 , #2 , #3 and #4 ) variations of a card showing both status (on/off) and power usage Scene Card Card showing how to call a scene Sensor Card Two ( #1 and #2 ) variations of showing sensor data, without and with 24 hour history, icon or background animations and with or without secondary info. Server Statistics Card Card showing the main server sensors like CPU, Memory, Disk, etc. Switch Card Three ( #1 , #2 and #3 ) variations of a card controlling a switch Tomorrow Pollen Card A card showing a single pollen status on a card Tomorrow Pollen All Card A card showing all the three pollen statuses on a card The YAML definition for all cards is included in the examples, so you can copy/use them and learn from them! Overview of Tools used \u00b6 Most tools are used in the example functional cards. Only 3 are not used. Used? Tool Type Description badge basic A badge. Not yet Documented! circle basic A circle ellipse basic An ellipse line basic A vertical, horizontal or oblique line rectangle basic A rectangle with and w/o rounded corners rectex basic A more advanced rectangle with independent rounded corners regpoly basic A regular poly using the Schl\u00e4fli symbol math text basic A text display horseshoe advanced TBD segarc advanced A segmented arc: shows progress data in an arc slider advanced Slider input tool. Used for brightness for example switch advanced A basic on/off switch usersvg advanced For fetching user defined, external SVG files area HA specific Represents an Entity Area icon HA specific Represents an Entity Icon name HA specific Represents an Entity Name state HA specific Represents an Entity State & Unit of Measurement bar HA specific Represents an simple state history (horizontal or vertical bars) Overview of Templates, Animations and Styling used \u00b6 Used? What Type Description SAK Templates template Used in the Server Statistics card JavaScript Snippets template Used in for instance the Person card, but also in the Light with slider card User Interactions interaction Tap and Drag actions, but also service usage for navigating, triggering scenes, etc. CSS Classes styling Not used in these cards. All inline styles CSS Styles styling In all cards CSS Animations animations Used in some of the cards that use blinking (battery) Colorlists animations Used in many cards with the segmented arc Colorstop Animations animations Used in many cards with the segmented arc State Operator Animations animations Used in for instance the Person card Example Screenshot \u00b6","title":"Functional card examples"},{"location":"design/example-set-functional-cards/#example-functional-cards-i-made","text":"I made a bunch of functional cards with two goals in mind: To show the possibilities of the Swiss Army Knife with small visual examples. As the YAML template definition and usage is included per card, you get see how to use these cards in a view, how these cards are made, how animations are done, styling and tool usage. This should help you to create your own visualizations, or you can just use these examples! Card Description AirVisual Card Two ( #1 and #2 ) variants for displaying AirVisual data Battery Card Card showing the battery state, including 24 hour history. Several variants. Uses sensor layout template Binary Sensor Card Card showing the on/of state of a Binary Sensor Binary Sensor Card with Alert Same as above, but now four ( #1 , #2 , #3 and #4 ) variations with an alert icon Environment Card Card showing inside environment data Header Card Card that can display header text above other cards Input Boolean Card Card that shows how to display and use the input_boolean.toggle service call Light Card Card that can switch/toggle a Light switch Light Card with Slider Card that can also control the brightness of a light Navigate Card Navigate to other Lovelace View. Shows how to use the navigate user action Person Card Card showing the location status of a Person. Also shows the power of some JavaScript Power Outlet Card Four ( #1 , #2 , #3 and #4 ) variations of a card showing both status (on/off) and power usage Scene Card Card showing how to call a scene Sensor Card Two ( #1 and #2 ) variations of showing sensor data, without and with 24 hour history, icon or background animations and with or without secondary info. Server Statistics Card Card showing the main server sensors like CPU, Memory, Disk, etc. Switch Card Three ( #1 , #2 and #3 ) variations of a card controlling a switch Tomorrow Pollen Card A card showing a single pollen status on a card Tomorrow Pollen All Card A card showing all the three pollen statuses on a card The YAML definition for all cards is included in the examples, so you can copy/use them and learn from them!","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Example Functional Cards I made"},{"location":"design/example-set-functional-cards/#overview-of-tools-used","text":"Most tools are used in the example functional cards. Only 3 are not used. Used? Tool Type Description badge basic A badge. Not yet Documented! circle basic A circle ellipse basic An ellipse line basic A vertical, horizontal or oblique line rectangle basic A rectangle with and w/o rounded corners rectex basic A more advanced rectangle with independent rounded corners regpoly basic A regular poly using the Schl\u00e4fli symbol math text basic A text display horseshoe advanced TBD segarc advanced A segmented arc: shows progress data in an arc slider advanced Slider input tool. Used for brightness for example switch advanced A basic on/off switch usersvg advanced For fetching user defined, external SVG files area HA specific Represents an Entity Area icon HA specific Represents an Entity Icon name HA specific Represents an Entity Name state HA specific Represents an Entity State & Unit of Measurement bar HA specific Represents an simple state history (horizontal or vertical bars)","title":"Overview of Tools used"},{"location":"design/example-set-functional-cards/#overview-of-templates-animations-and-styling-used","text":"Used? What Type Description SAK Templates template Used in the Server Statistics card JavaScript Snippets template Used in for instance the Person card, but also in the Light with slider card User Interactions interaction Tap and Drag actions, but also service usage for navigating, triggering scenes, etc. CSS Classes styling Not used in these cards. All inline styles CSS Styles styling In all cards CSS Animations animations Used in some of the cards that use blinking (battery) Colorlists animations Used in many cards with the segmented arc Colorstop Animations animations Used in many cards with the segmented arc State Operator Animations animations Used in for instance the Person card","title":"Overview of Templates, Animations and Styling used"},{"location":"design/example-set-functional-cards/#example-screenshot","text":"","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Example Screenshot"},{"location":"design/functional-card-airvisual1-card/","tags":["Design","Functional Card","AirVisual Card"],"text":"Visualization \u00b6 This card uses the Material 3 theme D06, TealBlue Description Aspect Ratio Target Size A card that displays data from AirVisual. Both the current data, as a 24 hour history is shown 6/1 Grid with 1 column SAK Tool Used for Circle The half circle, as the left part of the circle is cutoff by the card. Circle is animated, state dependent Icon Entity Icon. Name Name of Entity State Secondary Info of Entity Line Vertical line as separator Icon AirVisual state Icon. Animated, state dependent State AirVisual state value SegArc Segmented Arc showing the AirVisual state. The arc is configured as a very, very, very flat ellipse and using a tiny part of the ellipse to look like a line Line Vertical line as separator Text The \"Last 24 hours\" text Bar The 24 hour history Integrations \u00b6 You need the AirVisual integration : Interaction \u00b6 Part Description Card All tools connected to an entity do show by default the \"more-info\" dialog once clicked Usage \u00b6 1.0.0-rc.3 The entities should be the same for every installation, so you can re-use the example below! 1 2 3 4 5 6 7 8 9 10 11 - type : 'custom:swiss-army-knife-card' entities : - entity : sensor.u_s_air_quality_index name : 'AirVisual #1' - entity : sensor.u_s_air_pollution_level - entity : sensor.u_s_air_quality_index secondary_info : last_changed format : relative layout : template : name : sak_layout_fce_airvisual1 Data Default Required Description entities List of three entities YAML Template Definition \u00b6 1.0.0-rc.3 Full definition of layout templatesak_layout_fce_airvisual1 : template : type : layout defaults : - var_entity_index : 0 layout : aspectratio : 6/1 # Card is 600x100 grid styles : card : toolsets : # ================================================================ - toolset : line1 position : cx : 200 cy : 50 tools : # ------------------------------------------------------------ - type : line position : cx : 50 cy : 50 orientation : vertical length : 50 styles : line : fill : var(--primary-text-color) opacity : 0.5 # ================================================================ - toolset : line2 position : cx : 400 cy : 50 tools : # ------------------------------------------------------------ - type : line position : cx : 50 cy : 50 orientation : vertical length : 50 styles : line : fill : var(--primary-text-color) opacity : 0.5 # ================================================================ - toolset : half-circle position : cx : 0 # Center on cards border cy : 50 tools : # ------------------------------------------------------------ - type : circle position : cx : 50 cy : 50 radius : 48 styles : circle : fill : none stroke : var(--theme-sys-color-secondary) stroke-width : 3em opacity : 0.5 # ================================================================ - toolset : column-icon position : cx : 25 cy : 50 tools : # ------------------------------------------------------------ - type : icon position : cx : 50 cy : 50 align : center icon_size : 30 entity_index : 0 styles : icon : fill : var(--theme-sys-color-secondary) - toolset : column-name position : cx : 120 cy : 50 tools : # ------------------------------------------------------------ - type : name position : cx : 50 cy : 50 entity_index : 0 styles : name : text-anchor : middle font-size : 20em font-weight : 700 # ------------------------------------------------------------ - type : state position : cx : 50 cy : 80 entity_index : 2 show : uom : none styles : state : text-anchor : middle font-size : 14em font-weight : 500 opacity : 0.7 - toolset : column-state position : cx : 300 cy : 50 tools : # ------------------------------------------------------------ - type : icon position : cx : 25 cy : 25 align : end icon_size : 30 entity_index : 1 styles : icon : fill : var(--theme-sys-color-secondary) # ------------------------------------------------------------ - type : state position : cx : 50 cy : 25 entity_index : 0 styles : state : text-anchor : start font-size : 25em font-weight : 700 fill : var(--primary-text-color) uom : fill : var(--primary-text-color) font-weight : 700 # ------------------------------------------------------------ - type : 'segarc' id : 0 position : cx : 50 cy : 70 start_angle : 190 end_angle : 170 width : 8 radius_x : 405 # 20 degrees = 1/9 = 45*9 = 405 radius_y : 1 entity_index : 0 scale : min : 0 max : 300 width : 6 offset : 12 show : scale : true style : 'colorstops' segments : colorstops : gap : 0.1 colors : 0 : '#A8E05F' 51 : '#FDD74B' 101 : '#FE9B57' 151 : '#FE6A69' 201 : '#A97ABC' 301 : '#A87383' styles : foreground : fill : darkgrey background : fill : var(--theme-sys-elevation-surface-neutral5) - toolset : column-history position : cx : 500 cy : 50 tools : # ------------------------------------------------------------ - type : text position : orientation : vertical cx : 50 cy : 20 text : \"Last 24 hours\" styles : text : text-anchor : middle font-size : 15em font-weight : 700 # ------------------------------------------------------------ - type : bar id : 1 entity_index : 0 position : orientation : vertical cx : 50 cy : 60 width : 150 height : 40 margin : 1 hours : 24 barhours : 1 show : style : 'colorstops' colorstops : fill : true colors : 0 : '#A8E05F' 51 : '#FDD74B' 101 : '#FE9B57' 151 : '#FE6A69' 201 : '#A97ABC' 301 : '#A87383' styles : bar : stroke-linecap : square","title":"Airvisual Card #1"},{"location":"design/functional-card-airvisual1-card/#visualization","text":"This card uses the Material 3 theme D06, TealBlue Description Aspect Ratio Target Size A card that displays data from AirVisual. Both the current data, as a 24 hour history is shown 6/1 Grid with 1 column SAK Tool Used for Circle The half circle, as the left part of the circle is cutoff by the card. Circle is animated, state dependent Icon Entity Icon. Name Name of Entity State Secondary Info of Entity Line Vertical line as separator Icon AirVisual state Icon. Animated, state dependent State AirVisual state value SegArc Segmented Arc showing the AirVisual state. The arc is configured as a very, very, very flat ellipse and using a tiny part of the ellipse to look like a line Line Vertical line as separator Text The \"Last 24 hours\" text Bar The 24 hour history","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Visualization"},{"location":"design/functional-card-airvisual1-card/#integrations","text":"You need the AirVisual integration :","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Integrations"},{"location":"design/functional-card-airvisual1-card/#interaction","text":"Part Description Card All tools connected to an entity do show by default the \"more-info\" dialog once clicked","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Interaction"},{"location":"design/functional-card-airvisual1-card/#usage","text":"1.0.0-rc.3 The entities should be the same for every installation, so you can re-use the example below! 1 2 3 4 5 6 7 8 9 10 11 - type : 'custom:swiss-army-knife-card' entities : - entity : sensor.u_s_air_quality_index name : 'AirVisual #1' - entity : sensor.u_s_air_pollution_level - entity : sensor.u_s_air_quality_index secondary_info : last_changed format : relative layout : template : name : sak_layout_fce_airvisual1 Data Default Required Description entities List of three entities","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Usage"},{"location":"design/functional-card-airvisual1-card/#yaml-template-definition","text":"1.0.0-rc.3 Full definition of layout templatesak_layout_fce_airvisual1 : template : type : layout defaults : - var_entity_index : 0 layout : aspectratio : 6/1 # Card is 600x100 grid styles : card : toolsets : # ================================================================ - toolset : line1 position : cx : 200 cy : 50 tools : # ------------------------------------------------------------ - type : line position : cx : 50 cy : 50 orientation : vertical length : 50 styles : line : fill : var(--primary-text-color) opacity : 0.5 # ================================================================ - toolset : line2 position : cx : 400 cy : 50 tools : # ------------------------------------------------------------ - type : line position : cx : 50 cy : 50 orientation : vertical length : 50 styles : line : fill : var(--primary-text-color) opacity : 0.5 # ================================================================ - toolset : half-circle position : cx : 0 # Center on cards border cy : 50 tools : # ------------------------------------------------------------ - type : circle position : cx : 50 cy : 50 radius : 48 styles : circle : fill : none stroke : var(--theme-sys-color-secondary) stroke-width : 3em opacity : 0.5 # ================================================================ - toolset : column-icon position : cx : 25 cy : 50 tools : # ------------------------------------------------------------ - type : icon position : cx : 50 cy : 50 align : center icon_size : 30 entity_index : 0 styles : icon : fill : var(--theme-sys-color-secondary) - toolset : column-name position : cx : 120 cy : 50 tools : # ------------------------------------------------------------ - type : name position : cx : 50 cy : 50 entity_index : 0 styles : name : text-anchor : middle font-size : 20em font-weight : 700 # ------------------------------------------------------------ - type : state position : cx : 50 cy : 80 entity_index : 2 show : uom : none styles : state : text-anchor : middle font-size : 14em font-weight : 500 opacity : 0.7 - toolset : column-state position : cx : 300 cy : 50 tools : # ------------------------------------------------------------ - type : icon position : cx : 25 cy : 25 align : end icon_size : 30 entity_index : 1 styles : icon : fill : var(--theme-sys-color-secondary) # ------------------------------------------------------------ - type : state position : cx : 50 cy : 25 entity_index : 0 styles : state : text-anchor : start font-size : 25em font-weight : 700 fill : var(--primary-text-color) uom : fill : var(--primary-text-color) font-weight : 700 # ------------------------------------------------------------ - type : 'segarc' id : 0 position : cx : 50 cy : 70 start_angle : 190 end_angle : 170 width : 8 radius_x : 405 # 20 degrees = 1/9 = 45*9 = 405 radius_y : 1 entity_index : 0 scale : min : 0 max : 300 width : 6 offset : 12 show : scale : true style : 'colorstops' segments : colorstops : gap : 0.1 colors : 0 : '#A8E05F' 51 : '#FDD74B' 101 : '#FE9B57' 151 : '#FE6A69' 201 : '#A97ABC' 301 : '#A87383' styles : foreground : fill : darkgrey background : fill : var(--theme-sys-elevation-surface-neutral5) - toolset : column-history position : cx : 500 cy : 50 tools : # ------------------------------------------------------------ - type : text position : orientation : vertical cx : 50 cy : 20 text : \"Last 24 hours\" styles : text : text-anchor : middle font-size : 15em font-weight : 700 # ------------------------------------------------------------ - type : bar id : 1 entity_index : 0 position : orientation : vertical cx : 50 cy : 60 width : 150 height : 40 margin : 1 hours : 24 barhours : 1 show : style : 'colorstops' colorstops : fill : true colors : 0 : '#A8E05F' 51 : '#FDD74B' 101 : '#FE9B57' 151 : '#FE6A69' 201 : '#A97ABC' 301 : '#A87383' styles : bar : stroke-linecap : square","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n YAML Template Definition"},{"location":"design/functional-card-airvisual2-card/","tags":["Design","Functional Card","AirVisual Card"],"text":"Visualization \u00b6 This card uses the Material 3 theme D06, TealBlue This card is (again) based on the Sensor Card #2 . But instead of an icon it shows an external SVG Description Aspect Ratio Target Size A card that displays data from AirVisual. Both the current data, as a 24 hour history is shown 3/1 Grid with 2 columns SAK Tool Used for Circle The half circle, as the left part of the circle is cutoff by the card. Animated, state dependent using the AirVisual colorstop UserSvg External SVG showing the AQI faces. Animated, state dependent SegArc Segmented Arc showing the current AQI state using the AirVisual colorstop State Value of entity Name Name of Entity Bar Shows the 24 hour history in the background Integrations \u00b6 You need the AirVisual integration : Interaction \u00b6 Part Description Card All tools connected to an entity do show by default the \"more-info\" dialog once clicked Usage \u00b6 1.0.0-rc.3 The entities should be the same for every installation, so you can re-use the example below! 1 2 3 4 5 6 7 - type : 'custom:swiss-army-knife-card' entities : - entity : sensor.u_s_air_quality_index name : 'AirVisual #2' layout : template : name : sak_layout_fce_airvisual2 Data Default Required Description entities The air quality index entity YAML Template Definition \u00b6 1.0.0-rc.3 Full definition of layout templatesak_layout_fce_airvisual2 : template : type : layout defaults : - var_entity_index : 0 layout : aspectratio : 3/1 # Card is 300x100 grid styles : card : toolsets : # ================================================================ - toolset : half-circle position : cx : 0 # Center on cards border cy : 50 tools : # ------------------------------------------------------------ - type : circle position : cx : 50 cy : 50 radius : 50 entity_index : 0 show : style : 'colorstops' colorstops : template : name : colorstops_airvisual variables : - thegap : 2 styles : circle : stroke : none fill : var(--theme-sys-elevation-surface-neutral4) - type : 'usersvg' id : 2 entity_index : 0 position : cx : 50 cy : 50 height : 100 width : 100 style : 'images' images : - face1 : /local/images/airvisual/ic-face-1.svg - face2 : /local/images/airvisual/ic-face-2.svg - face3 : /local/images/airvisual/ic-face-3.svg - face4 : /local/images/airvisual/ic-face-4.svg - face5 : /local/images/airvisual/ic-face-5.svg - face6 : /local/images/airvisual/ic-face-6.svg animations : - state : '50' operator : <= image : face1 - state : '100' operator : <= image : face2 - state : '150' operator : <= image : face3 - state : '200' operator : <= image : face4 - state : '300' operator : <= image : face5 - state : '9999' operator : <= image : face6 # ------------------------------------------------------------ - type : 'segarc' id : 0 position : cx : 50 cy : 50 start_angle : 25 end_angle : 155 width : 6 radius : 59 entity_index : 0 scale : min : 0 max : 300 width : 6 offset : 12 show : scale : false style : 'colorstops' lastcolor : true segments : colorstops : template : name : colorstops_airvisual variables : - thegap : 2 styles : foreground : fill : darkgrey background : fill : var(--theme-sys-elevation-surface-neutral4) # ================================================================ - toolset : column-bar position : cx : 185 # 300-70/2 + 70=185 cy : 50 tools : # ------------------------------------------------------------ - type : bar id : 1 entity_index : 0 position : orientation : vertical cx : 50 cy : 50 width : 230 # 300-70=230 height : 100 margin : 1 hours : 24 barhours : 1 show : style : 'colorstops' colorstops : template : name : colorstops_airvisual variables : - thefill : true styles : bar : stroke-linecap : square opacity : 0.25 # ================================================================ - toolset : column-name position : cx : 70 cy : 50 tools : # ------------------------------------------------------------ - type : name position : cx : 50 cy : 70 entity_index : 0 styles : name : text-anchor : start font-size : 26em font-weight : 500 opacity : 0.7 # ------------------------------------------------------------ - type : state position : cx : 50 cy : 37 entity_index : 0 styles : state : text-anchor : start font-size : 30em font-weight : 700","title":"Airvisual Card #2"},{"location":"design/functional-card-airvisual2-card/#visualization","text":"This card uses the Material 3 theme D06, TealBlue This card is (again) based on the Sensor Card #2 . But instead of an icon it shows an external SVG Description Aspect Ratio Target Size A card that displays data from AirVisual. Both the current data, as a 24 hour history is shown 3/1 Grid with 2 columns SAK Tool Used for Circle The half circle, as the left part of the circle is cutoff by the card. Animated, state dependent using the AirVisual colorstop UserSvg External SVG showing the AQI faces. Animated, state dependent SegArc Segmented Arc showing the current AQI state using the AirVisual colorstop State Value of entity Name Name of Entity Bar Shows the 24 hour history in the background","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Visualization"},{"location":"design/functional-card-airvisual2-card/#integrations","text":"You need the AirVisual integration :","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Integrations"},{"location":"design/functional-card-airvisual2-card/#interaction","text":"Part Description Card All tools connected to an entity do show by default the \"more-info\" dialog once clicked","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Interaction"},{"location":"design/functional-card-airvisual2-card/#usage","text":"1.0.0-rc.3 The entities should be the same for every installation, so you can re-use the example below! 1 2 3 4 5 6 7 - type : 'custom:swiss-army-knife-card' entities : - entity : sensor.u_s_air_quality_index name : 'AirVisual #2' layout : template : name : sak_layout_fce_airvisual2 Data Default Required Description entities The air quality index entity","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Usage"},{"location":"design/functional-card-airvisual2-card/#yaml-template-definition","text":"1.0.0-rc.3 Full definition of layout templatesak_layout_fce_airvisual2 : template : type : layout defaults : - var_entity_index : 0 layout : aspectratio : 3/1 # Card is 300x100 grid styles : card : toolsets : # ================================================================ - toolset : half-circle position : cx : 0 # Center on cards border cy : 50 tools : # ------------------------------------------------------------ - type : circle position : cx : 50 cy : 50 radius : 50 entity_index : 0 show : style : 'colorstops' colorstops : template : name : colorstops_airvisual variables : - thegap : 2 styles : circle : stroke : none fill : var(--theme-sys-elevation-surface-neutral4) - type : 'usersvg' id : 2 entity_index : 0 position : cx : 50 cy : 50 height : 100 width : 100 style : 'images' images : - face1 : /local/images/airvisual/ic-face-1.svg - face2 : /local/images/airvisual/ic-face-2.svg - face3 : /local/images/airvisual/ic-face-3.svg - face4 : /local/images/airvisual/ic-face-4.svg - face5 : /local/images/airvisual/ic-face-5.svg - face6 : /local/images/airvisual/ic-face-6.svg animations : - state : '50' operator : <= image : face1 - state : '100' operator : <= image : face2 - state : '150' operator : <= image : face3 - state : '200' operator : <= image : face4 - state : '300' operator : <= image : face5 - state : '9999' operator : <= image : face6 # ------------------------------------------------------------ - type : 'segarc' id : 0 position : cx : 50 cy : 50 start_angle : 25 end_angle : 155 width : 6 radius : 59 entity_index : 0 scale : min : 0 max : 300 width : 6 offset : 12 show : scale : false style : 'colorstops' lastcolor : true segments : colorstops : template : name : colorstops_airvisual variables : - thegap : 2 styles : foreground : fill : darkgrey background : fill : var(--theme-sys-elevation-surface-neutral4) # ================================================================ - toolset : column-bar position : cx : 185 # 300-70/2 + 70=185 cy : 50 tools : # ------------------------------------------------------------ - type : bar id : 1 entity_index : 0 position : orientation : vertical cx : 50 cy : 50 width : 230 # 300-70=230 height : 100 margin : 1 hours : 24 barhours : 1 show : style : 'colorstops' colorstops : template : name : colorstops_airvisual variables : - thefill : true styles : bar : stroke-linecap : square opacity : 0.25 # ================================================================ - toolset : column-name position : cx : 70 cy : 50 tools : # ------------------------------------------------------------ - type : name position : cx : 50 cy : 70 entity_index : 0 styles : name : text-anchor : start font-size : 26em font-weight : 500 opacity : 0.7 # ------------------------------------------------------------ - type : state position : cx : 50 cy : 37 entity_index : 0 styles : state : text-anchor : start font-size : 30em font-weight : 700","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n YAML Template Definition"},{"location":"design/functional-card-battery-sensor2-card/","tags":["Design","Functional Card","Battery Level Card"],"text":"Visualization \u00b6 This card uses the Material 3 theme D06, TealBlue This card is nothing more than a Sensor Card #2 with an adjusted colorstop! Description Aspect Ratio Target Size An example battery sensor level card with segmented arc and history 4/1 Grid with 2 columns For a description, check the sensor card! Usage \u00b6 1.0.0-rc.3 Replace example entities with your entities! 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 - type : 'custom:swiss-army-knife-card' entities : - entity : sensor.iphone_van_marco_battery_level name : 'Battery #2' - entity : sensor.iphone_van_marco_battery_level secondary_info : last_changed format : relative layout : template : name : sak_layout_fce_sensor2 variables : - sak_layout_sensor_name_above_state : false - sak_layout_sensor_colorstops_template : colorstops_battery_level - sak_layout_sensor_icon_style : colorstops - sak_layout_sensor_segarc_style : colorstops - sak_layout_sensor_segarc_scale_max : 100 ######################################################################## - type : 'custom:swiss-army-knife-card' entities : - entity : sensor.ipad_van_marco_battery_level name : 'Battery #2' - entity : sensor.ipad_van_marco_battery_level secondary_info : last_changed format : relative layout : template : name : sak_layout_fce_sensor2 variables : - sak_layout_sensor_name_above_state : false - sak_layout_sensor_colorstops_template : colorstops_battery_level - sak_layout_sensor_icon_style : colorstops - sak_layout_sensor_segarc_style : colorstops - sak_layout_sensor_segarc_scale_max : 100 YAML Template Definition \u00b6 1.0.0-rc.3 Check the sensor layout card!","title":"Battery Card"},{"location":"design/functional-card-battery-sensor2-card/#visualization","text":"This card uses the Material 3 theme D06, TealBlue This card is nothing more than a Sensor Card #2 with an adjusted colorstop! Description Aspect Ratio Target Size An example battery sensor level card with segmented arc and history 4/1 Grid with 2 columns For a description, check the sensor card!","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Visualization"},{"location":"design/functional-card-battery-sensor2-card/#usage","text":"1.0.0-rc.3 Replace example entities with your entities! 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 - type : 'custom:swiss-army-knife-card' entities : - entity : sensor.iphone_van_marco_battery_level name : 'Battery #2' - entity : sensor.iphone_van_marco_battery_level secondary_info : last_changed format : relative layout : template : name : sak_layout_fce_sensor2 variables : - sak_layout_sensor_name_above_state : false - sak_layout_sensor_colorstops_template : colorstops_battery_level - sak_layout_sensor_icon_style : colorstops - sak_layout_sensor_segarc_style : colorstops - sak_layout_sensor_segarc_scale_max : 100 ######################################################################## - type : 'custom:swiss-army-knife-card' entities : - entity : sensor.ipad_van_marco_battery_level name : 'Battery #2' - entity : sensor.ipad_van_marco_battery_level secondary_info : last_changed format : relative layout : template : name : sak_layout_fce_sensor2 variables : - sak_layout_sensor_name_above_state : false - sak_layout_sensor_colorstops_template : colorstops_battery_level - sak_layout_sensor_icon_style : colorstops - sak_layout_sensor_segarc_style : colorstops - sak_layout_sensor_segarc_scale_max : 100","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Usage"},{"location":"design/functional-card-battery-sensor2-card/#yaml-template-definition","text":"1.0.0-rc.3 Check the sensor layout card!","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n YAML Template Definition"},{"location":"design/functional-card-binary-sensor-alert1-card/","tags":["Design","Functional Card","Binary Card with Alert"],"text":"This card uses the Material 3 theme D06, TealBlue Description Aspect Ratio Target Size A card that shows the state of a binary sensor, including an icon as an alert. Nice for doors, windows and occupancy alerts. 3/1 Grid with 2 columns SAK Tool Used for Circle The half circle, as the left part of the circle is cutoff by the card. Animated, state dependent Icon Entity Icon. Animated, state dependent Icon Alert Icon. Animated, state dependent. Only visible if state is on Name Name of Entity State Secondary Info Line Vertical line separator Icon Battery state as icon. Animated, state dependent SegArc Simple circle as segmented arc to show the battery level State Value of battery level Icon Linkquality icon SegArc Simple circle as segmented arc to show the linkquality value State Value of linkquality Interaction \u00b6 Part Description Card All tools connected to an entity do show by default the \"more-info\" dialog once clicked Usage \u00b6 1.0.0-rc.3 Replace example entities with your entities! 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 - type : 'custom:swiss-army-knife-card' entities : - entity : binary_sensor.livingroom_movement_occupancy name : 'Bin Alert #1' # name: 'Movement' - entity : binary_sensor.livingroom_movement_occupancy secondary_info : last_changed format : relative - entity : sensor.livingroom_movement_battery decimals : 0 - entity : sensor.livingroom_movement_linkquality decimals : 0 layout : template : name : sak_layout_fce_binary_alert1 Data Default Required Description entities The four required entities YAML Template Definition \u00b6 1.0.0-rc.3 Full definition of layout template 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 sak_layout_fce_binary_alert1 : template : type : layout defaults : - dummy : 0 layout : aspectratio : 3/1 toolsets : # ================================================================ - toolset : half-circle position : cx : 0 # Center on cards border cy : 50 tools : # ------------------------------------------------------------ - type : circle position : cx : 50 cy : 50 radius : 50 entity_index : 0 animations : - state : 'on' styles : circle : fill : var(--theme-sys-color-primary) # animation: flash 2s ease-in-out 5 - state : 'off' styles : circle : fill : var(--theme-sys-elevation-surface-neutral4) styles : circle : stroke : none # transition: fill 1s ease # ================================================================ - toolset : column-icon position : cx : 25 cy : 50 tools : # ------------------------------------------------------------ - type : icon position : cx : 50 cy : 50 align : center icon_size : 35 entity_index : 0 animations : - state : 'on' styles : icon : # animation: spin 3s linear infinite fill : var(--primary-background-color) - state : 'off' styles : icon : fill : var(--theme-sys-color-secondary) opacity : 0.9 styles : icon : fill : var(--primary-background-color) opacity : 0.9 # transition: fill 1s ease # ================================================================ - toolset : alert-icon position : cx : 40 cy : 18 tools : # ------------------------------------------------------------ - type : circle position : cx : 50 cy : 50 radius : 13 entity_index : 0 # Use state from 0 animations : - state : 'on' # If ON styles : circle : fill : var(--primary-background-color) - state : 'off' # If OFF styles : circle : display : none # Hide icon # ------------------------------------------------------------ - type : icon position : cx : 50 cy : 50 align : center icon_size : 25 entity_index : 0 # Use state from 0 icon : mdi:alert-circle # Use alert circle icon animations : - state : 'on' # If ON styles : icon : fill : var(--brand-google-red, red) # Set icon to red color - state : 'off' # If OFF styles : icon : display : none # Hide icon styles : icon : fill : grey # Default grey color # ================================================================ - toolset : column-name position : cx : 120 cy : 50 tools : # ------------------------------------------------------------ - type : name position : cx : 50 cy : 50 entity_index : 0 styles : name : text-anchor : middle font-size : 25em font-weight : 700 opacity : 1 # ------------------------------------------------------------ - type : state position : cx : 50 cy : 80 entity_index : 1 show : uom : none styles : state : text-anchor : middle font-size : 14em font-weight : 500 opacity : 0.7 # ================================================================ - toolset : line1 position : cx : 200 # On 1/3 of card width cy : 50 tools : # ------------------------------------------------------------ - type : line position : cx : 50 cy : 50 orientation : vertical length : 50 styles : line : fill : var(--primary-text-color) opacity : 0.5 # ================================================================ - toolset : column-battery position : cx : 250 cy : 50 tools : # ------------------------------------------------------------ - type : icon position : cx : 30 cy : 30 align : right icon_size : 25 entity_index : 2 styles : icon : fill : var(--theme-sys-color-tertiary) opacity : 0.8 # ------------------------------------------------------------ - type : state position : cx : 70 cy : 30 entity_index : 2 show : uom : none styles : state : text-anchor : middle font-size : 15em font-weight : 700 fill : var(--primary-text-color) uom : fill : var(--primary-text-color) font-weight : 700 # ------------------------------------------------------------ - type : 'segarc' id : 0 position : cx : 70 cy : 30 start_angle : 0 end_angle : 360 width : 3 radius : 18 entity_index : 2 scale : min : 0 max : 100 width : 6 offset : 12 show : scale : false style : 'colorlist' segments : colorlist : gap : 1 colors : - var(--theme-sys-palette-tertiary45) styles : foreground : fill : darkgrey background : fill : var(--theme-sys-elevation-surface-neutral4) opacity : 1 # ================================================================ - toolset : column-linkquality position : cx : 250 cy : 50 tools : # ------------------------------------------------------------ - type : icon position : cx : 30 cy : 70 align : right icon_size : 25 entity_index : 3 styles : icon : fill : var(--theme-sys-color-tertiary) opacity : 0.8 # ------------------------------------------------------------ - type : state position : cx : 70 cy : 70 entity_index : 3 show : uom : none styles : state : text-anchor : middle font-size : 15em font-weight : 700 fill : var(--primary-text-color) uom : fill : var(--primary-text-color) font-weight : 700 # ------------------------------------------------------------ - type : 'segarc' id : 0 position : cx : 70 cy : 70 start_angle : 0 end_angle : 360 width : 3 radius : 18 entity_index : 3 scale : min : 0 max : 100 width : 6 offset : 12 show : scale : false style : 'colorlist' segments : colorlist : gap : 1 colors : - var(--theme-sys-palette-tertiary45) styles : foreground : fill : darkgrey background : fill : var(--theme-sys-elevation-surface-neutral4) opacity : 1","title":"Binary Card with Alert #1"},{"location":"design/functional-card-binary-sensor-alert1-card/#interaction","text":"Part Description Card All tools connected to an entity do show by default the \"more-info\" dialog once clicked","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Interaction"},{"location":"design/functional-card-binary-sensor-alert1-card/#usage","text":"1.0.0-rc.3 Replace example entities with your entities! 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 - type : 'custom:swiss-army-knife-card' entities : - entity : binary_sensor.livingroom_movement_occupancy name : 'Bin Alert #1' # name: 'Movement' - entity : binary_sensor.livingroom_movement_occupancy secondary_info : last_changed format : relative - entity : sensor.livingroom_movement_battery decimals : 0 - entity : sensor.livingroom_movement_linkquality decimals : 0 layout : template : name : sak_layout_fce_binary_alert1 Data Default Required Description entities The four required entities","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Usage"},{"location":"design/functional-card-binary-sensor-alert1-card/#yaml-template-definition","text":"1.0.0-rc.3 Full definition of layout templatesak_layout_fce_binary_alert1 : template : type : layout defaults : - dummy : 0 layout : aspectratio : 3/1 toolsets : # ================================================================ - toolset : half-circle position : cx : 0 # Center on cards border cy : 50 tools : # ------------------------------------------------------------ - type : circle position : cx : 50 cy : 50 radius : 50 entity_index : 0 animations : - state : 'on' styles : circle : fill : var(--theme-sys-color-primary) # animation: flash 2s ease-in-out 5 - state : 'off' styles : circle : fill : var(--theme-sys-elevation-surface-neutral4) styles : circle : stroke : none # transition: fill 1s ease # ================================================================ - toolset : column-icon position : cx : 25 cy : 50 tools : # ------------------------------------------------------------ - type : icon position : cx : 50 cy : 50 align : center icon_size : 35 entity_index : 0 animations : - state : 'on' styles : icon : # animation: spin 3s linear infinite fill : var(--primary-background-color) - state : 'off' styles : icon : fill : var(--theme-sys-color-secondary) opacity : 0.9 styles : icon : fill : var(--primary-background-color) opacity : 0.9 # transition: fill 1s ease # ================================================================ - toolset : alert-icon position : cx : 40 cy : 18 tools : # ------------------------------------------------------------ - type : circle position : cx : 50 cy : 50 radius : 13 entity_index : 0 # Use state from 0 animations : - state : 'on' # If ON styles : circle : fill : var(--primary-background-color) - state : 'off' # If OFF styles : circle : display : none # Hide icon # ------------------------------------------------------------ - type : icon position : cx : 50 cy : 50 align : center icon_size : 25 entity_index : 0 # Use state from 0 icon : mdi:alert-circle # Use alert circle icon animations : - state : 'on' # If ON styles : icon : fill : var(--brand-google-red, red) # Set icon to red color - state : 'off' # If OFF styles : icon : display : none # Hide icon styles : icon : fill : grey # Default grey color # ================================================================ - toolset : column-name position : cx : 120 cy : 50 tools : # ------------------------------------------------------------ - type : name position : cx : 50 cy : 50 entity_index : 0 styles : name : text-anchor : middle font-size : 25em font-weight : 700 opacity : 1 # ------------------------------------------------------------ - type : state position : cx : 50 cy : 80 entity_index : 1 show : uom : none styles : state : text-anchor : middle font-size : 14em font-weight : 500 opacity : 0.7 # ================================================================ - toolset : line1 position : cx : 200 # On 1/3 of card width cy : 50 tools : # ------------------------------------------------------------ - type : line position : cx : 50 cy : 50 orientation : vertical length : 50 styles : line : fill : var(--primary-text-color) opacity : 0.5 # ================================================================ - toolset : column-battery position : cx : 250 cy : 50 tools : # ------------------------------------------------------------ - type : icon position : cx : 30 cy : 30 align : right icon_size : 25 entity_index : 2 styles : icon : fill : var(--theme-sys-color-tertiary) opacity : 0.8 # ------------------------------------------------------------ - type : state position : cx : 70 cy : 30 entity_index : 2 show : uom : none styles : state : text-anchor : middle font-size : 15em font-weight : 700 fill : var(--primary-text-color) uom : fill : var(--primary-text-color) font-weight : 700 # ------------------------------------------------------------ - type : 'segarc' id : 0 position : cx : 70 cy : 30 start_angle : 0 end_angle : 360 width : 3 radius : 18 entity_index : 2 scale : min : 0 max : 100 width : 6 offset : 12 show : scale : false style : 'colorlist' segments : colorlist : gap : 1 colors : - var(--theme-sys-palette-tertiary45) styles : foreground : fill : darkgrey background : fill : var(--theme-sys-elevation-surface-neutral4) opacity : 1 # ================================================================ - toolset : column-linkquality position : cx : 250 cy : 50 tools : # ------------------------------------------------------------ - type : icon position : cx : 30 cy : 70 align : right icon_size : 25 entity_index : 3 styles : icon : fill : var(--theme-sys-color-tertiary) opacity : 0.8 # ------------------------------------------------------------ - type : state position : cx : 70 cy : 70 entity_index : 3 show : uom : none styles : state : text-anchor : middle font-size : 15em font-weight : 700 fill : var(--primary-text-color) uom : fill : var(--primary-text-color) font-weight : 700 # ------------------------------------------------------------ - type : 'segarc' id : 0 position : cx : 70 cy : 70 start_angle : 0 end_angle : 360 width : 3 radius : 18 entity_index : 3 scale : min : 0 max : 100 width : 6 offset : 12 show : scale : false style : 'colorlist' segments : colorlist : gap : 1 colors : - var(--theme-sys-palette-tertiary45) styles : foreground : fill : darkgrey background : fill : var(--theme-sys-elevation-surface-neutral4) opacity : 1","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n YAML Template Definition"},{"location":"design/functional-card-binary-sensor-alert2-card/","tags":["Design","Functional Card","Binary Card with Alert"],"text":"This card uses the Material 3 theme D06, TealBlue Description Aspect Ratio Target Size A card that shows the state of a binary sensor, including an icon as an alert. Nice for doors, windows and occupancy alerts. 4/1 Grid with 2 columns SAK Tool Used for Circle The half circle, as the left part of the circle is cutoff by the card. Animated, state dependent Icon Entity Icon. Animated, state dependent Icon Alert Icon. Animated, state dependent. Only visible if state is on Name Name of Entity State Secondary Info Icon Stretched battery Icon in the upper left corner of the card. Animated, state dependent. Becomes yellow or blinking red if battery almost dead. Entity can be disabled Interaction \u00b6 Part Description Card All tools connected to an entity do show by default the \"more-info\" dialog once clicked Usage \u00b6 1.0.0-rc.3 Replace example entities with your entities! 1 2 3 4 5 6 7 8 9 10 11 12 13 - type : 'custom:swiss-army-knife-card' entities : - entity : binary_sensor.livingroom_movement_occupancy name : 'Bin Alert #2' # name: 'Livingroom #2' - entity : binary_sensor.livingroom_movement_occupancy secondary_info : last_changed format : relative - entity : sensor.livingroom_movement_battery decimals : 0 layout : template : name : sak_layout_fce_binary_alert2 Data Default Required Description entities The three required entities sak_layout_binary_alert_battery_entity_disabled false If no battery entity available for this sensor. Disable this tool YAML Template Definition \u00b6 1.0.0-rc.3 Full definition of layout templatesak_layout_fce_binary_alert2 : template : type : layout defaults : - sak_layout_binary_alert_battery_entity_disabled : false layout : aspectratio : 4/1 toolsets : # ================================================================ - toolset : half-circle position : cx : 0 # Center on cards border cy : 50 tools : # ------------------------------------------------------------ - type : circle position : cx : 50 cy : 50 radius : 50 entity_index : 0 animations : - state : 'on' styles : circle : fill : var(--theme-sys-color-secondary-container) - state : 'off' styles : circle : fill : var(--theme-sys-elevation-surface-neutral2) styles : circle : stroke : none # ================================================================ - toolset : column-icon position : cx : 25 cy : 50 tools : # ------------------------------------------------------------ - type : icon position : cx : 50 cy : 50 align : center icon_size : 45 entity_index : 0 animations : - state : 'on' styles : icon : fill : var(--theme-sys-color-secondary) - state : 'off' styles : icon : fill : var(--theme-sys-elevation-surface-neutral10) styles : icon : opacity : 0.9 # ================================================================ - toolset : alert-icon position : cx : 40 cy : 18 tools : # ------------------------------------------------------------ - type : circle position : cx : 50 cy : 50 radius : 15 entity_index : 0 # Use state from 0 animations : - state : 'on' # If ON styles : circle : fill : var(--primary-background-color) - state : 'off' # If OFF styles : circle : display : none # Hide icon # ------------------------------------------------------------ - type : icon position : cx : 50 cy : 50 align : center icon_size : 28 entity_index : 0 # Use state from 0 icon : mdi:alert-circle # Use alert circle icon animations : - state : 'on' # If ON styles : icon : fill : var(--brand-google-red, red) # Set icon to red color - state : 'off' # If OFF styles : icon : display : none # Hide icon styles : icon : fill : grey # Default grey color # ================================================================ - toolset : column-name position : cx : 70 # Left part = 75, so 75+(300-75)/2 cy : 50 tools : # ------------------------------------------------------------ - type : name position : cx : 50 cy : 37 entity_index : 0 styles : name : text-anchor : start font-size : 30em font-weight : 700 opacity : 1 # ------------------------------------------------------------ - type : state position : cx : 50 cy : 70 entity_index : 1 show : uom : none styles : state : text-anchor : start font-size : 26em font-weight : 500 opacity : 0.7 # ================================================================ - toolset : battery-icon disabled : '[[sak_layout_binary_alert_battery_entity_disabled]]' position : cx : 370 cy : 15 scale_y : 1.5 # Make battery taller rotate : 90 tools : # ------------------------------------------------------------ - type : icon position : cx : 50 cy : 50 align : end icon_size : 30 entity_index : 2 animations : - state : '20' # Battery almost dead! operator : <= styles : icon : animation : blinkingText 2s ease-in-out both infinite fill : var(--brand-google-red) - state : '30' # Battery warning! operator : <= styles : icon : fill : var(--brand-google-yellow) styles : icon : fill : var(--theme-sys-color-tertiary) opacity : 0.5","title":"Binary Card with Alert #2"},{"location":"design/functional-card-binary-sensor-alert2-card/#interaction","text":"Part Description Card All tools connected to an entity do show by default the \"more-info\" dialog once clicked","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Interaction"},{"location":"design/functional-card-binary-sensor-alert2-card/#usage","text":"1.0.0-rc.3 Replace example entities with your entities! 1 2 3 4 5 6 7 8 9 10 11 12 13 - type : 'custom:swiss-army-knife-card' entities : - entity : binary_sensor.livingroom_movement_occupancy name : 'Bin Alert #2' # name: 'Livingroom #2' - entity : binary_sensor.livingroom_movement_occupancy secondary_info : last_changed format : relative - entity : sensor.livingroom_movement_battery decimals : 0 layout : template : name : sak_layout_fce_binary_alert2 Data Default Required Description entities The three required entities sak_layout_binary_alert_battery_entity_disabled false If no battery entity available for this sensor. Disable this tool","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Usage"},{"location":"design/functional-card-binary-sensor-alert2-card/#yaml-template-definition","text":"1.0.0-rc.3 Full definition of layout templatesak_layout_fce_binary_alert2 : template : type : layout defaults : - sak_layout_binary_alert_battery_entity_disabled : false layout : aspectratio : 4/1 toolsets : # ================================================================ - toolset : half-circle position : cx : 0 # Center on cards border cy : 50 tools : # ------------------------------------------------------------ - type : circle position : cx : 50 cy : 50 radius : 50 entity_index : 0 animations : - state : 'on' styles : circle : fill : var(--theme-sys-color-secondary-container) - state : 'off' styles : circle : fill : var(--theme-sys-elevation-surface-neutral2) styles : circle : stroke : none # ================================================================ - toolset : column-icon position : cx : 25 cy : 50 tools : # ------------------------------------------------------------ - type : icon position : cx : 50 cy : 50 align : center icon_size : 45 entity_index : 0 animations : - state : 'on' styles : icon : fill : var(--theme-sys-color-secondary) - state : 'off' styles : icon : fill : var(--theme-sys-elevation-surface-neutral10) styles : icon : opacity : 0.9 # ================================================================ - toolset : alert-icon position : cx : 40 cy : 18 tools : # ------------------------------------------------------------ - type : circle position : cx : 50 cy : 50 radius : 15 entity_index : 0 # Use state from 0 animations : - state : 'on' # If ON styles : circle : fill : var(--primary-background-color) - state : 'off' # If OFF styles : circle : display : none # Hide icon # ------------------------------------------------------------ - type : icon position : cx : 50 cy : 50 align : center icon_size : 28 entity_index : 0 # Use state from 0 icon : mdi:alert-circle # Use alert circle icon animations : - state : 'on' # If ON styles : icon : fill : var(--brand-google-red, red) # Set icon to red color - state : 'off' # If OFF styles : icon : display : none # Hide icon styles : icon : fill : grey # Default grey color # ================================================================ - toolset : column-name position : cx : 70 # Left part = 75, so 75+(300-75)/2 cy : 50 tools : # ------------------------------------------------------------ - type : name position : cx : 50 cy : 37 entity_index : 0 styles : name : text-anchor : start font-size : 30em font-weight : 700 opacity : 1 # ------------------------------------------------------------ - type : state position : cx : 50 cy : 70 entity_index : 1 show : uom : none styles : state : text-anchor : start font-size : 26em font-weight : 500 opacity : 0.7 # ================================================================ - toolset : battery-icon disabled : '[[sak_layout_binary_alert_battery_entity_disabled]]' position : cx : 370 cy : 15 scale_y : 1.5 # Make battery taller rotate : 90 tools : # ------------------------------------------------------------ - type : icon position : cx : 50 cy : 50 align : end icon_size : 30 entity_index : 2 animations : - state : '20' # Battery almost dead! operator : <= styles : icon : animation : blinkingText 2s ease-in-out both infinite fill : var(--brand-google-red) - state : '30' # Battery warning! operator : <= styles : icon : fill : var(--brand-google-yellow) styles : icon : fill : var(--theme-sys-color-tertiary) opacity : 0.5","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n YAML Template Definition"},{"location":"design/functional-card-binary-sensor-alert3-card/","tags":["Design","Functional Card","Binary Card with Alert"],"text":"This card uses the Material 3 theme D06, TealBlue Description Aspect Ratio Target Size A card that shows the state of a binary sensor, including an icon as an alert. Nice for doors, windows and occupancy alerts. 3/1 Grid with 3 columns SAK Tool Used for Badge Background of card. Left part is animated, state dependent Icon Entity Icon. Animated, state dependent. Red if active Name Name of Entity State Secondary Info of Entity Icon Normal battery Icon in the upper left corner of the card. Animated, state dependent. Becomes yellow or blinking red if battery almost dead. Entity can be disabled Interaction \u00b6 Part Description Card All tools connected to an entity do show by default the \"more-info\" dialog once clicked Usage \u00b6 1.0.0-rc.3 Replace example entities with your entities! 1 2 3 4 5 6 7 8 9 10 11 12 - type : 'custom:swiss-army-knife-card' entities : - entity : binary_sensor.livingroom_movement_occupancy name : 'Bin Alert #3' - entity : binary_sensor.livingroom_movement_occupancy secondary_info : last_changed format : relative - entity : sensor.livingroom_movement_battery decimals : 0 layout : template : name : sak_layout_fce_binary_alert3 Data Default Required Description entities The three required entities sak_layout_binary_alert_battery_entity_disabled false If no battery entity available for this sensor. Disable this tool YAML Template Definition \u00b6 1.0.0-rc.3 Full definition of layout template 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 sak_layout_fce_binary_alert3 : template : type : layout defaults : - sak_layout_binary_alert_battery_entity_disabled : false layout : aspectratio : 3/1 toolsets : # ================================================================ - toolset : badge-background position : cx : 150 # Center at middle of card cy : 50 # Center at middle of card tools : - type : badge position : cx : 50 cy : 50 height : 100 # Badge covers the full.. width : 300 # ...size of the card ratio : 25 radius : 5 divider : 20 entity_index : 0 # Uses entity 0 animations : - state : 'on' # Animate for state ON styles : left : fill : var(--theme-sys-color-primary) - state : 'off' # Animate for state OFF styles : left : fill : var(--theme-sys-elevation-surface-neutral4) styles : left : fill : grey right : fill : none # Show background of card # ================================================================ - toolset : column-icon position : cx : 37.5 cy : 50 tools : # ------------------------------------------------------------ - type : icon position : cx : 50 cy : 50 align : center icon_size : 45 entity_index : 0 animations : - state : 'on' icon : 'mdi:fire-alert' styles : icon : fill : var(--brand-google-red) opacity : 1 - state : 'off' icon : 'mdi:fire' styles : icon : fill : var(--theme-sys-color-secondary) opacity : 0.9 styles : icon : fill : var(--primary-background-color) opacity : 0.9 # ================================================================ - toolset : battery-icon disabled : '[[sak_layout_binary_alert_battery_entity_disabled]]' position : cx : 280 cy : 15 rotate : 90 tools : # ------------------------------------------------------------ - type : icon position : cx : 50 cy : 50 align : center icon_size : 30 entity_index : 2 animations : - state : '20' # Battery almost dead! operator : <= styles : icon : animation : blinkingText 2s ease-in-out both infinite fill : var(--brand-google-red) - state : '30' # Battery warning! operator : <= styles : icon : fill : var(--brand-google-yellow) styles : icon : fill : var(--theme-sys-color-tertiary) opacity : 0.5 # ================================================================ - toolset : column-name position : cx : 100 # Left part = 75, so 75+(300-75)/2 cy : 50 tools : # ------------------------------------------------------------ - type : name position : cx : 50 cy : 40 entity_index : 0 styles : name : text-anchor : start font-size : 30em font-weight : 700 opacity : 1 # ------------------------------------------------------------ - type : state position : cx : 50 cy : 70 entity_index : 1 show : uom : none styles : state : text-anchor : start font-size : 16em font-weight : 500 opacity : 0.7","title":"Binary Card with Alert #3"},{"location":"design/functional-card-binary-sensor-alert3-card/#interaction","text":"Part Description Card All tools connected to an entity do show by default the \"more-info\" dialog once clicked","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Interaction"},{"location":"design/functional-card-binary-sensor-alert3-card/#usage","text":"1.0.0-rc.3 Replace example entities with your entities! 1 2 3 4 5 6 7 8 9 10 11 12 - type : 'custom:swiss-army-knife-card' entities : - entity : binary_sensor.livingroom_movement_occupancy name : 'Bin Alert #3' - entity : binary_sensor.livingroom_movement_occupancy secondary_info : last_changed format : relative - entity : sensor.livingroom_movement_battery decimals : 0 layout : template : name : sak_layout_fce_binary_alert3 Data Default Required Description entities The three required entities sak_layout_binary_alert_battery_entity_disabled false If no battery entity available for this sensor. Disable this tool","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Usage"},{"location":"design/functional-card-binary-sensor-alert3-card/#yaml-template-definition","text":"1.0.0-rc.3 Full definition of layout template 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 sak_layout_fce_binary_alert3 : template : type : layout defaults : - sak_layout_binary_alert_battery_entity_disabled : false layout : aspectratio : 3/1 toolsets : # ================================================================ - toolset : badge-background position : cx : 150 # Center at middle of card cy : 50 # Center at middle of card tools : - type : badge position : cx : 50 cy : 50 height : 100 # Badge covers the full.. width : 300 # ...size of the card ratio : 25 radius : 5 divider : 20 entity_index : 0 # Uses entity 0 animations : - state : 'on' # Animate for state ON styles : left : fill : var(--theme-sys-color-primary) - state : 'off' # Animate for state OFF styles : left : fill : var(--theme-sys-elevation-surface-neutral4) styles : left : fill : grey right : fill : none # Show background of card # ================================================================ - toolset : column-icon position : cx : 37.5 cy : 50 tools : # ------------------------------------------------------------ - type : icon position : cx : 50 cy : 50 align : center icon_size : 45 entity_index : 0 animations : - state : 'on' icon : 'mdi:fire-alert' styles : icon : fill : var(--brand-google-red) opacity : 1 - state : 'off' icon : 'mdi:fire' styles : icon : fill : var(--theme-sys-color-secondary) opacity : 0.9 styles : icon : fill : var(--primary-background-color) opacity : 0.9 # ================================================================ - toolset : battery-icon disabled : '[[sak_layout_binary_alert_battery_entity_disabled]]' position : cx : 280 cy : 15 rotate : 90 tools : # ------------------------------------------------------------ - type : icon position : cx : 50 cy : 50 align : center icon_size : 30 entity_index : 2 animations : - state : '20' # Battery almost dead! operator : <= styles : icon : animation : blinkingText 2s ease-in-out both infinite fill : var(--brand-google-red) - state : '30' # Battery warning! operator : <= styles : icon : fill : var(--brand-google-yellow) styles : icon : fill : var(--theme-sys-color-tertiary) opacity : 0.5 # ================================================================ - toolset : column-name position : cx : 100 # Left part = 75, so 75+(300-75)/2 cy : 50 tools : # ------------------------------------------------------------ - type : name position : cx : 50 cy : 40 entity_index : 0 styles : name : text-anchor : start font-size : 30em font-weight : 700 opacity : 1 # ------------------------------------------------------------ - type : state position : cx : 50 cy : 70 entity_index : 1 show : uom : none styles : state : text-anchor : start font-size : 16em font-weight : 500 opacity : 0.7","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n YAML Template Definition"},{"location":"design/functional-card-binary-sensor-alert4-card/","tags":["Design","Functional Card","Binary Card with Alert"],"text":"This card uses the Material 3 theme D06, TealBlue Description Aspect Ratio Target Size A card that shows the state of a binary sensor, including an icon as an alert. Nice for doors, windows and occupancy alerts. 3/1 Grid with 3 columns SAK Tool Used for Badge Background of card. Left part is animated, state dependent Icon Entity Icon. Animated, state dependent. Red if active Icon Alert Icon. Animated, state dependent. Only visible if state is on Name Name of Entity Icon Stretched battery Icon in the upper left corner of the card. Animated, state dependent. Becomes yellow or blinking red if battery almost dead. Entity can be disabled Interaction \u00b6 Part Description Card All tools connected to an entity do show by default the \"more-info\" dialog once clicked Usage \u00b6 1.0.0-rc.3 Replace example entities with your entities! 1 2 3 4 5 6 7 8 9 10 11 12 - type : 'custom:swiss-army-knife-card' entities : - entity : binary_sensor.livingroom_movement_occupancy name : 'Bin Alert #4' - entity : binary_sensor.livingroom_movement_occupancy secondary_info : last_changed format : relative - entity : sensor.livingroom_movement_battery decimals : 0 layout : template : name : sak_layout_fce_binary_alert4 Data Default Required Description entities The three required entities sak_layout_binary_alert_battery_entity_disabled false If no battery entity available for this sensor. Disable this tool YAML Template Definition \u00b6 1.0.0-rc.3 Full definition of layout templatesak_layout_fce_binary_alert4 : template : type : layout defaults : - sak_layout_binary_alert_battery_entity_disabled : false layout : aspectratio : 3/1 toolsets : # ================================================================ - toolset : badge-background position : cx : 150 cy : 50 tools : - type : badge position : cx : 50 cy : 50 height : 100 width : 300 ratio : 25 radius : 5 divider : 20 entity_index : 0 animations : - state : 'on' styles : left : fill : var(--theme-sys-color-primary) - state : 'off' styles : left : fill : var(--theme-sys-elevation-surface-neutral4) styles : left : fill : grey right : fill : none # ================================================================ - toolset : column-icon position : cx : 37.5 cy : 50 tools : # ------------------------------------------------------------ - type : icon position : cx : 50 cy : 50 align : center icon_size : 45 entity_index : 0 animations : - state : 'on' styles : icon : fill : var(--primary-background-color) - state : 'off' styles : icon : fill : var(--theme-sys-color-secondary) styles : icon : fill : var(--primary-background-color) opacity : 0.9 # ================================================================ - toolset : alert-icon position : cx : 75 cy : 18 tools : # ------------------------------------------------------------ - type : circle position : cx : 50 cy : 50 radius : 13 entity_index : 0 # Use state from 0 animations : - state : 'on' # If ON styles : circle : fill : var(--primary-background-color) - state : 'off' # If OFF styles : circle : display : none # Hide icon # ------------------------------------------------------------ - type : icon position : cx : 50 cy : 50 align : center icon_size : 25 entity_index : 0 # Use state from 0 icon : mdi:alert-circle # Use alert circle icon animations : - state : 'on' # If ON styles : icon : fill : var(--brand-google-red, red) # Set icon to red color - state : 'off' # If OFF styles : icon : display : none # Hide icon styles : icon : fill : grey # Default grey color # ================================================================ - toolset : column-name position : cx : 100 cy : 50 tools : # ------------------------------------------------------------ - type : name position : cx : 50 cy : 50 entity_index : 0 styles : name : text-anchor : start font-size : 30em font-weight : 700 opacity : 1 # ================================================================ - toolset : battery-icon disabled : '[[sak_layout_binary_alert_battery_entity_disabled]]' position : cx : 270 cy : 15 scale_y : 1.5 # Make battery taller rotate : 90 tools : # ------------------------------------------------------------ - type : icon position : cx : 50 cy : 50 align : center icon_size : 30 entity_index : 2 animations : - state : '20' # Battery almost dead! operator : <= styles : icon : animation : blinkingText 2s ease-in-out both infinite fill : var(--brand-google-red) - state : '30' # Battery warning! operator : <= styles : icon : fill : var(--brand-google-yellow) styles : icon : fill : var(--theme-sys-color-tertiary) opacity : 0.5","title":"Binary Card with Alert #4"},{"location":"design/functional-card-binary-sensor-alert4-card/#interaction","text":"Part Description Card All tools connected to an entity do show by default the \"more-info\" dialog once clicked","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Interaction"},{"location":"design/functional-card-binary-sensor-alert4-card/#usage","text":"1.0.0-rc.3 Replace example entities with your entities! 1 2 3 4 5 6 7 8 9 10 11 12 - type : 'custom:swiss-army-knife-card' entities : - entity : binary_sensor.livingroom_movement_occupancy name : 'Bin Alert #4' - entity : binary_sensor.livingroom_movement_occupancy secondary_info : last_changed format : relative - entity : sensor.livingroom_movement_battery decimals : 0 layout : template : name : sak_layout_fce_binary_alert4 Data Default Required Description entities The three required entities sak_layout_binary_alert_battery_entity_disabled false If no battery entity available for this sensor. Disable this tool","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Usage"},{"location":"design/functional-card-binary-sensor-alert4-card/#yaml-template-definition","text":"1.0.0-rc.3 Full definition of layout templatesak_layout_fce_binary_alert4 : template : type : layout defaults : - sak_layout_binary_alert_battery_entity_disabled : false layout : aspectratio : 3/1 toolsets : # ================================================================ - toolset : badge-background position : cx : 150 cy : 50 tools : - type : badge position : cx : 50 cy : 50 height : 100 width : 300 ratio : 25 radius : 5 divider : 20 entity_index : 0 animations : - state : 'on' styles : left : fill : var(--theme-sys-color-primary) - state : 'off' styles : left : fill : var(--theme-sys-elevation-surface-neutral4) styles : left : fill : grey right : fill : none # ================================================================ - toolset : column-icon position : cx : 37.5 cy : 50 tools : # ------------------------------------------------------------ - type : icon position : cx : 50 cy : 50 align : center icon_size : 45 entity_index : 0 animations : - state : 'on' styles : icon : fill : var(--primary-background-color) - state : 'off' styles : icon : fill : var(--theme-sys-color-secondary) styles : icon : fill : var(--primary-background-color) opacity : 0.9 # ================================================================ - toolset : alert-icon position : cx : 75 cy : 18 tools : # ------------------------------------------------------------ - type : circle position : cx : 50 cy : 50 radius : 13 entity_index : 0 # Use state from 0 animations : - state : 'on' # If ON styles : circle : fill : var(--primary-background-color) - state : 'off' # If OFF styles : circle : display : none # Hide icon # ------------------------------------------------------------ - type : icon position : cx : 50 cy : 50 align : center icon_size : 25 entity_index : 0 # Use state from 0 icon : mdi:alert-circle # Use alert circle icon animations : - state : 'on' # If ON styles : icon : fill : var(--brand-google-red, red) # Set icon to red color - state : 'off' # If OFF styles : icon : display : none # Hide icon styles : icon : fill : grey # Default grey color # ================================================================ - toolset : column-name position : cx : 100 cy : 50 tools : # ------------------------------------------------------------ - type : name position : cx : 50 cy : 50 entity_index : 0 styles : name : text-anchor : start font-size : 30em font-weight : 700 opacity : 1 # ================================================================ - toolset : battery-icon disabled : '[[sak_layout_binary_alert_battery_entity_disabled]]' position : cx : 270 cy : 15 scale_y : 1.5 # Make battery taller rotate : 90 tools : # ------------------------------------------------------------ - type : icon position : cx : 50 cy : 50 align : center icon_size : 30 entity_index : 2 animations : - state : '20' # Battery almost dead! operator : <= styles : icon : animation : blinkingText 2s ease-in-out both infinite fill : var(--brand-google-red) - state : '30' # Battery warning! operator : <= styles : icon : fill : var(--brand-google-yellow) styles : icon : fill : var(--theme-sys-color-tertiary) opacity : 0.5","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n YAML Template Definition"},{"location":"design/functional-card-binary-sensor1-card/","tags":["Design","Functional Card","Binary Card"],"text":"This card uses the Material 3 theme D06, TealBlue Description Aspect Ratio Target Size A card that shows the state of a binary sensor 4/1 Grid with 2 columns SAK Tool Used for Circle The half circle, as the left part of the circle is cutoff by the card. Animated, state dependent Icon Entity Icon. Animated, state dependent. Can spin if configured Name Name of Entity State Value of Entity Interaction \u00b6 Part Description Card All tools connected to an entity do show by default the \"more-info\" dialog once clicked Usage \u00b6 1.0.0-rc.3 Replace example entities with your entities! 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 - type : 'custom:swiss-army-knife-card' entities : - entity : light.livingroom_light_duo_right_light name : 'Pump Pool' icon : mdi:pump layout : template : name : sak_layout_fce_binary ######################################################################## - type : 'custom:swiss-army-knife-card' entities : - entity : light.livingroom_light_duo_right_light name : 'Pump Pool' icon : mdi:pump layout : template : name : sak_layout_fce_binary variables : - sak_layout_binary_icon_spin : true Data Default Required Description entities The single entity on the card sak_layout_binary_icon_spin false Spin the icon or not in state 'on' YAML Template Definition \u00b6 1.0.0-rc.3 Full definition of layout template 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 sak_layout_fce_binary : template : type : layout defaults : - sak_layout_binary_icon_spin : false layout : aspectratio : 4/1 toolsets : # ================================================================ - toolset : half-circle position : cx : 0 # Center on cards border cy : 50 tools : # ------------------------------------------------------------ - type : circle position : cx : 50 cy : 50 radius : 50 entity_index : 0 animations : - state : 'on' styles : circle : fill : var(--theme-sys-color-primary) - state : 'off' styles : circle : fill : var(--theme-sys-elevation-surface-neutral4) styles : circle : stroke : none # ================================================================ - toolset : column-icon position : cx : 25 cy : 50 tools : # ------------------------------------------------------------ - type : icon position : cx : 50 cy : 50 align : center icon_size : 45 entity_index : 0 # Define template variable for this icon tool, so it can be # processed by a piece of JavaScript ;-) # The template engine will replace the variable! variables : sak_layout_binary_icon_spin : '[[sak_layout_binary_icon_spin]]' animations : - state : 'on' styles : icon : # Use template variable as the source to spin or not. # the config JavaScript parameter is this tools config... animation : > [[[ if (tool_config.variables.sak_layout_binary_icon_spin) return \"spin 3s linear infinite\"; return \"\"; ]]] fill : var(--primary-background-color) - state : 'off' styles : icon : fill : var(--theme-sys-color-secondary) styles : icon : opacity : 0.9 # ================================================================ - toolset : column-name position : cx : 70 # Left part = 75, so 75+(300-75)/2 cy : 50 tools : # ------------------------------------------------------------ - type : name position : cx : 50 cy : 37 entity_index : 0 styles : name : text-anchor : start font-size : 30em font-weight : 700 opacity : 1 # ------------------------------------------------------------ - type : state position : cx : 50 cy : 70 entity_index : 0 show : uom : none styles : state : text-anchor : start font-size : 26em font-weight : 500 opacity : 0.7","title":"Binary Card"},{"location":"design/functional-card-binary-sensor1-card/#interaction","text":"Part Description Card All tools connected to an entity do show by default the \"more-info\" dialog once clicked","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Interaction"},{"location":"design/functional-card-binary-sensor1-card/#usage","text":"1.0.0-rc.3 Replace example entities with your entities! 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 - type : 'custom:swiss-army-knife-card' entities : - entity : light.livingroom_light_duo_right_light name : 'Pump Pool' icon : mdi:pump layout : template : name : sak_layout_fce_binary ######################################################################## - type : 'custom:swiss-army-knife-card' entities : - entity : light.livingroom_light_duo_right_light name : 'Pump Pool' icon : mdi:pump layout : template : name : sak_layout_fce_binary variables : - sak_layout_binary_icon_spin : true Data Default Required Description entities The single entity on the card sak_layout_binary_icon_spin false Spin the icon or not in state 'on'","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Usage"},{"location":"design/functional-card-binary-sensor1-card/#yaml-template-definition","text":"1.0.0-rc.3 Full definition of layout template 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 sak_layout_fce_binary : template : type : layout defaults : - sak_layout_binary_icon_spin : false layout : aspectratio : 4/1 toolsets : # ================================================================ - toolset : half-circle position : cx : 0 # Center on cards border cy : 50 tools : # ------------------------------------------------------------ - type : circle position : cx : 50 cy : 50 radius : 50 entity_index : 0 animations : - state : 'on' styles : circle : fill : var(--theme-sys-color-primary) - state : 'off' styles : circle : fill : var(--theme-sys-elevation-surface-neutral4) styles : circle : stroke : none # ================================================================ - toolset : column-icon position : cx : 25 cy : 50 tools : # ------------------------------------------------------------ - type : icon position : cx : 50 cy : 50 align : center icon_size : 45 entity_index : 0 # Define template variable for this icon tool, so it can be # processed by a piece of JavaScript ;-) # The template engine will replace the variable! variables : sak_layout_binary_icon_spin : '[[sak_layout_binary_icon_spin]]' animations : - state : 'on' styles : icon : # Use template variable as the source to spin or not. # the config JavaScript parameter is this tools config... animation : > [[[ if (tool_config.variables.sak_layout_binary_icon_spin) return \"spin 3s linear infinite\"; return \"\"; ]]] fill : var(--primary-background-color) - state : 'off' styles : icon : fill : var(--theme-sys-color-secondary) styles : icon : opacity : 0.9 # ================================================================ - toolset : column-name position : cx : 70 # Left part = 75, so 75+(300-75)/2 cy : 50 tools : # ------------------------------------------------------------ - type : name position : cx : 50 cy : 37 entity_index : 0 styles : name : text-anchor : start font-size : 30em font-weight : 700 opacity : 1 # ------------------------------------------------------------ - type : state position : cx : 50 cy : 70 entity_index : 0 show : uom : none styles : state : text-anchor : start font-size : 26em font-weight : 500 opacity : 0.7","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n YAML Template Definition"},{"location":"design/functional-card-environment-card/","tags":["Design","Functional Card","Environment Card"],"text":"Visualization \u00b6 This card uses the Material 3 theme D06, TealBlue Description Aspect Ratio Target Size A card that displays some environment entities, including battery and link quality 6/1 Grid with 1 column SAK Tool Used for Circle The half circle, as the left part of the circle is cutoff by the card. Icon Entity Icon. Name Name of Entity State Value of secondary info Line Vertical Line as separator First Temperature with icon, state and segemented arc Second Humidity with icon, state and segemented arc Third Pressure with icon, state and segemented arc Battery Battery with icon, state and segmented arc Linkquality Linkquality with icon, state and segmented arc Interaction \u00b6 Part Description Card All tools connected to an entity do show by default the \"more-info\" dialog once clicked Usage \u00b6 1.0.0-rc.3 Replace example entities with your entities! 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 - type : 'custom:swiss-army-knife-card' entities : - entity : sensor.bathroom_2f_iaq_temperature name : 'Environment' icon : mdi:home-thermometer-outline decimals : 1 - entity : sensor.bathroom_2f_iaq_humidity decimals : 0 - entity : sensor.bathroom_2f_iaq_pressure decimals : 0 - entity : sensor.bathroom_2f_iaq_battery decimals : 0 - entity : sensor.bathroom_2f_iaq_linkquality decimals : 0 - entity : sensor.bathroom_2f_iaq_temperature secondary_info : last_changed format : relative layout : template : name : sak_layout_fce_environment Data Default Required Description entities The six required entities YAML Template Definition \u00b6 1.0.0-rc.3 Full definition of layout templatesak_layout_fce_environment : template : type : layout defaults : - var_entity_index : 0 layout : aspectratio : 6/1 # Card is 600x100 grid styles : card : toolsets : # ================================================================ - toolset : line1 position : cx : 200 cy : 50 tools : # ------------------------------------------------------------ - type : line position : cx : 50 cy : 50 orientation : vertical length : 50 styles : line : fill : var(--primary-text-color) opacity : 0.5 # ================================================================ - toolset : line2 position : cx : 500 cy : 50 tools : # ------------------------------------------------------------ - type : line position : cx : 50 cy : 50 orientation : vertical length : 50 styles : line : fill : var(--primary-text-color) opacity : 0.5 # ================================================================ - toolset : half-circle position : cx : 0 # Center on cards border cy : 50 tools : # ------------------------------------------------------------ - type : circle position : cx : 50 cy : 50 radius : 48 styles : circle : fill : none stroke : var(--theme-sys-color-secondary) stroke-width : 3em opacity : 0.5 # ================================================================ - toolset : column-icon position : cx : 25 cy : 50 tools : # ------------------------------------------------------------ - type : icon position : cx : 50 cy : 50 align : center icon_size : 30 entity_index : 0 styles : icon : fill : var(--theme-sys-color-secondary) - toolset : column-name position : cx : 120 cy : 50 tools : # ------------------------------------------------------------ - type : name position : cx : 50 cy : 50 entity_index : 0 styles : name : text-anchor : middle font-size : 25em font-weight : 700 opacity : 1 # ------------------------------------------------------------ - type : state position : cx : 50 cy : 80 entity_index : 5 show : uom : none styles : state : text-anchor : middle font-size : 14em font-weight : 500 opacity : 0.7 # ================================================================ - toolset : column-temperature position : cx : 260 cy : 50 tools : # ------------------------------------------------------------ - type : icon position : cx : 50 cy : 30 align : center icon_size : 25 entity_index : 5 styles : icon : fill : var(--theme-sys-color-secondary) # ------------------------------------------------------------ - type : state position : cx : 50 cy : 55 entity_index : 0 show : uom : bottom styles : state : text-anchor : middle font-size : 20em font-weight : 700 fill : var(--primary-text-color) uom : fill : var(--primary-text-color) font-weight : 700 # ------------------------------------------------------------ - type : 'segarc' id : 0 position : cx : 50 cy : 50 start_angle : 0 end_angle : 360 width : 6 radius : 40 entity_index : 0 scale : min : 15 max : 25 width : 6 offset : 12 show : scale : false style : 'colorlist' segments : colorlist : gap : 1 colors : - var(--theme-sys-palette-primary50) styles : foreground : fill : darkgrey background : fill : var(--theme-sys-elevation-surface-neutral4) opacity : 1 # ================================================================ - toolset : column-humidity position : cx : 355 cy : 50 tools : # ------------------------------------------------------------ - type : icon position : cx : 50 cy : 30 align : center icon_size : 25 entity_index : 1 styles : icon : fill : var(--theme-sys-color-secondary) # ------------------------------------------------------------ - type : state position : cx : 50 cy : 55 entity_index : 1 show : uom : bottom styles : state : text-anchor : middle font-size : 20em font-weight : 700 fill : var(--primary-text-color) uom : fill : var(--primary-text-color) font-weight : 700 # ------------------------------------------------------------ - type : 'segarc' id : 0 position : cx : 50 cy : 50 start_angle : 0 end_angle : 360 width : 6 radius : 40 entity_index : 1 scale : min : 0 max : 100 width : 6 offset : 12 show : scale : false style : 'colorlist' segments : colorlist : gap : 1 colors : - var(--theme-sys-palette-primary45) styles : foreground : fill : darkgrey background : fill : var(--theme-sys-elevation-surface-neutral4) opacity : 1 # ================================================================ - toolset : column-pressure position : cx : 450 cy : 50 tools : # ------------------------------------------------------------ - type : icon position : cx : 50 cy : 30 align : center icon_size : 25 entity_index : 2 styles : icon : fill : var(--theme-sys-color-secondary) # ------------------------------------------------------------ - type : state position : cx : 50 cy : 55 entity_index : 2 show : uom : bottom styles : state : text-anchor : middle font-size : 20em font-weight : 700 fill : var(--primary-text-color) uom : fill : var(--primary-text-color) font-weight : 700 # ------------------------------------------------------------ - type : 'segarc' id : 0 position : cx : 50 cy : 50 start_angle : 0 end_angle : 360 width : 6 radius : 40 entity_index : 2 scale : min : 950 max : 1050 width : 6 offset : 12 show : scale : false style : 'colorlist' segments : colorlist : gap : 1 colors : - var(--theme-sys-palette-primary40) styles : foreground : fill : darkgrey background : fill : var(--theme-sys-elevation-surface-neutral4) opacity : 1 # ================================================================ - toolset : column-battery position : cx : 540 cy : 50 tools : # ------------------------------------------------------------ - type : icon position : cx : 30 cy : 30 align : right icon_size : 25 entity_index : 3 styles : icon : fill : var(--theme-sys-color-tertiary) opacity : 0.8 # ------------------------------------------------------------ - type : state position : cx : 70 cy : 30 entity_index : 3 show : uom : none styles : state : text-anchor : middle font-size : 15em font-weight : 700 fill : var(--primary-text-color) uom : fill : var(--primary-text-color) font-weight : 700 # ------------------------------------------------------------ - type : 'segarc' id : 0 position : cx : 70 cy : 30 start_angle : 0 end_angle : 360 width : 3 radius : 18 entity_index : 3 scale : min : 0 max : 100 width : 6 offset : 12 show : scale : false style : 'colorlist' segments : colorlist : gap : 1 colors : - var(--theme-sys-palette-tertiary45) styles : foreground : fill : darkgrey background : fill : var(--theme-sys-elevation-surface-neutral4) opacity : 1 # ================================================================ - toolset : column-linkquality position : cx : 540 cy : 50 tools : # ------------------------------------------------------------ - type : icon position : cx : 30 cy : 70 align : right icon_size : 25 entity_index : 4 styles : icon : fill : var(--theme-sys-color-tertiary) opacity : 0.8 # ------------------------------------------------------------ - type : state position : cx : 70 cy : 70 entity_index : 4 show : uom : none styles : state : text-anchor : middle font-size : 15em font-weight : 700 fill : var(--primary-text-color) uom : fill : var(--primary-text-color) font-weight : 700 # ------------------------------------------------------------ - type : 'segarc' id : 0 position : cx : 70 cy : 70 start_angle : 0 end_angle : 360 width : 3 radius : 18 entity_index : 4 scale : min : 0 max : 100 width : 6 offset : 12 show : scale : false style : 'colorlist' segments : colorlist : gap : 1 colors : - var(--theme-sys-palette-tertiary45) styles : foreground : fill : darkgrey background : fill : var(--theme-sys-elevation-surface-neutral4) opacity : 1","title":"Environment Card"},{"location":"design/functional-card-environment-card/#visualization","text":"This card uses the Material 3 theme D06, TealBlue Description Aspect Ratio Target Size A card that displays some environment entities, including battery and link quality 6/1 Grid with 1 column SAK Tool Used for Circle The half circle, as the left part of the circle is cutoff by the card. Icon Entity Icon. Name Name of Entity State Value of secondary info Line Vertical Line as separator First Temperature with icon, state and segemented arc Second Humidity with icon, state and segemented arc Third Pressure with icon, state and segemented arc Battery Battery with icon, state and segmented arc Linkquality Linkquality with icon, state and segmented arc","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Visualization"},{"location":"design/functional-card-environment-card/#interaction","text":"Part Description Card All tools connected to an entity do show by default the \"more-info\" dialog once clicked","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Interaction"},{"location":"design/functional-card-environment-card/#usage","text":"1.0.0-rc.3 Replace example entities with your entities! 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 - type : 'custom:swiss-army-knife-card' entities : - entity : sensor.bathroom_2f_iaq_temperature name : 'Environment' icon : mdi:home-thermometer-outline decimals : 1 - entity : sensor.bathroom_2f_iaq_humidity decimals : 0 - entity : sensor.bathroom_2f_iaq_pressure decimals : 0 - entity : sensor.bathroom_2f_iaq_battery decimals : 0 - entity : sensor.bathroom_2f_iaq_linkquality decimals : 0 - entity : sensor.bathroom_2f_iaq_temperature secondary_info : last_changed format : relative layout : template : name : sak_layout_fce_environment Data Default Required Description entities The six required entities","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Usage"},{"location":"design/functional-card-environment-card/#yaml-template-definition","text":"1.0.0-rc.3 Full definition of layout templatesak_layout_fce_environment : template : type : layout defaults : - var_entity_index : 0 layout : aspectratio : 6/1 # Card is 600x100 grid styles : card : toolsets : # ================================================================ - toolset : line1 position : cx : 200 cy : 50 tools : # ------------------------------------------------------------ - type : line position : cx : 50 cy : 50 orientation : vertical length : 50 styles : line : fill : var(--primary-text-color) opacity : 0.5 # ================================================================ - toolset : line2 position : cx : 500 cy : 50 tools : # ------------------------------------------------------------ - type : line position : cx : 50 cy : 50 orientation : vertical length : 50 styles : line : fill : var(--primary-text-color) opacity : 0.5 # ================================================================ - toolset : half-circle position : cx : 0 # Center on cards border cy : 50 tools : # ------------------------------------------------------------ - type : circle position : cx : 50 cy : 50 radius : 48 styles : circle : fill : none stroke : var(--theme-sys-color-secondary) stroke-width : 3em opacity : 0.5 # ================================================================ - toolset : column-icon position : cx : 25 cy : 50 tools : # ------------------------------------------------------------ - type : icon position : cx : 50 cy : 50 align : center icon_size : 30 entity_index : 0 styles : icon : fill : var(--theme-sys-color-secondary) - toolset : column-name position : cx : 120 cy : 50 tools : # ------------------------------------------------------------ - type : name position : cx : 50 cy : 50 entity_index : 0 styles : name : text-anchor : middle font-size : 25em font-weight : 700 opacity : 1 # ------------------------------------------------------------ - type : state position : cx : 50 cy : 80 entity_index : 5 show : uom : none styles : state : text-anchor : middle font-size : 14em font-weight : 500 opacity : 0.7 # ================================================================ - toolset : column-temperature position : cx : 260 cy : 50 tools : # ------------------------------------------------------------ - type : icon position : cx : 50 cy : 30 align : center icon_size : 25 entity_index : 5 styles : icon : fill : var(--theme-sys-color-secondary) # ------------------------------------------------------------ - type : state position : cx : 50 cy : 55 entity_index : 0 show : uom : bottom styles : state : text-anchor : middle font-size : 20em font-weight : 700 fill : var(--primary-text-color) uom : fill : var(--primary-text-color) font-weight : 700 # ------------------------------------------------------------ - type : 'segarc' id : 0 position : cx : 50 cy : 50 start_angle : 0 end_angle : 360 width : 6 radius : 40 entity_index : 0 scale : min : 15 max : 25 width : 6 offset : 12 show : scale : false style : 'colorlist' segments : colorlist : gap : 1 colors : - var(--theme-sys-palette-primary50) styles : foreground : fill : darkgrey background : fill : var(--theme-sys-elevation-surface-neutral4) opacity : 1 # ================================================================ - toolset : column-humidity position : cx : 355 cy : 50 tools : # ------------------------------------------------------------ - type : icon position : cx : 50 cy : 30 align : center icon_size : 25 entity_index : 1 styles : icon : fill : var(--theme-sys-color-secondary) # ------------------------------------------------------------ - type : state position : cx : 50 cy : 55 entity_index : 1 show : uom : bottom styles : state : text-anchor : middle font-size : 20em font-weight : 700 fill : var(--primary-text-color) uom : fill : var(--primary-text-color) font-weight : 700 # ------------------------------------------------------------ - type : 'segarc' id : 0 position : cx : 50 cy : 50 start_angle : 0 end_angle : 360 width : 6 radius : 40 entity_index : 1 scale : min : 0 max : 100 width : 6 offset : 12 show : scale : false style : 'colorlist' segments : colorlist : gap : 1 colors : - var(--theme-sys-palette-primary45) styles : foreground : fill : darkgrey background : fill : var(--theme-sys-elevation-surface-neutral4) opacity : 1 # ================================================================ - toolset : column-pressure position : cx : 450 cy : 50 tools : # ------------------------------------------------------------ - type : icon position : cx : 50 cy : 30 align : center icon_size : 25 entity_index : 2 styles : icon : fill : var(--theme-sys-color-secondary) # ------------------------------------------------------------ - type : state position : cx : 50 cy : 55 entity_index : 2 show : uom : bottom styles : state : text-anchor : middle font-size : 20em font-weight : 700 fill : var(--primary-text-color) uom : fill : var(--primary-text-color) font-weight : 700 # ------------------------------------------------------------ - type : 'segarc' id : 0 position : cx : 50 cy : 50 start_angle : 0 end_angle : 360 width : 6 radius : 40 entity_index : 2 scale : min : 950 max : 1050 width : 6 offset : 12 show : scale : false style : 'colorlist' segments : colorlist : gap : 1 colors : - var(--theme-sys-palette-primary40) styles : foreground : fill : darkgrey background : fill : var(--theme-sys-elevation-surface-neutral4) opacity : 1 # ================================================================ - toolset : column-battery position : cx : 540 cy : 50 tools : # ------------------------------------------------------------ - type : icon position : cx : 30 cy : 30 align : right icon_size : 25 entity_index : 3 styles : icon : fill : var(--theme-sys-color-tertiary) opacity : 0.8 # ------------------------------------------------------------ - type : state position : cx : 70 cy : 30 entity_index : 3 show : uom : none styles : state : text-anchor : middle font-size : 15em font-weight : 700 fill : var(--primary-text-color) uom : fill : var(--primary-text-color) font-weight : 700 # ------------------------------------------------------------ - type : 'segarc' id : 0 position : cx : 70 cy : 30 start_angle : 0 end_angle : 360 width : 3 radius : 18 entity_index : 3 scale : min : 0 max : 100 width : 6 offset : 12 show : scale : false style : 'colorlist' segments : colorlist : gap : 1 colors : - var(--theme-sys-palette-tertiary45) styles : foreground : fill : darkgrey background : fill : var(--theme-sys-elevation-surface-neutral4) opacity : 1 # ================================================================ - toolset : column-linkquality position : cx : 540 cy : 50 tools : # ------------------------------------------------------------ - type : icon position : cx : 30 cy : 70 align : right icon_size : 25 entity_index : 4 styles : icon : fill : var(--theme-sys-color-tertiary) opacity : 0.8 # ------------------------------------------------------------ - type : state position : cx : 70 cy : 70 entity_index : 4 show : uom : none styles : state : text-anchor : middle font-size : 15em font-weight : 700 fill : var(--primary-text-color) uom : fill : var(--primary-text-color) font-weight : 700 # ------------------------------------------------------------ - type : 'segarc' id : 0 position : cx : 70 cy : 70 start_angle : 0 end_angle : 360 width : 3 radius : 18 entity_index : 4 scale : min : 0 max : 100 width : 6 offset : 12 show : scale : false style : 'colorlist' segments : colorlist : gap : 1 colors : - var(--theme-sys-palette-tertiary45) styles : foreground : fill : darkgrey background : fill : var(--theme-sys-elevation-surface-neutral4) opacity : 1","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n YAML Template Definition"},{"location":"design/functional-card-header-card/","tags":["Design","Functional Card","Header Card"],"text":"Visualization \u00b6 This card uses the Material 3 theme D06, TealBlue Description Aspect Ratio Target Size A card that displays header text 1/0.05 Grid with 1 column SAK Tool Used for Text The content of the header Interaction \u00b6 Part Description N/A No interaction available Usage \u00b6 1.0.0-rc.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 - type : custom:swiss-army-knife-card disable_card : true layout : template : name : sak_layout_fce_header variables : - sak_layout_header_content : 'Livingroom' - sak_layout_header_font_color : var(--secondary-text-color) - sak_layout_header_font_size : 5em ######################################################################## - type : custom:swiss-army-knife-card disable_card : true layout : template : name : sak_layout_fce_header variables : - sak_layout_header_content : 'All those beautiful lights' - sak_layout_header_font_color : var(--theme-sys-color-tertiary) - sak_layout_header_font_size : 3em - sak_layout_header_font_text_transform : none Data Default Required Description entities The single entity on the card sak_layout_header_content 'Your Header comes here' The header content sak_layout_header_font_color var(--primary-text-color) The text color sak_layout_header_font_size 3.5em Font size in em preferably sak_layout_header_font_transform uppercase The text transform. Can be capitalize , uppercase , lowercase , none , full-width and full-size-kana sak_layout_header_aspectratio 1/0.05 The aspectratio of the card. Depending on the selected font size, this one must be altered sak_layout_header_position_cy 2.5 The y position of the header text. Default is centered for default aspectratio. You can change this if required YAML Template Definition \u00b6 1.0.0-rc.3 Full definition of layout template 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 sak_layout_fce_header : template : type : layout defaults : - sak_layout_header_content : 'Your Header comes here' - sak_layout_header_font_color : var(--primary-text-color) - sak_layout_header_font_size : 3.5em - sak_layout_header_font_text_transform : uppercase - sak_layout_header_aspectratio : 1/0.05 - sak_layout_header_position_cy : '2.5' layout : aspectratio : '[[sak_layout_header_aspectratio]]' toolsets : # ============================================================================== - toolset : header position : cx : 2.5 cy : '[[sak_layout_header_position_cy]]' tools : - type : text position : cx : 50 cy : 50 text : '[[sak_layout_header_content]]' styles : text : fill : '[[sak_layout_header_font_color]]' letter-spacing : 0.1em text-transform : '[[sak_layout_header_font_text_transform]]' text-anchor : start font-size : '[[sak_layout_header_font_size]]'","title":"Header Card"},{"location":"design/functional-card-header-card/#visualization","text":"This card uses the Material 3 theme D06, TealBlue Description Aspect Ratio Target Size A card that displays header text 1/0.05 Grid with 1 column SAK Tool Used for Text The content of the header","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Visualization"},{"location":"design/functional-card-header-card/#interaction","text":"Part Description N/A No interaction available","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Interaction"},{"location":"design/functional-card-header-card/#usage","text":"1.0.0-rc.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 - type : custom:swiss-army-knife-card disable_card : true layout : template : name : sak_layout_fce_header variables : - sak_layout_header_content : 'Livingroom' - sak_layout_header_font_color : var(--secondary-text-color) - sak_layout_header_font_size : 5em ######################################################################## - type : custom:swiss-army-knife-card disable_card : true layout : template : name : sak_layout_fce_header variables : - sak_layout_header_content : 'All those beautiful lights' - sak_layout_header_font_color : var(--theme-sys-color-tertiary) - sak_layout_header_font_size : 3em - sak_layout_header_font_text_transform : none Data Default Required Description entities The single entity on the card sak_layout_header_content 'Your Header comes here' The header content sak_layout_header_font_color var(--primary-text-color) The text color sak_layout_header_font_size 3.5em Font size in em preferably sak_layout_header_font_transform uppercase The text transform. Can be capitalize , uppercase , lowercase , none , full-width and full-size-kana sak_layout_header_aspectratio 1/0.05 The aspectratio of the card. Depending on the selected font size, this one must be altered sak_layout_header_position_cy 2.5 The y position of the header text. Default is centered for default aspectratio. You can change this if required","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Usage"},{"location":"design/functional-card-header-card/#yaml-template-definition","text":"1.0.0-rc.3 Full definition of layout template 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 sak_layout_fce_header : template : type : layout defaults : - sak_layout_header_content : 'Your Header comes here' - sak_layout_header_font_color : var(--primary-text-color) - sak_layout_header_font_size : 3.5em - sak_layout_header_font_text_transform : uppercase - sak_layout_header_aspectratio : 1/0.05 - sak_layout_header_position_cy : '2.5' layout : aspectratio : '[[sak_layout_header_aspectratio]]' toolsets : # ============================================================================== - toolset : header position : cx : 2.5 cy : '[[sak_layout_header_position_cy]]' tools : - type : text position : cx : 50 cy : 50 text : '[[sak_layout_header_content]]' styles : text : fill : '[[sak_layout_header_font_color]]' letter-spacing : 0.1em text-transform : '[[sak_layout_header_font_text_transform]]' text-anchor : start font-size : '[[sak_layout_header_font_size]]'","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n YAML Template Definition"},{"location":"design/functional-card-input-boolean-card/","tags":["Design","Functional Card","Input Boolean Card"],"text":"Visualization \u00b6 This card uses the Material 3 theme D06, TealBlue Description Aspect Ratio Target Size A card that can toggle an input_boolean, just like toggling a switch or a light 4/1 Grid with 2 columns SAK Tool Used for Circle The half circle, as the left part of the circle is cutoff by the card. Animated, state dependent Icon Entity Icon. Animated, state dependent Switch Switch to indicate and control the state. Animated, state dependent Name Name of Entity State Value of entity Interaction \u00b6 Part Description Left Circle Toggles the on/off state of the power outlet Card All tools connected to an entity do show by default the \"more-info\" dialog once clicked Usage \u00b6 1.0.0-rc.3 Replace example entities with your entities! 1 2 3 4 5 6 7 - type : 'custom:swiss-army-knife-card' entities : - entity : input_boolean.pump_enabled name : 'Input Boolean' layout : template : name : sak_layout_fce_input_boolean Data Default Required Description entities The input boolean entity YAML Template Definition \u00b6 1.0.0-rc.3 Full definition of layout template 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 sak_layout_fce_input_boolean : template : type : layout defaults : - dummy : 0 layout : aspectratio : 4/1 toolsets : # ================================================================ - toolset : half-circle position : cx : 0 # Center on cards border cy : 50 tools : # ------------------------------------------------------------ - type : circle position : cx : 50 cy : 50 radius : 50 entity_index : 0 animations : - state : 'on' styles : circle : fill : var(--theme-sys-color-primary) - state : 'off' styles : circle : # Use as filled tonal button (m3) fill : var(--theme-sys-color-secondary-container) styles : circle : stroke : none # ================================================================ - toolset : column-icon position : cx : 25 cy : 45 tools : # ------------------------------------------------------------ - type : icon position : cx : 50 cy : 50 align : center icon_size : 45 entity_index : 0 animations : - state : 'on' styles : icon : fill : var(--primary-background-color) - state : 'off' styles : icon : fill : var(--theme-sys-color-secondary) styles : icon : opacity : 0.9 pointer-events : none # ================================================================ - toolset : switch position : cx : 25 # On 1/3 of card width cy : 75 scale : 1.8 tools : # ------------------------------------------------------------ - type : switch position : cx : 50 cy : 50 orientation : 'horizontal' track : width : 15 height : 5 radius : 2.5 thumb : width : 3 height : 3 radius : 2.5 offset : 4.5 entity_index : 0 styles : track : --switch-checked-track-color : var(--primary-background-color) --switch-unchecked-track-color : var(--theme-sys-color-secondary) # --switch-checked-button-color: pointer-events : none thumb : --thumb-stroke : 'var(--primary-background-color)' pointer-events : none # ================================================================ - toolset : tap-area position : cx : 25 # tap area for toggle cy : 50 tools : # ------------------------------------------------------------ - type : rectangle position : cx : 50 cy : 50 width : 50 height : 100 entity_index : 0 user_actions : tap_action : haptic : light actions : - action : call-service service : input_boolean.toggle styles : rectangle : stroke : none fill : rgba(0,0,0,0) # ================================================================ - toolset : column-name position : cx : 70 # Left part = 75, so 75+(300-75)/2 cy : 50 tools : # ------------------------------------------------------------ - type : name position : cx : 50 cy : 37 entity_index : 0 styles : name : text-anchor : start font-size : 30em font-weight : 700 opacity : 1 # ------------------------------------------------------------ - type : state position : cx : 50 cy : 70 entity_index : 0 show : uom : none styles : state : text-anchor : start font-size : 26em font-weight : 500 opacity : 0.7","title":"Input Boolean Card"},{"location":"design/functional-card-input-boolean-card/#visualization","text":"This card uses the Material 3 theme D06, TealBlue Description Aspect Ratio Target Size A card that can toggle an input_boolean, just like toggling a switch or a light 4/1 Grid with 2 columns SAK Tool Used for Circle The half circle, as the left part of the circle is cutoff by the card. Animated, state dependent Icon Entity Icon. Animated, state dependent Switch Switch to indicate and control the state. Animated, state dependent Name Name of Entity State Value of entity","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Visualization"},{"location":"design/functional-card-input-boolean-card/#interaction","text":"Part Description Left Circle Toggles the on/off state of the power outlet Card All tools connected to an entity do show by default the \"more-info\" dialog once clicked","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Interaction"},{"location":"design/functional-card-input-boolean-card/#usage","text":"1.0.0-rc.3 Replace example entities with your entities! 1 2 3 4 5 6 7 - type : 'custom:swiss-army-knife-card' entities : - entity : input_boolean.pump_enabled name : 'Input Boolean' layout : template : name : sak_layout_fce_input_boolean Data Default Required Description entities The input boolean entity","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Usage"},{"location":"design/functional-card-input-boolean-card/#yaml-template-definition","text":"1.0.0-rc.3 Full definition of layout template 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 sak_layout_fce_input_boolean : template : type : layout defaults : - dummy : 0 layout : aspectratio : 4/1 toolsets : # ================================================================ - toolset : half-circle position : cx : 0 # Center on cards border cy : 50 tools : # ------------------------------------------------------------ - type : circle position : cx : 50 cy : 50 radius : 50 entity_index : 0 animations : - state : 'on' styles : circle : fill : var(--theme-sys-color-primary) - state : 'off' styles : circle : # Use as filled tonal button (m3) fill : var(--theme-sys-color-secondary-container) styles : circle : stroke : none # ================================================================ - toolset : column-icon position : cx : 25 cy : 45 tools : # ------------------------------------------------------------ - type : icon position : cx : 50 cy : 50 align : center icon_size : 45 entity_index : 0 animations : - state : 'on' styles : icon : fill : var(--primary-background-color) - state : 'off' styles : icon : fill : var(--theme-sys-color-secondary) styles : icon : opacity : 0.9 pointer-events : none # ================================================================ - toolset : switch position : cx : 25 # On 1/3 of card width cy : 75 scale : 1.8 tools : # ------------------------------------------------------------ - type : switch position : cx : 50 cy : 50 orientation : 'horizontal' track : width : 15 height : 5 radius : 2.5 thumb : width : 3 height : 3 radius : 2.5 offset : 4.5 entity_index : 0 styles : track : --switch-checked-track-color : var(--primary-background-color) --switch-unchecked-track-color : var(--theme-sys-color-secondary) # --switch-checked-button-color: pointer-events : none thumb : --thumb-stroke : 'var(--primary-background-color)' pointer-events : none # ================================================================ - toolset : tap-area position : cx : 25 # tap area for toggle cy : 50 tools : # ------------------------------------------------------------ - type : rectangle position : cx : 50 cy : 50 width : 50 height : 100 entity_index : 0 user_actions : tap_action : haptic : light actions : - action : call-service service : input_boolean.toggle styles : rectangle : stroke : none fill : rgba(0,0,0,0) # ================================================================ - toolset : column-name position : cx : 70 # Left part = 75, so 75+(300-75)/2 cy : 50 tools : # ------------------------------------------------------------ - type : name position : cx : 50 cy : 37 entity_index : 0 styles : name : text-anchor : start font-size : 30em font-weight : 700 opacity : 1 # ------------------------------------------------------------ - type : state position : cx : 50 cy : 70 entity_index : 0 show : uom : none styles : state : text-anchor : start font-size : 26em font-weight : 500 opacity : 0.7","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n YAML Template Definition"},{"location":"design/functional-card-light-card/","tags":["Design","Functional Card","Light Card"],"text":"This card uses the Material 3 theme D06, TealBlue This light card and the light card with slider are kept almost identical This means you can mix lights with and without brightness slider, as their size is the same. Description Aspect Ratio Target Size A card that can control a light 4/1 Grid with 2 columns SAK Tool Used for Circle The half circle, as the left part of the circle is cutoff by the card. Animated, state dependent Icon Entity Icon. Animated, state dependent Switch The Switch to toggle the light Name Name of Entity State Value of Entity Interaction \u00b6 Part Description Left part Toggles the light once tapped Other parts All tools connected to an entity do show by default the \"more-info\" dialog once clicked Usage \u00b6 1.0.0-rc.3 Replace example entities with your entities! 1 2 3 4 5 6 7 8 - type : 'custom:swiss-army-knife-card' entities : - entity : light.1st_floor_hall_light name : 'Light' icon : mdi:dome-light layout : template : name : sak_layout_fce_light Data Default Required Description entities The single entity on the card sak_layout_light_toggle_service true The actual service to call to toggle the light. If you have a switch to control the light, the light.toggle service won't work and you have to replace this with switch.toggle YAML Template Definition \u00b6 1.0.0-rc.3 Full definition of layout template 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 sak_layout_fce_light : template : type : layout defaults : - sak_layout_light_toggle_service : light.toggle layout : aspectratio : 3/1 toolsets : # ================================================================ - toolset : column-icon position : cx : 0 cy : 50 tools : # ------------------------------------------------------------ - type : circle position : cx : 50 cy : 50 radius : 50 entity_index : 0 animations : - state : 'on' styles : circle : fill : var(--theme-sys-color-primary) - state : 'off' styles : circle : fill : var(--theme-sys-color-secondary-container) user_actions : tap_action : haptic : light actions : - action : call-service service : light.toggle styles : circle : fill : var(--theme-sys-color-secondary-container) stroke : var(--theme-sys-color-secondary) stroke-width : 0em # ------------------------------------------------------------ - type : icon position : cx : 75 cy : 50 align : center icon_size : 30 entity_index : 0 animations : - state : 'on' styles : icon : fill : var(--primary-background-color) - state : 'off' styles : icon : fill : var(--theme-sys-color-secondary) styles : icon : fill : var(--theme-sys-color-secondary) pointer-events : none # ================================================================ - toolset : switch position : cx : 25 # On 1/3 of card width cy : 75 scale : 1.8 tools : # ------------------------------------------------------------ - type : switch position : cx : 50 cy : 50 orientation : 'horizontal' track : width : 15 height : 5 radius : 2.5 thumb : width : 3 height : 3 radius : 2.5 offset : 4.5 entity_index : 0 user_actions : tap_action : haptic : light actions : - action : call-service service : '[[sak_layout_light_toggle_service]]' styles : track : --switch-checked-track-color : var(--primary-background-color) --switch-unchecked-track-color : var(--theme-sys-color-secondary) # --switch-checked-button-color: thumb : --thumb-stroke : 'var(--primary-background-color)' # ================================================================ - toolset : column-name position : cx : 70 cy : 50 tools : # ------------------------------------------------------------ - type : name position : cx : 50 cy : 30 entity_index : 0 styles : name : text-anchor : start font-size : 25em font-weight : 700 opacity : 1 # ------------------------------------------------------------ - type : state position : cx : 50 cy : 70 entity_index : 0 show : uom : none styles : state : text-anchor : start font-size : 20em font-weight : 500 opacity : 0.7","title":"Light Card"},{"location":"design/functional-card-light-card/#interaction","text":"Part Description Left part Toggles the light once tapped Other parts All tools connected to an entity do show by default the \"more-info\" dialog once clicked","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Interaction"},{"location":"design/functional-card-light-card/#usage","text":"1.0.0-rc.3 Replace example entities with your entities! 1 2 3 4 5 6 7 8 - type : 'custom:swiss-army-knife-card' entities : - entity : light.1st_floor_hall_light name : 'Light' icon : mdi:dome-light layout : template : name : sak_layout_fce_light Data Default Required Description entities The single entity on the card sak_layout_light_toggle_service true The actual service to call to toggle the light. If you have a switch to control the light, the light.toggle service won't work and you have to replace this with switch.toggle","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Usage"},{"location":"design/functional-card-light-card/#yaml-template-definition","text":"1.0.0-rc.3 Full definition of layout template 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 sak_layout_fce_light : template : type : layout defaults : - sak_layout_light_toggle_service : light.toggle layout : aspectratio : 3/1 toolsets : # ================================================================ - toolset : column-icon position : cx : 0 cy : 50 tools : # ------------------------------------------------------------ - type : circle position : cx : 50 cy : 50 radius : 50 entity_index : 0 animations : - state : 'on' styles : circle : fill : var(--theme-sys-color-primary) - state : 'off' styles : circle : fill : var(--theme-sys-color-secondary-container) user_actions : tap_action : haptic : light actions : - action : call-service service : light.toggle styles : circle : fill : var(--theme-sys-color-secondary-container) stroke : var(--theme-sys-color-secondary) stroke-width : 0em # ------------------------------------------------------------ - type : icon position : cx : 75 cy : 50 align : center icon_size : 30 entity_index : 0 animations : - state : 'on' styles : icon : fill : var(--primary-background-color) - state : 'off' styles : icon : fill : var(--theme-sys-color-secondary) styles : icon : fill : var(--theme-sys-color-secondary) pointer-events : none # ================================================================ - toolset : switch position : cx : 25 # On 1/3 of card width cy : 75 scale : 1.8 tools : # ------------------------------------------------------------ - type : switch position : cx : 50 cy : 50 orientation : 'horizontal' track : width : 15 height : 5 radius : 2.5 thumb : width : 3 height : 3 radius : 2.5 offset : 4.5 entity_index : 0 user_actions : tap_action : haptic : light actions : - action : call-service service : '[[sak_layout_light_toggle_service]]' styles : track : --switch-checked-track-color : var(--primary-background-color) --switch-unchecked-track-color : var(--theme-sys-color-secondary) # --switch-checked-button-color: thumb : --thumb-stroke : 'var(--primary-background-color)' # ================================================================ - toolset : column-name position : cx : 70 cy : 50 tools : # ------------------------------------------------------------ - type : name position : cx : 50 cy : 30 entity_index : 0 styles : name : text-anchor : start font-size : 25em font-weight : 700 opacity : 1 # ------------------------------------------------------------ - type : state position : cx : 50 cy : 70 entity_index : 0 show : uom : none styles : state : text-anchor : start font-size : 20em font-weight : 500 opacity : 0.7","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n YAML Template Definition"},{"location":"design/functional-card-light-slider-card/","tags":["Design","Functional Card","Light Card"],"text":"This card uses the Material 3 theme D06, TealBlue Description Aspect Ratio Target Size A card that can control a light and includes a slider for brightness percentage 3/1 Grid with 2 columns SAK Tool Used for Circle The half circle, as the left part of the circle is cutoff by the card. Animated, state dependent Icon Entity Icon. Animated, state dependent Switch The Switch to toggle the light Name Name of Entity State Brightness Attribute (from slider) Slider Slider to control the brightness of the light Interaction \u00b6 Part Description Left part Toggles the light once tapped Slider Sets the brightness of the light Other parts All tools connected to an entity do show by default the \"more-info\" dialog once clicked Usage \u00b6 1.0.0-rc.3 Replace example entities with your entities! 1 2 3 4 5 6 7 8 9 10 11 12 13 - type : 'custom:swiss-army-knife-card' entities : - entity : light.livingroom_light_duo_right_light name : 'Light /w Slider' - entity : light.livingroom_light_duo_right_light attribute : brightness unit_of_measurement : \"%\" - entity : light.livingroom_light_duo_right_light secondary_info : last_changed format : relative layout : template : name : sak_layout_fce_light_with_slider Data Default Required Description entities The single entity on the card sak_layout_light_toggle_service true The actual service to call to toggle the light. If you have a switch to control the light, the light.toggle service won't work and you have to replace this with switch.toggle YAML Template Definition \u00b6 1.0.0-rc.3 Full definition of layout templatesak_layout_fce_light_with_slider : template : type : layout defaults : - sak_layout_light_toggle_service : light.toggle layout : aspectratio : 3/1 toolsets : # ================================================================ - toolset : column-icon position : cx : 0 cy : 50 tools : # ------------------------------------------------------------ - type : circle position : cx : 50 cy : 50 radius : 50 entity_index : 0 animations : - state : 'on' styles : circle : fill : var(--theme-sys-color-primary) # animation: flash 2s ease-in-out 5 - state : 'off' styles : circle : fill : var(--theme-sys-color-secondary-container) # Remove user actions part to just display the state # or disable pointer-events via a class or style # Using a class enables the use of variables that can # disable pointer-events to none! user_actions : tap_action : haptic : light actions : - action : call-service service : light.toggle styles : circle : fill : var(--theme-sys-color-secondary-container) stroke : var(--theme-sys-color-secondary) stroke-width : 0em # ------------------------------------------------------------ - type : 'segarc' id : 0 position : cx : 50 cy : 50 start_angle : 25 end_angle : 155 width : 6 radius : 59 entity_index : 1 scale : min : 0 max : 100 width : 6 offset : 12 show : scale : false style : 'colorlist' derived_entity : input : '[[[ return state ]]]' state : > [[[ if (typeof(entity) === 'undefined') return; if (typeof(state) === 'undefined') return; var bri = Math.round(state / 2.55); return (bri ? bri : '0'); ]]] unit : > [[[ if (typeof(state) === 'undefined') return undefined; return '%'; ]]] segments : colorlist : gap : 1 colors : - 'var(--primary-text-color)' animation : duration : 5 styles : foreground : fill : darkgrey background : fill : var(--theme-sys-elevation-surface-neutral4) # ------------------------------------------------------------ - type : icon position : cx : 75 cy : 50 align : center icon_size : 30 entity_index : 0 animations : - state : 'on' styles : icon : # animation: spin 3s linear infinite fill : var(--primary-background-color) - state : 'off' styles : icon : # fill: var(--theme-sys-color-on-secondary-container) fill : var(--theme-sys-color-secondary) styles : icon : fill : var(--theme-sys-color-secondary) # opacity: 0.7 pointer-events : none # ================================================================ - toolset : switch position : cx : 25 # On 1/3 of card width cy : 75 scale : 1.8 tools : # ------------------------------------------------------------ - type : switch position : cx : 50 cy : 50 orientation : 'horizontal' track : width : 15 height : 5 radius : 2.5 thumb : width : 3 height : 3 radius : 2.5 offset : 4.5 entity_index : 0 user_actions : tap_action : haptic : light actions : - action : call-service service : '[[sak_layout_light_toggle_service]]' styles : track : --switch-checked-track-color : var(--primary-background-color) --switch-unchecked-track-color : var(--theme-sys-color-secondary) # --switch-checked-button-color: thumb : --thumb-stroke : 'var(--primary-background-color)' # ================================================================ - toolset : column-name position : cx : 80 cy : 25 tools : # ------------------------------------------------------------ - type : name position : cx : 50 cy : 50 entity_index : 0 styles : name : text-anchor : start font-size : 25em font-weight : 700 opacity : 1 # ================================================================ - toolset : slider position : cx : 180 cy : 80 tools : # ------------------------------------------------------------ - type : slider position : cx : 50 cy : 50 orientation : horizontal capture : width : 200 height : 35 active : # width: 200 height : 30 radius : 5 track : width : 200 height : 30 radius : 5 thumb : width : 30 height : 30 radius : 5 label : # placement can be none, thumb, position (cx,cy) placement : position cx : -50 cy : 20 entity_index : 1 # Does this work?? animations : # - state: > # [[[ # if (typeof(state) === 'undefined') return state; # return 'no-match'; # ]]] - state : 'undefined' operator : '==' styles : thumb : # animation: spin 3s linear infinite # fill: var(--primary-background-color) fill : var(--theme-sys-color-secondary-container) # - state: '50' # operator: '<=' # styles: # track: # # fill: var(--theme-sys-color-on-secondary-container) # fill: var(--theme-sys-color-secondary) - state : 'undefined' operator : '!=' styles : track : dummy : 1 derived_entity : input : '[[[ return state ]]]' state : > [[[ if (typeof(entity) === 'undefined') return; if (typeof(state) === 'undefined') return; var bri = Math.round(state / 2.55); return (bri ? bri : '0'); ]]] unit : > [[[ if (typeof(state) === 'undefined') return undefined; return '%'; ]]] show : # uom: none active : true user_actions : drag_action : update_interval : 200 # Update every 200msec haptic : selection actions : - action : call-service service : light.turn_on parameter : brightness_pct tap_action : haptic : light actions : - action : call-service service : light.turn_on parameter : brightness_pct scale : min : 1 max : 100 step : 1 styles : label : text-anchor : start font-size : 20em font-weight : 500 pointer-events : auto uom : font-weight : 600 capture : pointer-events : all touch-action : none active : # fill: url(#sak-light-brightness-gradient--orange) #white fill : var(--theme-sys-elevation-surface-neutral10) fill : var(--theme-sys-color-secondary) fill : var(--theme-sys-color-primary) fill-opacity : 0.3 pointer-events : none track : # fill: url(#sak-light-brightness-gradient) fill : var(--theme-sys-elevation-surface-neutral4) fill-opacity : 1 stroke-width : 0.2em stroke : var(--theme-sys-elevation-surface-neutral10) pointer-events : none thumb : # stroke-width: 1.2em # stroke: var(--primary-background-color) # stroke-opacity: 1 # fill: var(--primary-text-color) fill : var(--theme-sys-color-primary) fill-opacity : 1 pointer-events : none transition : all .5s ease","title":"Light Card with slider"},{"location":"design/functional-card-light-slider-card/#interaction","text":"Part Description Left part Toggles the light once tapped Slider Sets the brightness of the light Other parts All tools connected to an entity do show by default the \"more-info\" dialog once clicked","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Interaction"},{"location":"design/functional-card-light-slider-card/#usage","text":"1.0.0-rc.3 Replace example entities with your entities! 1 2 3 4 5 6 7 8 9 10 11 12 13 - type : 'custom:swiss-army-knife-card' entities : - entity : light.livingroom_light_duo_right_light name : 'Light /w Slider' - entity : light.livingroom_light_duo_right_light attribute : brightness unit_of_measurement : \"%\" - entity : light.livingroom_light_duo_right_light secondary_info : last_changed format : relative layout : template : name : sak_layout_fce_light_with_slider Data Default Required Description entities The single entity on the card sak_layout_light_toggle_service true The actual service to call to toggle the light. If you have a switch to control the light, the light.toggle service won't work and you have to replace this with switch.toggle","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Usage"},{"location":"design/functional-card-light-slider-card/#yaml-template-definition","text":"1.0.0-rc.3 Full definition of layout templatesak_layout_fce_light_with_slider : template : type : layout defaults : - sak_layout_light_toggle_service : light.toggle layout : aspectratio : 3/1 toolsets : # ================================================================ - toolset : column-icon position : cx : 0 cy : 50 tools : # ------------------------------------------------------------ - type : circle position : cx : 50 cy : 50 radius : 50 entity_index : 0 animations : - state : 'on' styles : circle : fill : var(--theme-sys-color-primary) # animation: flash 2s ease-in-out 5 - state : 'off' styles : circle : fill : var(--theme-sys-color-secondary-container) # Remove user actions part to just display the state # or disable pointer-events via a class or style # Using a class enables the use of variables that can # disable pointer-events to none! user_actions : tap_action : haptic : light actions : - action : call-service service : light.toggle styles : circle : fill : var(--theme-sys-color-secondary-container) stroke : var(--theme-sys-color-secondary) stroke-width : 0em # ------------------------------------------------------------ - type : 'segarc' id : 0 position : cx : 50 cy : 50 start_angle : 25 end_angle : 155 width : 6 radius : 59 entity_index : 1 scale : min : 0 max : 100 width : 6 offset : 12 show : scale : false style : 'colorlist' derived_entity : input : '[[[ return state ]]]' state : > [[[ if (typeof(entity) === 'undefined') return; if (typeof(state) === 'undefined') return; var bri = Math.round(state / 2.55); return (bri ? bri : '0'); ]]] unit : > [[[ if (typeof(state) === 'undefined') return undefined; return '%'; ]]] segments : colorlist : gap : 1 colors : - 'var(--primary-text-color)' animation : duration : 5 styles : foreground : fill : darkgrey background : fill : var(--theme-sys-elevation-surface-neutral4) # ------------------------------------------------------------ - type : icon position : cx : 75 cy : 50 align : center icon_size : 30 entity_index : 0 animations : - state : 'on' styles : icon : # animation: spin 3s linear infinite fill : var(--primary-background-color) - state : 'off' styles : icon : # fill: var(--theme-sys-color-on-secondary-container) fill : var(--theme-sys-color-secondary) styles : icon : fill : var(--theme-sys-color-secondary) # opacity: 0.7 pointer-events : none # ================================================================ - toolset : switch position : cx : 25 # On 1/3 of card width cy : 75 scale : 1.8 tools : # ------------------------------------------------------------ - type : switch position : cx : 50 cy : 50 orientation : 'horizontal' track : width : 15 height : 5 radius : 2.5 thumb : width : 3 height : 3 radius : 2.5 offset : 4.5 entity_index : 0 user_actions : tap_action : haptic : light actions : - action : call-service service : '[[sak_layout_light_toggle_service]]' styles : track : --switch-checked-track-color : var(--primary-background-color) --switch-unchecked-track-color : var(--theme-sys-color-secondary) # --switch-checked-button-color: thumb : --thumb-stroke : 'var(--primary-background-color)' # ================================================================ - toolset : column-name position : cx : 80 cy : 25 tools : # ------------------------------------------------------------ - type : name position : cx : 50 cy : 50 entity_index : 0 styles : name : text-anchor : start font-size : 25em font-weight : 700 opacity : 1 # ================================================================ - toolset : slider position : cx : 180 cy : 80 tools : # ------------------------------------------------------------ - type : slider position : cx : 50 cy : 50 orientation : horizontal capture : width : 200 height : 35 active : # width: 200 height : 30 radius : 5 track : width : 200 height : 30 radius : 5 thumb : width : 30 height : 30 radius : 5 label : # placement can be none, thumb, position (cx,cy) placement : position cx : -50 cy : 20 entity_index : 1 # Does this work?? animations : # - state: > # [[[ # if (typeof(state) === 'undefined') return state; # return 'no-match'; # ]]] - state : 'undefined' operator : '==' styles : thumb : # animation: spin 3s linear infinite # fill: var(--primary-background-color) fill : var(--theme-sys-color-secondary-container) # - state: '50' # operator: '<=' # styles: # track: # # fill: var(--theme-sys-color-on-secondary-container) # fill: var(--theme-sys-color-secondary) - state : 'undefined' operator : '!=' styles : track : dummy : 1 derived_entity : input : '[[[ return state ]]]' state : > [[[ if (typeof(entity) === 'undefined') return; if (typeof(state) === 'undefined') return; var bri = Math.round(state / 2.55); return (bri ? bri : '0'); ]]] unit : > [[[ if (typeof(state) === 'undefined') return undefined; return '%'; ]]] show : # uom: none active : true user_actions : drag_action : update_interval : 200 # Update every 200msec haptic : selection actions : - action : call-service service : light.turn_on parameter : brightness_pct tap_action : haptic : light actions : - action : call-service service : light.turn_on parameter : brightness_pct scale : min : 1 max : 100 step : 1 styles : label : text-anchor : start font-size : 20em font-weight : 500 pointer-events : auto uom : font-weight : 600 capture : pointer-events : all touch-action : none active : # fill: url(#sak-light-brightness-gradient--orange) #white fill : var(--theme-sys-elevation-surface-neutral10) fill : var(--theme-sys-color-secondary) fill : var(--theme-sys-color-primary) fill-opacity : 0.3 pointer-events : none track : # fill: url(#sak-light-brightness-gradient) fill : var(--theme-sys-elevation-surface-neutral4) fill-opacity : 1 stroke-width : 0.2em stroke : var(--theme-sys-elevation-surface-neutral10) pointer-events : none thumb : # stroke-width: 1.2em # stroke: var(--primary-background-color) # stroke-opacity: 1 # fill: var(--primary-text-color) fill : var(--theme-sys-color-primary) fill-opacity : 1 pointer-events : none transition : all .5s ease","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n YAML Template Definition"},{"location":"design/functional-card-navigate-card/","tags":["Design","Functional Card","Navigate"],"text":"This card uses the Material 3 theme D06, TealBlue Its a card, but it just demonstrates how to use the navigate user action on a tool Description Aspect Ratio Target Size A card that shows an icon and text, and has a navigate user action. 3/1 Grid with 3 columns SAK Tool Used for Icon Configured Icon (variable) Text Navigation text (variable) RectEx A rectangle covering the whole card to act as a button to handle the navigation action Interaction \u00b6 Part Description Card This card navigates to the configured view Usage \u00b6 1.0.0-rc.3 1 2 3 4 5 6 7 8 - type : 'custom:swiss-army-knife-card' layout : template : name : sak_layout_fce_navigate variables : - sak_layout_navigate_icon : 'mdi:arrow-right-bold-circle' - sak_layout_navigate_text : 'Some View' - sak_layout_navigate_path : 'tut-03-p1' Data Default Required Description sak_layout_navigate_icon mdi:arrow-right-bold-circle The used icon on the card sak_layout_navigate_text The text displayd on the card sak_layout_navigate_path The path name of the view you want to navigate to YAML Template Definition \u00b6 1.0.0-rc.3 Full definition of layout template 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 sak_layout_fce_navigate : template : type : layout defaults : - sak_layout_navigate_icon : mdi:arrow-right-bold-circle - sak_layout_navigate_text : 'Navigate' - sak_layout_navigate_path : 'Unknown' layout : styles : card : border-radius : 25em background : var(--theme-sys-color-secondary-container) aspectratio : 3/1 toolsets : # ================================================================ - toolset : column-icon position : cx : 50 cy : 50 tools : # ------------------------------------------------------------ - type : icon position : cx : 50 cy : 50 align : center icon_size : 50 icon : '[[sak_layout_navigate_icon]]' styles : icon : fill : var(--secondary-text-color) opacity : 0.9 # ================================================================ - toolset : button-text position : cx : 175 cy : 50 tools : # ------------------------------------------------------------ - type : text position : cx : 50 cy : 50 text : '[[sak_layout_navigate_text]]' styles : text : text-anchor : middle font-size : 30em font-weight : 700 opacity : 1 # ================================================================ - toolset : button-cover position : cx : 150 cy : 50 tools : # ------------------------------------------------------------ - type : rectex position : cx : 50 cy : 50 height : 100 width : 300 user_actions : tap_action : haptic : light actions : - action : navigate navigation_path : '[[sak_layout_navigate_path]]' styles : rectex : fill : rgba(0,0,0,0)","title":"Navigate Card"},{"location":"design/functional-card-navigate-card/#interaction","text":"Part Description Card This card navigates to the configured view","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Interaction"},{"location":"design/functional-card-navigate-card/#usage","text":"1.0.0-rc.3 1 2 3 4 5 6 7 8 - type : 'custom:swiss-army-knife-card' layout : template : name : sak_layout_fce_navigate variables : - sak_layout_navigate_icon : 'mdi:arrow-right-bold-circle' - sak_layout_navigate_text : 'Some View' - sak_layout_navigate_path : 'tut-03-p1' Data Default Required Description sak_layout_navigate_icon mdi:arrow-right-bold-circle The used icon on the card sak_layout_navigate_text The text displayd on the card sak_layout_navigate_path The path name of the view you want to navigate to","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Usage"},{"location":"design/functional-card-navigate-card/#yaml-template-definition","text":"1.0.0-rc.3 Full definition of layout template 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 sak_layout_fce_navigate : template : type : layout defaults : - sak_layout_navigate_icon : mdi:arrow-right-bold-circle - sak_layout_navigate_text : 'Navigate' - sak_layout_navigate_path : 'Unknown' layout : styles : card : border-radius : 25em background : var(--theme-sys-color-secondary-container) aspectratio : 3/1 toolsets : # ================================================================ - toolset : column-icon position : cx : 50 cy : 50 tools : # ------------------------------------------------------------ - type : icon position : cx : 50 cy : 50 align : center icon_size : 50 icon : '[[sak_layout_navigate_icon]]' styles : icon : fill : var(--secondary-text-color) opacity : 0.9 # ================================================================ - toolset : button-text position : cx : 175 cy : 50 tools : # ------------------------------------------------------------ - type : text position : cx : 50 cy : 50 text : '[[sak_layout_navigate_text]]' styles : text : text-anchor : middle font-size : 30em font-weight : 700 opacity : 1 # ================================================================ - toolset : button-cover position : cx : 150 cy : 50 tools : # ------------------------------------------------------------ - type : rectex position : cx : 50 cy : 50 height : 100 width : 300 user_actions : tap_action : haptic : light actions : - action : navigate navigation_path : '[[sak_layout_navigate_path]]' styles : rectex : fill : rgba(0,0,0,0)","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n YAML Template Definition"},{"location":"design/functional-card-person-card/","tags":["Design","Functional Card","Person Card"],"text":"Visualization \u00b6 This card uses the Material 3 theme D06, TealBlue This card shows you some possibilities to apply JavaScript to the animations section The card seems like a standard, simple card, but isn't due to some Home Assistant functionalities and the possibilities of using either an icon or an entity picture for the person. The use of JavaScript to fetch the zone's Icon, to do some state dependent color changes and taking care of the \"use entity_picture yes/no\" setting are nice examples of the possibilities that JavaScript adds to tools. It are just a few lines, but very powerful! It also takes care of fetching the icon of additional zones (ie not the home zone). Description Aspect Ratio Target Size A card that shows in which zone a person is, or if in no known zone as away / not home. 4/1 Grid with 2 columns SAK Tool Used for Icon Background Icon (only in first screenshot) Circle The half circle, as the left part of the circle is cutoff by the card Icon Entity Icon. Animated, state dependent and only visible if no entity_picture should be displayed UserSvg Shows the Entity Picture. Only visible if entity_picture should be displayed Icon Zone Icon, ie where is the person according to the zone configuration. Animated, state dependent Name Name of Entity State State of entity Interaction \u00b6 Part Description Card All tools connected to an entity do show by default the \"more-info\" dialog once clicked Usage \u00b6 1.0.0-rc.3 Using the default mode: an icon for the person entity: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 - type : 'custom:swiss-army-knife-card' entities : - entity : person.marco name : 'Person' icon : mdi:face-man layout : template : name : sak_layout_fce_person variables : - sak_layout_fce_person_zone_entities : - zone.the_gym - zone.marco_work - zone.marco_parents - zone.zoo Using an entity_picture for the person entity. Picture can be defined here, or (default) the entity_picture defined for the person is used: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 - type : 'custom:swiss-army-knife-card' entities : - entity : person.tha_washer name : 'Tha Washer' icon : mdi:face-man entity_picture : \"/local/images/tha-washer.jpg\" layout : template : name : sak_layout_fce_person variables : - sak_layout_fce_person_use_entity_picture : true - sak_layout_fce_person_zone_entities : - zone.the_gym - zone.marco_work - zone.marco_parents - zone.zoo Data Default Required Description entities The person entity sak_layout_fce_person_zone_entities The list of zone entities for this person to be displayed. There is no limit, it is really a list which is used when the person is not at home! sak_layout_fce_person_use_entity_picture false If set to true, an entity picture is displayed instead of the persons icon. Default the picture configured for the person is used, but can be overridden by specifying an entity_picture in the entity configuration in the view YAML Template Definition \u00b6 1.0.0-rc.3 Full definition of layout template 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 sak_layout_fce_person : template : type : layout defaults : - sak_layout_fce_person_use_entity_picture : false layout : aspectratio : 4/1 toolsets : # ================================================================ # Extra background icon. Just for fun and filling some space - toolset : background-icon position : cx : 350 cy : 50 tools : # ------------------------------------------------------------ - type : icon position : cx : 50 cy : 50 align : center icon_size : 100 icon : mdi:map-marker-radius-outline styles : icon : fill : var(--theme-sys-elevation-surface-neutral2) # ================================================================ - toolset : half-circle position : cx : 0 # Center on cards border cy : 50 tools : # ------------------------------------------------------------ - type : circle position : cx : 50 cy : 50 radius : 50 styles : circle : stroke : var(--theme-sys-color-secondary) stroke-width : 3em opacity : 0.5 # ================================================================ - toolset : column-icon position : cx : 25 cy : 50 tools : # ------------------------------------------------------------ - type : icon position : cx : 50 cy : 50 align : center icon_size : 45 entity_index : 0 variables : sak_layout_fce_person_use_entity_picture : '[[sak_layout_fce_person_use_entity_picture]]' animations : # Return current state, so always a match! - state : '[[[ return state; ]]]' styles : icon : # Set fill depending on being at home! fill : > [[[ if (['home', 'not_home'].includes(state)) return 'var(--theme-sys-color-primary)'; return 'var(--theme-sys-color-tertiary)'; ]]] # Hide icon if using entity_picture! display : > [[[ if (tool_config.variables.sak_layout_fce_person_use_entity_picture) return 'none'; return 'initial'; ]]] styles : icon : fill : var(--theme-sys-color-secondary) opacity : 0.9 # ------------------------------------------------------------ - type : usersvg position : cx : 50 cy : 50 height : 45 width : 45 entity_index : 0 variables : sak_layout_fce_person_use_entity_picture : '[[sak_layout_fce_person_use_entity_picture]]' clip_path : position : cx : 50 cy : 50 height : 40 # Slightly crop image (from 45->40) width : 40 radius : all : 20 # Radius 20 results in full circle style : 'images' images : # Fetch entity_picture from config or entity itself - default : > [[[ if (tool_config.variables.sak_layout_fce_person_use_entity_picture) { return (entity_config?.entity_picture || entity.attributes?.entity_picture || 'none'); } else { return 'none'; } ]]] animations : # Return current state, so always a match! - state : '[[[ return state; ]]]' image : default styles : icon : # Hide usersvg tool if using icon! display : > [[[ if (!tool_config.variables.sak_layout_fce_person_use_entity_picture) return 'none'; return 'initial'; ]]] # ================================================================ - toolset : zone-icon position : cx : 40 cy : 18 tools : # ------------------------------------------------------------ - type : circle position : cx : 50 cy : 50 radius : 14 entity_index : 0 animations : # Return current state, so always a match! - state : '[[[ return state; ]]]' styles : circle : # Set fill depending on being at home or some unwanted state! fill : > [[[ if (state == 'home') return 'var(--theme-sys-color-primary)'; if (state == 'not_home') return 'var(--brand-google-red)'; if (['unavailable', 'unknown'].includes(state)) return 'black'; return 'var(--theme-sys-color-tertiary)'; ]]] styles : circle : fill : var(--brand-google-red) stroke : var(--primary-background-color) stroke-width : 2em # ------------------------------------------------------------ - type : icon position : cx : 50 cy : 50 align : center icon_size : 18 entity_index : 0 variables : zone_ids : '[[sak_layout_fce_person_zone_entities]]' animations : # Return current state, so always a match! - state : '[[[ return state; ]]]' # Fetch icon of zone. If no match on zone, the state 'not_home' is given. # Check that state, and return the 'not home' icon in that case! icon : > [[[ if (state == 'not_home') return 'mdi:home-off-outline'; if (state == 'home') return states['zone.home'].attributes.icon; // For not home, we get the friendly name as input. Must find that one to retrieve // the zone's id... for (var i=0; i<tool_config.variables.zone_ids.length; i++) { var zone = states[tool_config.variables.zone_ids[i]]; if (zone && zone.attributes.friendly_name == state) { return states[zone.entity_id].attributes.icon; } } return 'mdi:map-marker-question'; ]]] styles : icon : fill : var(--primary-background-color) styles : icon : fill : var(--primary-background-color) # ================================================================ - toolset : column-name position : cx : 70 cy : 50 tools : # ------------------------------------------------------------ - type : name position : cx : 50 cy : 37 entity_index : 0 styles : name : text-anchor : start font-size : 30em font-weight : 700 opacity : 1 # ------------------------------------------------------------ - type : state position : cx : 50 cy : 70 entity_index : 0 show : uom : none styles : state : text-anchor : start font-size : 26em font-weight : 500 opacity : 0.7","title":"Person Card"},{"location":"design/functional-card-person-card/#visualization","text":"This card uses the Material 3 theme D06, TealBlue This card shows you some possibilities to apply JavaScript to the animations section The card seems like a standard, simple card, but isn't due to some Home Assistant functionalities and the possibilities of using either an icon or an entity picture for the person. The use of JavaScript to fetch the zone's Icon, to do some state dependent color changes and taking care of the \"use entity_picture yes/no\" setting are nice examples of the possibilities that JavaScript adds to tools. It are just a few lines, but very powerful! It also takes care of fetching the icon of additional zones (ie not the home zone). Description Aspect Ratio Target Size A card that shows in which zone a person is, or if in no known zone as away / not home. 4/1 Grid with 2 columns SAK Tool Used for Icon Background Icon (only in first screenshot) Circle The half circle, as the left part of the circle is cutoff by the card Icon Entity Icon. Animated, state dependent and only visible if no entity_picture should be displayed UserSvg Shows the Entity Picture. Only visible if entity_picture should be displayed Icon Zone Icon, ie where is the person according to the zone configuration. Animated, state dependent Name Name of Entity State State of entity","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Visualization"},{"location":"design/functional-card-person-card/#interaction","text":"Part Description Card All tools connected to an entity do show by default the \"more-info\" dialog once clicked","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Interaction"},{"location":"design/functional-card-person-card/#usage","text":"1.0.0-rc.3 Using the default mode: an icon for the person entity: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 - type : 'custom:swiss-army-knife-card' entities : - entity : person.marco name : 'Person' icon : mdi:face-man layout : template : name : sak_layout_fce_person variables : - sak_layout_fce_person_zone_entities : - zone.the_gym - zone.marco_work - zone.marco_parents - zone.zoo Using an entity_picture for the person entity. Picture can be defined here, or (default) the entity_picture defined for the person is used: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 - type : 'custom:swiss-army-knife-card' entities : - entity : person.tha_washer name : 'Tha Washer' icon : mdi:face-man entity_picture : \"/local/images/tha-washer.jpg\" layout : template : name : sak_layout_fce_person variables : - sak_layout_fce_person_use_entity_picture : true - sak_layout_fce_person_zone_entities : - zone.the_gym - zone.marco_work - zone.marco_parents - zone.zoo Data Default Required Description entities The person entity sak_layout_fce_person_zone_entities The list of zone entities for this person to be displayed. There is no limit, it is really a list which is used when the person is not at home! sak_layout_fce_person_use_entity_picture false If set to true, an entity picture is displayed instead of the persons icon. Default the picture configured for the person is used, but can be overridden by specifying an entity_picture in the entity configuration in the view","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Usage"},{"location":"design/functional-card-person-card/#yaml-template-definition","text":"1.0.0-rc.3 Full definition of layout templatesak_layout_fce_person : template : type : layout defaults : - sak_layout_fce_person_use_entity_picture : false layout : aspectratio : 4/1 toolsets : # ================================================================ # Extra background icon. Just for fun and filling some space - toolset : background-icon position : cx : 350 cy : 50 tools : # ------------------------------------------------------------ - type : icon position : cx : 50 cy : 50 align : center icon_size : 100 icon : mdi:map-marker-radius-outline styles : icon : fill : var(--theme-sys-elevation-surface-neutral2) # ================================================================ - toolset : half-circle position : cx : 0 # Center on cards border cy : 50 tools : # ------------------------------------------------------------ - type : circle position : cx : 50 cy : 50 radius : 50 styles : circle : stroke : var(--theme-sys-color-secondary) stroke-width : 3em opacity : 0.5 # ================================================================ - toolset : column-icon position : cx : 25 cy : 50 tools : # ------------------------------------------------------------ - type : icon position : cx : 50 cy : 50 align : center icon_size : 45 entity_index : 0 variables : sak_layout_fce_person_use_entity_picture : '[[sak_layout_fce_person_use_entity_picture]]' animations : # Return current state, so always a match! - state : '[[[ return state; ]]]' styles : icon : # Set fill depending on being at home! fill : > [[[ if (['home', 'not_home'].includes(state)) return 'var(--theme-sys-color-primary)'; return 'var(--theme-sys-color-tertiary)'; ]]] # Hide icon if using entity_picture! display : > [[[ if (tool_config.variables.sak_layout_fce_person_use_entity_picture) return 'none'; return 'initial'; ]]] styles : icon : fill : var(--theme-sys-color-secondary) opacity : 0.9 # ------------------------------------------------------------ - type : usersvg position : cx : 50 cy : 50 height : 45 width : 45 entity_index : 0 variables : sak_layout_fce_person_use_entity_picture : '[[sak_layout_fce_person_use_entity_picture]]' clip_path : position : cx : 50 cy : 50 height : 40 # Slightly crop image (from 45->40) width : 40 radius : all : 20 # Radius 20 results in full circle style : 'images' images : # Fetch entity_picture from config or entity itself - default : > [[[ if (tool_config.variables.sak_layout_fce_person_use_entity_picture) { return (entity_config?.entity_picture || entity.attributes?.entity_picture || 'none'); } else { return 'none'; } ]]] animations : # Return current state, so always a match! - state : '[[[ return state; ]]]' image : default styles : icon : # Hide usersvg tool if using icon! display : > [[[ if (!tool_config.variables.sak_layout_fce_person_use_entity_picture) return 'none'; return 'initial'; ]]] # ================================================================ - toolset : zone-icon position : cx : 40 cy : 18 tools : # ------------------------------------------------------------ - type : circle position : cx : 50 cy : 50 radius : 14 entity_index : 0 animations : # Return current state, so always a match! - state : '[[[ return state; ]]]' styles : circle : # Set fill depending on being at home or some unwanted state! fill : > [[[ if (state == 'home') return 'var(--theme-sys-color-primary)'; if (state == 'not_home') return 'var(--brand-google-red)'; if (['unavailable', 'unknown'].includes(state)) return 'black'; return 'var(--theme-sys-color-tertiary)'; ]]] styles : circle : fill : var(--brand-google-red) stroke : var(--primary-background-color) stroke-width : 2em # ------------------------------------------------------------ - type : icon position : cx : 50 cy : 50 align : center icon_size : 18 entity_index : 0 variables : zone_ids : '[[sak_layout_fce_person_zone_entities]]' animations : # Return current state, so always a match! - state : '[[[ return state; ]]]' # Fetch icon of zone. If no match on zone, the state 'not_home' is given. # Check that state, and return the 'not home' icon in that case! icon : > [[[ if (state == 'not_home') return 'mdi:home-off-outline'; if (state == 'home') return states['zone.home'].attributes.icon; // For not home, we get the friendly name as input. Must find that one to retrieve // the zone's id... for (var i=0; i<tool_config.variables.zone_ids.length; i++) { var zone = states[tool_config.variables.zone_ids[i]]; if (zone && zone.attributes.friendly_name == state) { return states[zone.entity_id].attributes.icon; } } return 'mdi:map-marker-question'; ]]] styles : icon : fill : var(--primary-background-color) styles : icon : fill : var(--primary-background-color) # ================================================================ - toolset : column-name position : cx : 70 cy : 50 tools : # ------------------------------------------------------------ - type : name position : cx : 50 cy : 37 entity_index : 0 styles : name : text-anchor : start font-size : 30em font-weight : 700 opacity : 1 # ------------------------------------------------------------ - type : state position : cx : 50 cy : 70 entity_index : 0 show : uom : none styles : state : text-anchor : start font-size : 26em font-weight : 500 opacity : 0.7","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n YAML Template Definition"},{"location":"design/functional-card-power-outlet1-card/","tags":["Design","Functional Card","Power Outlet Card"],"text":"Visualization \u00b6 This card uses the Material 3 theme D06, TealBlue Description Aspect Ratio Target Size A card that controls the on/off state of a power outlet, but also displays the power value. Both using a segmented arc and as state. 3/1 Grid with 2 columns SAK Tool Used for Circle The half circle, as the left part of the circle is cutoff by the card. Animated, state dependent Icon Entity Icon. Animated, state dependent Name Name of Entity State Secondary Info of entity Line Vertical line separator SegArc Half segmented arc showing the sensors state with 4 colors State Entity State Switch Switch to indicate and control the state. Animated, state dependent Interaction \u00b6 Part Description Switch Toggles the power switch Card All tools connected to an entity do show by default the \"more-info\" dialog once clicked Usage \u00b6 1.0.0-rc.3 Replace example entities with your entities! 1 2 3 4 5 6 7 8 9 10 11 12 13 14 - type : 'custom:swiss-army-knife-card' entities : - entity : sensor.washingmachine_energy_power name : 'PwrOutl #1' - entity : sensor.washingmachine_energy_power secondary_info : last_changed format : relative - entity : switch.washingmachine_energy name : 'Air' layout : template : name : sak_layout_fce_power_outlet1 variables : - sak_layout_power_outlet_segarc_scale_max_watt : 200 Data Default Required Description entities The single entity on the card sak_layout_power_outlet_segarc_scale_max_watt 200 The max value of the scale YAML Template Definition \u00b6 1.0.0-rc.3 Full definition of layout template 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 sak_layout_fce_power_outlet1 : template : type : layout defaults : - sak_layout_power_outlet_segarc_scale_max_watt : 200 layout : aspectratio : 3/1 toolsets : # ================================================================ - toolset : half-circle position : cx : 0 # Center on cards border cy : 50 tools : # ------------------------------------------------------------ - type : circle position : cx : 50 cy : 50 radius : 48 styles : circle : fill : none stroke : var(--theme-sys-color-secondary) stroke-width : 3em opacity : 0.5 # ================================================================ - toolset : column-icon position : cx : 25 cy : 50 tools : # ------------------------------------------------------------ - type : icon position : cx : 50 cy : 50 align : center icon_size : 30 entity_index : 0 styles : icon : fill : var(--theme-sys-color-secondary) # ================================================================ - toolset : column-name position : cx : 120 cy : 50 tools : # ------------------------------------------------------------ - type : name position : cx : 50 cy : 50 entity_index : 0 styles : name : text-anchor : middle font-size : 25em font-weight : 700 opacity : 1 # ------------------------------------------------------------ - type : state position : cx : 50 cy : 80 entity_index : 1 show : uom : none styles : state : text-anchor : middle font-size : 14em font-weight : 500 opacity : 0.7 # ================================================================ - toolset : line1 position : cx : 200 # On 1/3 of card width cy : 50 tools : # ------------------------------------------------------------ - type : line position : cx : 50 cy : 50 orientation : vertical length : 50 styles : line : fill : var(--primary-text-color) opacity : 0.5 # ================================================================ - toolset : column-power position : cx : 250 cy : 50 tools : # ------------------------------------------------------------------------ - type : state position : cx : 50 cy : 50 entity_index : 0 styles : state : text-anchor : middle font-size : 20em font-weight : 700 fill : var(--primary-text-color) uom : fill : var(--primary-text-color) font-weight : 700 # ------------------------------------------------------------------------ - type : 'segarc' position : cx : 50 cy : 50 start_angle : -90 # Arc clockwise from end_angle : 90 # -90 to 90 degrees width : 6 radius : 40 # Radius on 100x100 grid entity_index : 0 scale : min : 0 max : '[[sak_layout_power_outlet_segarc_scale_max_watt]]' width : 6 offset : 12 show : scale : false # Disable scale of segarc style : 'colorlist' segments : colorlist : gap : 1 # Gap between segments colors : - var(--theme-sys-palette-primary50) # Use 4 system palette - var(--theme-sys-palette-primary45) # colors that adhere - var(--theme-sys-palette-primary40) # to light and dark - var(--theme-sys-palette-primary35) # theme modes! styles : foreground : fill : darkgrey background : fill : var(--theme-sys-elevation-surface-neutral4) opacity : 1 # ================================================================ - toolset : switch position : cx : 250 # On 1/3 of card width cy : 80 scale : 3 tools : # ------------------------------------------------------------ - type : switch position : cx : 50 cy : 50 entity_index : 2 user_actions : tap_action : haptic : light actions : - action : call-service service : switch.toggle","title":"Power Outlet Card #1"},{"location":"design/functional-card-power-outlet1-card/#visualization","text":"This card uses the Material 3 theme D06, TealBlue Description Aspect Ratio Target Size A card that controls the on/off state of a power outlet, but also displays the power value. Both using a segmented arc and as state. 3/1 Grid with 2 columns SAK Tool Used for Circle The half circle, as the left part of the circle is cutoff by the card. Animated, state dependent Icon Entity Icon. Animated, state dependent Name Name of Entity State Secondary Info of entity Line Vertical line separator SegArc Half segmented arc showing the sensors state with 4 colors State Entity State Switch Switch to indicate and control the state. Animated, state dependent","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Visualization"},{"location":"design/functional-card-power-outlet1-card/#interaction","text":"Part Description Switch Toggles the power switch Card All tools connected to an entity do show by default the \"more-info\" dialog once clicked","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Interaction"},{"location":"design/functional-card-power-outlet1-card/#usage","text":"1.0.0-rc.3 Replace example entities with your entities! 1 2 3 4 5 6 7 8 9 10 11 12 13 14 - type : 'custom:swiss-army-knife-card' entities : - entity : sensor.washingmachine_energy_power name : 'PwrOutl #1' - entity : sensor.washingmachine_energy_power secondary_info : last_changed format : relative - entity : switch.washingmachine_energy name : 'Air' layout : template : name : sak_layout_fce_power_outlet1 variables : - sak_layout_power_outlet_segarc_scale_max_watt : 200 Data Default Required Description entities The single entity on the card sak_layout_power_outlet_segarc_scale_max_watt 200 The max value of the scale","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Usage"},{"location":"design/functional-card-power-outlet1-card/#yaml-template-definition","text":"1.0.0-rc.3 Full definition of layout templatesak_layout_fce_power_outlet1 : template : type : layout defaults : - sak_layout_power_outlet_segarc_scale_max_watt : 200 layout : aspectratio : 3/1 toolsets : # ================================================================ - toolset : half-circle position : cx : 0 # Center on cards border cy : 50 tools : # ------------------------------------------------------------ - type : circle position : cx : 50 cy : 50 radius : 48 styles : circle : fill : none stroke : var(--theme-sys-color-secondary) stroke-width : 3em opacity : 0.5 # ================================================================ - toolset : column-icon position : cx : 25 cy : 50 tools : # ------------------------------------------------------------ - type : icon position : cx : 50 cy : 50 align : center icon_size : 30 entity_index : 0 styles : icon : fill : var(--theme-sys-color-secondary) # ================================================================ - toolset : column-name position : cx : 120 cy : 50 tools : # ------------------------------------------------------------ - type : name position : cx : 50 cy : 50 entity_index : 0 styles : name : text-anchor : middle font-size : 25em font-weight : 700 opacity : 1 # ------------------------------------------------------------ - type : state position : cx : 50 cy : 80 entity_index : 1 show : uom : none styles : state : text-anchor : middle font-size : 14em font-weight : 500 opacity : 0.7 # ================================================================ - toolset : line1 position : cx : 200 # On 1/3 of card width cy : 50 tools : # ------------------------------------------------------------ - type : line position : cx : 50 cy : 50 orientation : vertical length : 50 styles : line : fill : var(--primary-text-color) opacity : 0.5 # ================================================================ - toolset : column-power position : cx : 250 cy : 50 tools : # ------------------------------------------------------------------------ - type : state position : cx : 50 cy : 50 entity_index : 0 styles : state : text-anchor : middle font-size : 20em font-weight : 700 fill : var(--primary-text-color) uom : fill : var(--primary-text-color) font-weight : 700 # ------------------------------------------------------------------------ - type : 'segarc' position : cx : 50 cy : 50 start_angle : -90 # Arc clockwise from end_angle : 90 # -90 to 90 degrees width : 6 radius : 40 # Radius on 100x100 grid entity_index : 0 scale : min : 0 max : '[[sak_layout_power_outlet_segarc_scale_max_watt]]' width : 6 offset : 12 show : scale : false # Disable scale of segarc style : 'colorlist' segments : colorlist : gap : 1 # Gap between segments colors : - var(--theme-sys-palette-primary50) # Use 4 system palette - var(--theme-sys-palette-primary45) # colors that adhere - var(--theme-sys-palette-primary40) # to light and dark - var(--theme-sys-palette-primary35) # theme modes! styles : foreground : fill : darkgrey background : fill : var(--theme-sys-elevation-surface-neutral4) opacity : 1 # ================================================================ - toolset : switch position : cx : 250 # On 1/3 of card width cy : 80 scale : 3 tools : # ------------------------------------------------------------ - type : switch position : cx : 50 cy : 50 entity_index : 2 user_actions : tap_action : haptic : light actions : - action : call-service service : switch.toggle","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n YAML Template Definition"},{"location":"design/functional-card-power-outlet2-card/","tags":["Design","Functional Card","Power Outlet Card"],"text":"Visualization \u00b6 This card uses the Material 3 theme D06, TealBlue Description Aspect Ratio Target Size A card that controls the on/off state of a power outlet, but also displays the power value. Both using a segmented arc and as state. 3/1 Grid with 2 columns SAK Tool Used for Circle The half circle, as the left part of the circle is cutoff by the card. Animated, state dependent Icon Entity Icon. Animated, state dependent Switch Switch to indicate and control the state. Animated, state dependent Name Name of Entity State Secondary Info of entity Line Vertical line separator SegArc Segmented arc showing the sensors state with a single color Icon Entity Icon State Entity State Interaction \u00b6 Part Description Card All tools connected to an entity do show by default the \"more-info\" dialog once clicked Usage \u00b6 1.0.0-rc.3 Replace example entities with your entities! 1 2 3 4 5 6 7 8 9 10 11 12 13 14 - type : 'custom:swiss-army-knife-card' entities : - entity : sensor.kitchen_group_energy_power name : 'PwrOutl #2' - entity : sensor.kitchen_group_energy_power secondary_info : last_changed format : relative - entity : switch.washingmachine_energy name : 'Air #2' layout : template : name : sak_layout_fce_power_outlet2 variables : - sak_layout_power_outlet_segarc_scale_max_watt : 200 Data Default Required Description entities The single entity on the card sak_layout_power_outlet_segarc_scale_max_watt 200 The max value of the scale YAML Template Definition \u00b6 1.0.0-rc.3 Full definition of layout templatesak_layout_fce_power_outlet2 : template : type : layout defaults : - sak_layout_power_outlet_segarc_scale_max_watt : 200 layout : aspectratio : 3/1 toolsets : # ================================================================ - toolset : column-icon position : cx : 0 cy : 50 tools : # ------------------------------------------------------------ - type : circle position : cx : 50 cy : 50 radius : 50 entity_index : 2 animations : - state : 'on' styles : circle : fill : var(--theme-sys-color-primary) # animation: flash 2s ease-in-out 5 - state : 'off' styles : circle : fill : var(--theme-sys-color-secondary-container) # Remove user actions part to just display the state # or disable pointer-events via a class or style # Using a class enables the use of variables that can # disable pointer-events to none! user_actions : tap_action : haptic : light actions : - action : call-service service : switch.toggle styles : circle : fill : var(--theme-sys-color-secondary-container) stroke : var(--theme-sys-color-secondary) stroke-width : 0em # ------------------------------------------------------------ - type : icon position : cx : 75 cy : 50 align : center icon_size : 30 entity_index : 2 animations : - state : 'on' styles : icon : # animation: spin 3s linear infinite fill : var(--primary-background-color) - state : 'off' styles : icon : # fill: var(--theme-sys-color-on-secondary-container) fill : var(--theme-sys-color-secondary) styles : icon : fill : var(--theme-sys-color-secondary) # opacity: 0.7 pointer-events : none # ================================================================ - toolset : switch position : cx : 25 # On 1/3 of card width cy : 75 scale : 2 tools : # ------------------------------------------------------------ - type : switch position : cx : 50 cy : 50 orientation : 'horizontal' track : width : 15 height : 5 radius : 2.5 thumb : width : 3 height : 3 radius : 2.5 offset : 4.5 entity_index : 2 user_actions : tap_action : haptic : light actions : - action : call-service service : switch.toggle styles : track : --switch-checked-track-color : var(--primary-background-color) --switch-unchecked-track-color : var(--theme-sys-color-secondary) # --switch-checked-button-color: thumb : --thumb-stroke : 'var(--primary-background-color)' # ================================================================ - toolset : column-name position : cx : 120 cy : 50 tools : # ------------------------------------------------------------ - type : name position : cx : 50 cy : 50 entity_index : 0 styles : name : text-anchor : middle font-size : 25em font-weight : 700 opacity : 1 # ------------------------------------------------------------ - type : state position : cx : 50 cy : 80 entity_index : 1 show : uom : none styles : state : text-anchor : middle font-size : 14em font-weight : 500 opacity : 0.7 # ================================================================ - toolset : line1 position : cx : 200 # On 1/3 of card width cy : 50 tools : # ------------------------------------------------------------ - type : line position : cx : 50 cy : 50 orientation : vertical length : 50 styles : line : fill : var(--primary-text-color) opacity : 0.5 # ================================================================ - toolset : column-load template : name : toolset_tutorial_02_part1 variables : - var_entity_index : 0 - var_toolset_position_cx : 250 - var_segarc_scale_max : '[[sak_layout_power_outlet_segarc_scale_max_watt]]'","title":"Power Outlet Card #2"},{"location":"design/functional-card-power-outlet2-card/#visualization","text":"This card uses the Material 3 theme D06, TealBlue Description Aspect Ratio Target Size A card that controls the on/off state of a power outlet, but also displays the power value. Both using a segmented arc and as state. 3/1 Grid with 2 columns SAK Tool Used for Circle The half circle, as the left part of the circle is cutoff by the card. Animated, state dependent Icon Entity Icon. Animated, state dependent Switch Switch to indicate and control the state. Animated, state dependent Name Name of Entity State Secondary Info of entity Line Vertical line separator SegArc Segmented arc showing the sensors state with a single color Icon Entity Icon State Entity State","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Visualization"},{"location":"design/functional-card-power-outlet2-card/#interaction","text":"Part Description Card All tools connected to an entity do show by default the \"more-info\" dialog once clicked","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Interaction"},{"location":"design/functional-card-power-outlet2-card/#usage","text":"1.0.0-rc.3 Replace example entities with your entities! 1 2 3 4 5 6 7 8 9 10 11 12 13 14 - type : 'custom:swiss-army-knife-card' entities : - entity : sensor.kitchen_group_energy_power name : 'PwrOutl #2' - entity : sensor.kitchen_group_energy_power secondary_info : last_changed format : relative - entity : switch.washingmachine_energy name : 'Air #2' layout : template : name : sak_layout_fce_power_outlet2 variables : - sak_layout_power_outlet_segarc_scale_max_watt : 200 Data Default Required Description entities The single entity on the card sak_layout_power_outlet_segarc_scale_max_watt 200 The max value of the scale","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Usage"},{"location":"design/functional-card-power-outlet2-card/#yaml-template-definition","text":"1.0.0-rc.3 Full definition of layout templatesak_layout_fce_power_outlet2 : template : type : layout defaults : - sak_layout_power_outlet_segarc_scale_max_watt : 200 layout : aspectratio : 3/1 toolsets : # ================================================================ - toolset : column-icon position : cx : 0 cy : 50 tools : # ------------------------------------------------------------ - type : circle position : cx : 50 cy : 50 radius : 50 entity_index : 2 animations : - state : 'on' styles : circle : fill : var(--theme-sys-color-primary) # animation: flash 2s ease-in-out 5 - state : 'off' styles : circle : fill : var(--theme-sys-color-secondary-container) # Remove user actions part to just display the state # or disable pointer-events via a class or style # Using a class enables the use of variables that can # disable pointer-events to none! user_actions : tap_action : haptic : light actions : - action : call-service service : switch.toggle styles : circle : fill : var(--theme-sys-color-secondary-container) stroke : var(--theme-sys-color-secondary) stroke-width : 0em # ------------------------------------------------------------ - type : icon position : cx : 75 cy : 50 align : center icon_size : 30 entity_index : 2 animations : - state : 'on' styles : icon : # animation: spin 3s linear infinite fill : var(--primary-background-color) - state : 'off' styles : icon : # fill: var(--theme-sys-color-on-secondary-container) fill : var(--theme-sys-color-secondary) styles : icon : fill : var(--theme-sys-color-secondary) # opacity: 0.7 pointer-events : none # ================================================================ - toolset : switch position : cx : 25 # On 1/3 of card width cy : 75 scale : 2 tools : # ------------------------------------------------------------ - type : switch position : cx : 50 cy : 50 orientation : 'horizontal' track : width : 15 height : 5 radius : 2.5 thumb : width : 3 height : 3 radius : 2.5 offset : 4.5 entity_index : 2 user_actions : tap_action : haptic : light actions : - action : call-service service : switch.toggle styles : track : --switch-checked-track-color : var(--primary-background-color) --switch-unchecked-track-color : var(--theme-sys-color-secondary) # --switch-checked-button-color: thumb : --thumb-stroke : 'var(--primary-background-color)' # ================================================================ - toolset : column-name position : cx : 120 cy : 50 tools : # ------------------------------------------------------------ - type : name position : cx : 50 cy : 50 entity_index : 0 styles : name : text-anchor : middle font-size : 25em font-weight : 700 opacity : 1 # ------------------------------------------------------------ - type : state position : cx : 50 cy : 80 entity_index : 1 show : uom : none styles : state : text-anchor : middle font-size : 14em font-weight : 500 opacity : 0.7 # ================================================================ - toolset : line1 position : cx : 200 # On 1/3 of card width cy : 50 tools : # ------------------------------------------------------------ - type : line position : cx : 50 cy : 50 orientation : vertical length : 50 styles : line : fill : var(--primary-text-color) opacity : 0.5 # ================================================================ - toolset : column-load template : name : toolset_tutorial_02_part1 variables : - var_entity_index : 0 - var_toolset_position_cx : 250 - var_segarc_scale_max : '[[sak_layout_power_outlet_segarc_scale_max_watt]]'","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n YAML Template Definition"},{"location":"design/functional-card-power-outlet3-card/","tags":["Design","Functional Card","Power Outlet Card"],"text":"Visualization \u00b6 This card uses the Material 3 theme D06, TealBlue Description Aspect Ratio Target Size A card that displays the on/off state of a power outlet, but also displays the power value. Both using a segmented arc and as state. 4/1 Grid with 2 columns SAK Tool Used for Circle The half circle, as the left part of the circle is cutoff by the card. Animated, state dependent Icon Entity Icon. Animated, state dependent SegArc Minimalistic implementation of segmented arc showing the sensors state with a single color Name Name of Entity State Value of entity Interaction \u00b6 Part Description Card All tools connected to an entity do show by default the \"more-info\" dialog once clicked Usage \u00b6 1.0.0-rc.3 Replace example entities with your entities! 1 2 3 4 5 6 7 8 9 10 11 12 13 - type : 'custom:swiss-army-knife-card' entities : - entity : sensor.dsmr_reading_electricity_currently_delivered name : 'PwrOutl #3' - entity : switch.washingmachine_energy name : 'Kitchen Switch' - entity : sensor.washingmachine_energy_power # Just for the demo!!!! name : 'Kitchen Switch #2' layout : template : name : sak_layout_fce_power_outlet3 variables : - sak_layout_power_outlet_segarc_scale_max_watt : 200 Data Default Required Description entities The single entity on the card sak_layout_power_outlet_segarc_scale_max_watt 200 The max value of the scale YAML Template Definition \u00b6 1.0.0-rc.3 Full definition of layout template 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 sak_layout_fce_power_outlet3 : template : type : layout defaults : - sak_layout_power_outlet_segarc_scale_max_watt : 200 layout : aspectratio : 4/1 toolsets : # ================================================================ - toolset : half-circle position : cx : 0 # Center on cards border cy : 50 tools : # ------------------------------------------------------------ - type : circle position : cx : 50 cy : 50 radius : 50 entity_index : 1 animations : - state : 'on' styles : circle : fill : var(--theme-sys-color-primary) - state : 'off' styles : circle : fill : var(--theme-sys-elevation-surface-neutral4) styles : circle : stroke : none fill : var(--theme-sys-elevation-surface-neutral4) # ------------------------------------------------------------ - type : 'segarc' id : 0 position : cx : 50 cy : 50 start_angle : 25 end_angle : 155 width : 4 radius : 58 entity_index : 2 scale : min : 0 max : '[[sak_layout_power_outlet_segarc_scale_max_watt]]' width : 6 offset : 12 show : scale : false style : 'colorlist' segments : colorlist : gap : 1 colors : - var(--theme-sys-color-secondary) styles : foreground : fill : darkgrey background : fill : var(--theme-sys-color-secondary) opacity : 0.5 # ================================================================ - toolset : column-icon position : cx : 25 cy : 50 tools : # ------------------------------------------------------------ - type : icon position : cx : 50 cy : 50 align : center icon_size : 45 entity_index : 1 animations : - state : 'on' styles : icon : fill : var(--primary-background-color) - state : 'off' styles : icon : fill : var(--theme-sys-color-secondary) styles : icon : fill : var(--theme-sys-color-secondary) opacity : 0.9 # ================================================================ - toolset : column-name position : cx : 70 # Left part = 75, so 75+(300-75)/2 cy : 50 tools : # ------------------------------------------------------------ - type : name position : cx : 50 cy : 37 entity_index : 0 styles : name : text-anchor : start font-size : 30em font-weight : 700 opacity : 1 # ------------------------------------------------------------ - type : state position : cx : 50 cy : 70 entity_index : 2 styles : state : text-anchor : start font-size : 26em font-weight : 500 opacity : 0.7","title":"Power Outlet Card #3"},{"location":"design/functional-card-power-outlet3-card/#visualization","text":"This card uses the Material 3 theme D06, TealBlue Description Aspect Ratio Target Size A card that displays the on/off state of a power outlet, but also displays the power value. Both using a segmented arc and as state. 4/1 Grid with 2 columns SAK Tool Used for Circle The half circle, as the left part of the circle is cutoff by the card. Animated, state dependent Icon Entity Icon. Animated, state dependent SegArc Minimalistic implementation of segmented arc showing the sensors state with a single color Name Name of Entity State Value of entity","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Visualization"},{"location":"design/functional-card-power-outlet3-card/#interaction","text":"Part Description Card All tools connected to an entity do show by default the \"more-info\" dialog once clicked","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Interaction"},{"location":"design/functional-card-power-outlet3-card/#usage","text":"1.0.0-rc.3 Replace example entities with your entities! 1 2 3 4 5 6 7 8 9 10 11 12 13 - type : 'custom:swiss-army-knife-card' entities : - entity : sensor.dsmr_reading_electricity_currently_delivered name : 'PwrOutl #3' - entity : switch.washingmachine_energy name : 'Kitchen Switch' - entity : sensor.washingmachine_energy_power # Just for the demo!!!! name : 'Kitchen Switch #2' layout : template : name : sak_layout_fce_power_outlet3 variables : - sak_layout_power_outlet_segarc_scale_max_watt : 200 Data Default Required Description entities The single entity on the card sak_layout_power_outlet_segarc_scale_max_watt 200 The max value of the scale","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Usage"},{"location":"design/functional-card-power-outlet3-card/#yaml-template-definition","text":"1.0.0-rc.3 Full definition of layout template 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 sak_layout_fce_power_outlet3 : template : type : layout defaults : - sak_layout_power_outlet_segarc_scale_max_watt : 200 layout : aspectratio : 4/1 toolsets : # ================================================================ - toolset : half-circle position : cx : 0 # Center on cards border cy : 50 tools : # ------------------------------------------------------------ - type : circle position : cx : 50 cy : 50 radius : 50 entity_index : 1 animations : - state : 'on' styles : circle : fill : var(--theme-sys-color-primary) - state : 'off' styles : circle : fill : var(--theme-sys-elevation-surface-neutral4) styles : circle : stroke : none fill : var(--theme-sys-elevation-surface-neutral4) # ------------------------------------------------------------ - type : 'segarc' id : 0 position : cx : 50 cy : 50 start_angle : 25 end_angle : 155 width : 4 radius : 58 entity_index : 2 scale : min : 0 max : '[[sak_layout_power_outlet_segarc_scale_max_watt]]' width : 6 offset : 12 show : scale : false style : 'colorlist' segments : colorlist : gap : 1 colors : - var(--theme-sys-color-secondary) styles : foreground : fill : darkgrey background : fill : var(--theme-sys-color-secondary) opacity : 0.5 # ================================================================ - toolset : column-icon position : cx : 25 cy : 50 tools : # ------------------------------------------------------------ - type : icon position : cx : 50 cy : 50 align : center icon_size : 45 entity_index : 1 animations : - state : 'on' styles : icon : fill : var(--primary-background-color) - state : 'off' styles : icon : fill : var(--theme-sys-color-secondary) styles : icon : fill : var(--theme-sys-color-secondary) opacity : 0.9 # ================================================================ - toolset : column-name position : cx : 70 # Left part = 75, so 75+(300-75)/2 cy : 50 tools : # ------------------------------------------------------------ - type : name position : cx : 50 cy : 37 entity_index : 0 styles : name : text-anchor : start font-size : 30em font-weight : 700 opacity : 1 # ------------------------------------------------------------ - type : state position : cx : 50 cy : 70 entity_index : 2 styles : state : text-anchor : start font-size : 26em font-weight : 500 opacity : 0.7","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n YAML Template Definition"},{"location":"design/functional-card-power-outlet4-card/","tags":["Design","Functional Card","Power Outlet Card"],"text":"Visualization \u00b6 This card uses the Material 3 theme D06, TealBlue Description Aspect Ratio Target Size A card that controls the on/off state of a power outlet, but also displays the power value. Both using a segmented arc and as state. The 24 hour history is shown in the background 4/1 Grid with 2 columns SAK Tool Used for Circle The half circle, as the left part of the circle is cutoff by the card. Animated, state dependent Icon Entity Icon. Animated, state dependent Switch Switch to indicate and control the state. Animated, state dependent SegArc Minimalistic implementation of segmented arc showing the sensors state with a single color Name Name of Entity State Value of entity Bar Shows the 24 hour history in the background Interaction \u00b6 Part Description Left Circle Toggles the on/off state of the power outlet Card All tools connected to an entity do show by default the \"more-info\" dialog once clicked Usage \u00b6 1.0.0-rc.3 Replace example entities with your entities! 1 2 3 4 5 6 7 8 9 10 11 - type : 'custom:swiss-army-knife-card' entities : - entity : sensor.washingmachine_energy_power name : 'PwrOutl #4' - entity : switch.washingmachine_energy name : 'Kitchen Switch #2' layout : template : name : sak_layout_fce_power_outlet4 variables : - sak_layout_power_outlet_segarc_scale_max_watt : 200 Data Default Required Description entities The single entity on the card sak_layout_power_outlet_segarc_scale_max_watt 200 The max value of the scale YAML Template Definition \u00b6 1.0.0-rc.3 Full definition of layout templatesak_layout_fce_power_outlet4 : template : type : layout defaults : - sak_layout_power_outlet_segarc_scale_max_watt : 200 layout : aspectratio : 4/1 toolsets : # ================================================================ - toolset : half-circle position : cx : 0 # Center on cards border cy : 50 tools : # ------------------------------------------------------------ - type : circle position : cx : 50 cy : 50 radius : 50 entity_index : 1 animations : - state : 'on' styles : circle : fill : var(--theme-sys-color-primary) - state : 'off' styles : circle : fill : var(--theme-sys-color-secondary-container) user_actions : tap_action : haptic : light actions : - action : call-service service : switch.toggle styles : circle : stroke : none fill : var(--theme-sys-elevation-surface-neutral4) # ------------------------------------------------------------ - type : 'segarc' id : 0 position : cx : 50 cy : 50 start_angle : 25 end_angle : 155 width : 4 radius : 58 entity_index : 0 scale : min : 0 max : '[[sak_layout_power_outlet_segarc_scale_max_watt]]' width : 6 offset : 12 show : scale : false style : 'colorlist' segments : colorlist : gap : 1 colors : - var(--theme-sys-color-secondary) styles : foreground : fill : darkgrey background : fill : var(--theme-sys-color-secondary) opacity : 0.5 # ================================================================ - toolset : column-icon position : cx : 25 cy : 45 tools : # ------------------------------------------------------------ - type : icon position : cx : 50 cy : 50 align : center icon_size : 45 entity_index : 1 animations : - state : 'on' styles : icon : fill : var(--primary-background-color) - state : 'off' styles : icon : fill : var(--theme-sys-color-secondary) styles : icon : fill : var(--theme-sys-color-secondary) pointer-events : none # ================================================================ - toolset : switch position : cx : 25 # On 1/3 of card width cy : 75 scale : 1.8 tools : # ------------------------------------------------------------ - type : switch position : cx : 50 cy : 50 orientation : 'horizontal' track : width : 15 height : 5 radius : 2.5 thumb : width : 3 height : 3 radius : 2.5 offset : 4.5 entity_index : 1 user_actions : tap_action : haptic : light actions : - action : call-service service : switch.toggle styles : track : --switch-checked-track-color : var(--primary-background-color) --switch-unchecked-track-color : var(--theme-sys-color-secondary) # --switch-checked-button-color: thumb : --thumb-stroke : 'var(--primary-background-color)' # ================================================================ - toolset : column-bar position : cx : 235 # 400-70/2 + 70=235 cy : 50 tools : # ------------------------------------------------------------ - type : bar id : 1 entity_index : 0 position : orientation : vertical cx : 50 cy : 50 width : 330 # 400-70=330 height : 100 margin : 1 hours : 24 barhours : 1 show : style : 'minmaxgradient' minmaxgradient : fill : true colors : min : var(--theme-sys-palette-secondary85) max : var(--theme-sys-palette-secondary65) styles : bar : stroke-linecap : square opacity : 0.25 # ================================================================ - toolset : column-name position : cx : 70 # Left part = 75, so 75+(300-75)/2 cy : 50 tools : # ------------------------------------------------------------ - type : name position : cx : 50 cy : 37 entity_index : 0 styles : name : text-anchor : start font-size : 30em font-weight : 700 # ------------------------------------------------------------ - type : state position : cx : 50 cy : 70 entity_index : 0 styles : state : text-anchor : start font-size : 26em font-weight : 700 opacity : 0.8","title":"Power Outlet Card #4"},{"location":"design/functional-card-power-outlet4-card/#visualization","text":"This card uses the Material 3 theme D06, TealBlue Description Aspect Ratio Target Size A card that controls the on/off state of a power outlet, but also displays the power value. Both using a segmented arc and as state. The 24 hour history is shown in the background 4/1 Grid with 2 columns SAK Tool Used for Circle The half circle, as the left part of the circle is cutoff by the card. Animated, state dependent Icon Entity Icon. Animated, state dependent Switch Switch to indicate and control the state. Animated, state dependent SegArc Minimalistic implementation of segmented arc showing the sensors state with a single color Name Name of Entity State Value of entity Bar Shows the 24 hour history in the background","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Visualization"},{"location":"design/functional-card-power-outlet4-card/#interaction","text":"Part Description Left Circle Toggles the on/off state of the power outlet Card All tools connected to an entity do show by default the \"more-info\" dialog once clicked","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Interaction"},{"location":"design/functional-card-power-outlet4-card/#usage","text":"1.0.0-rc.3 Replace example entities with your entities! 1 2 3 4 5 6 7 8 9 10 11 - type : 'custom:swiss-army-knife-card' entities : - entity : sensor.washingmachine_energy_power name : 'PwrOutl #4' - entity : switch.washingmachine_energy name : 'Kitchen Switch #2' layout : template : name : sak_layout_fce_power_outlet4 variables : - sak_layout_power_outlet_segarc_scale_max_watt : 200 Data Default Required Description entities The single entity on the card sak_layout_power_outlet_segarc_scale_max_watt 200 The max value of the scale","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Usage"},{"location":"design/functional-card-power-outlet4-card/#yaml-template-definition","text":"1.0.0-rc.3 Full definition of layout templatesak_layout_fce_power_outlet4 : template : type : layout defaults : - sak_layout_power_outlet_segarc_scale_max_watt : 200 layout : aspectratio : 4/1 toolsets : # ================================================================ - toolset : half-circle position : cx : 0 # Center on cards border cy : 50 tools : # ------------------------------------------------------------ - type : circle position : cx : 50 cy : 50 radius : 50 entity_index : 1 animations : - state : 'on' styles : circle : fill : var(--theme-sys-color-primary) - state : 'off' styles : circle : fill : var(--theme-sys-color-secondary-container) user_actions : tap_action : haptic : light actions : - action : call-service service : switch.toggle styles : circle : stroke : none fill : var(--theme-sys-elevation-surface-neutral4) # ------------------------------------------------------------ - type : 'segarc' id : 0 position : cx : 50 cy : 50 start_angle : 25 end_angle : 155 width : 4 radius : 58 entity_index : 0 scale : min : 0 max : '[[sak_layout_power_outlet_segarc_scale_max_watt]]' width : 6 offset : 12 show : scale : false style : 'colorlist' segments : colorlist : gap : 1 colors : - var(--theme-sys-color-secondary) styles : foreground : fill : darkgrey background : fill : var(--theme-sys-color-secondary) opacity : 0.5 # ================================================================ - toolset : column-icon position : cx : 25 cy : 45 tools : # ------------------------------------------------------------ - type : icon position : cx : 50 cy : 50 align : center icon_size : 45 entity_index : 1 animations : - state : 'on' styles : icon : fill : var(--primary-background-color) - state : 'off' styles : icon : fill : var(--theme-sys-color-secondary) styles : icon : fill : var(--theme-sys-color-secondary) pointer-events : none # ================================================================ - toolset : switch position : cx : 25 # On 1/3 of card width cy : 75 scale : 1.8 tools : # ------------------------------------------------------------ - type : switch position : cx : 50 cy : 50 orientation : 'horizontal' track : width : 15 height : 5 radius : 2.5 thumb : width : 3 height : 3 radius : 2.5 offset : 4.5 entity_index : 1 user_actions : tap_action : haptic : light actions : - action : call-service service : switch.toggle styles : track : --switch-checked-track-color : var(--primary-background-color) --switch-unchecked-track-color : var(--theme-sys-color-secondary) # --switch-checked-button-color: thumb : --thumb-stroke : 'var(--primary-background-color)' # ================================================================ - toolset : column-bar position : cx : 235 # 400-70/2 + 70=235 cy : 50 tools : # ------------------------------------------------------------ - type : bar id : 1 entity_index : 0 position : orientation : vertical cx : 50 cy : 50 width : 330 # 400-70=330 height : 100 margin : 1 hours : 24 barhours : 1 show : style : 'minmaxgradient' minmaxgradient : fill : true colors : min : var(--theme-sys-palette-secondary85) max : var(--theme-sys-palette-secondary65) styles : bar : stroke-linecap : square opacity : 0.25 # ================================================================ - toolset : column-name position : cx : 70 # Left part = 75, so 75+(300-75)/2 cy : 50 tools : # ------------------------------------------------------------ - type : name position : cx : 50 cy : 37 entity_index : 0 styles : name : text-anchor : start font-size : 30em font-weight : 700 # ------------------------------------------------------------ - type : state position : cx : 50 cy : 70 entity_index : 0 styles : state : text-anchor : start font-size : 26em font-weight : 700 opacity : 0.8","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n YAML Template Definition"},{"location":"design/functional-card-scene-card/","tags":["Design","Functional Card","Scene/Script Card"],"text":"This card uses the Material 3 theme D06, TealBlue Its a card, but it just demonstrates how to use the scene user action on a tool Description Aspect Ratio Target Size A card that shows an icon and text, and has a scene user action. 3/1 Grid with 3 columns SAK Tool Used for Icon Some fixed Icon Text Scene text RectEx A rectangle covering the whole card to act as a button to handle the activate scene action Interaction \u00b6 Part Description Card This card activates the scene for you Usage \u00b6 1.0.0-rc.3 1 2 3 4 5 6 7 8 9 - type : 'custom:swiss-army-knife-card' layout : template : name : sak_layout_fce_scene variables : - sak_layout_scene_icon : mdi:script - sak_layout_scene_text : 'Scene' - sak_layout_scene_id : 'scene.unknown' - sak_layout_scene_transition : 2.5 Data Default Required Description sak_layout_scene_icon mdi:script The used icon on the card sak_layout_scene_text The text displayed on the card sak_layout_scene_id The entity id of the scene that should be called sak_layout_scene_transition 2.5 The scene transition time in seconds YAML Template Definition \u00b6 1.0.0-rc.3 Full definition of layout template 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 sak_layout_fce_scene : template : type : layout defaults : - sak_layout_scene_icon : mdi:script - sak_layout_scene_text : 'Scene' - sak_layout_scene_id : 'scene.unknown' - sak_layout_scene_transition : 2.5 layout : styles : card : border-radius : 25em background : var(--theme-sys-color-secondary-container) aspectratio : 3/1 toolsets : # ================================================================ - toolset : column-icon position : cx : 50 cy : 50 tools : # ------------------------------------------------------------ - type : icon position : cx : 50 cy : 50 align : center icon_size : 50 icon : '[[sak_layout_scene_icon]]' styles : icon : fill : var(--secondary-text-color) opacity : 0.9 # ================================================================ - toolset : button-text position : cx : 175 cy : 50 tools : # ------------------------------------------------------------ - type : text position : cx : 50 cy : 50 text : '[[sak_layout_scene_text]]' styles : text : text-anchor : middle font-size : 30em font-weight : 700 opacity : 1 # ================================================================ - toolset : button-cover position : cx : 150 cy : 50 tools : # ------------------------------------------------------------ - type : rectex position : cx : 50 cy : 50 height : 100 width : 300 user_actions : tap_action : haptic : light actions : - action : navigate service : scene.turn_on service_data : entity_id : '[[sak_layout_scene_id]]' transition : '[[sak_layout_scene_transition]]' styles : rectex : fill : rgba(0,0,0,0)","title":"Scene Card"},{"location":"design/functional-card-scene-card/#interaction","text":"Part Description Card This card activates the scene for you","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Interaction"},{"location":"design/functional-card-scene-card/#usage","text":"1.0.0-rc.3 1 2 3 4 5 6 7 8 9 - type : 'custom:swiss-army-knife-card' layout : template : name : sak_layout_fce_scene variables : - sak_layout_scene_icon : mdi:script - sak_layout_scene_text : 'Scene' - sak_layout_scene_id : 'scene.unknown' - sak_layout_scene_transition : 2.5 Data Default Required Description sak_layout_scene_icon mdi:script The used icon on the card sak_layout_scene_text The text displayed on the card sak_layout_scene_id The entity id of the scene that should be called sak_layout_scene_transition 2.5 The scene transition time in seconds","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Usage"},{"location":"design/functional-card-scene-card/#yaml-template-definition","text":"1.0.0-rc.3 Full definition of layout template 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 sak_layout_fce_scene : template : type : layout defaults : - sak_layout_scene_icon : mdi:script - sak_layout_scene_text : 'Scene' - sak_layout_scene_id : 'scene.unknown' - sak_layout_scene_transition : 2.5 layout : styles : card : border-radius : 25em background : var(--theme-sys-color-secondary-container) aspectratio : 3/1 toolsets : # ================================================================ - toolset : column-icon position : cx : 50 cy : 50 tools : # ------------------------------------------------------------ - type : icon position : cx : 50 cy : 50 align : center icon_size : 50 icon : '[[sak_layout_scene_icon]]' styles : icon : fill : var(--secondary-text-color) opacity : 0.9 # ================================================================ - toolset : button-text position : cx : 175 cy : 50 tools : # ------------------------------------------------------------ - type : text position : cx : 50 cy : 50 text : '[[sak_layout_scene_text]]' styles : text : text-anchor : middle font-size : 30em font-weight : 700 opacity : 1 # ================================================================ - toolset : button-cover position : cx : 150 cy : 50 tools : # ------------------------------------------------------------ - type : rectex position : cx : 50 cy : 50 height : 100 width : 300 user_actions : tap_action : haptic : light actions : - action : navigate service : scene.turn_on service_data : entity_id : '[[sak_layout_scene_id]]' transition : '[[sak_layout_scene_transition]]' styles : rectex : fill : rgba(0,0,0,0)","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n YAML Template Definition"},{"location":"design/functional-card-sensor1-card/","tags":["Design","Functional Card","Sensor Card"],"text":"Visualization \u00b6 This card uses the Material 3 theme D06, TealBlue You see different variations of the same card. These are controlled by variable settings Description Aspect Ratio Target Size A card that displays a sensor value. Both using a segmented arc and as state 4/1 Grid with 2 columns SAK Tool Used for Circle The half circle, as the left part of the circle is cutoff by the card. Configurable colorstop Icon Entity Icon. Configurable colorstop SegArc Minimalistic implementation of segmented arc showing the sensors state. Configurable colorstop Name / State Name and Value of Entity for setting name above state = true State / Name Value and Name of Entity for setting name above state = false State Secondary Info of entity Bar 24 hour history, if history enabled through variable Interaction \u00b6 Part Description Card All tools connected to an entity do show by default the \"more-info\" dialog once clicked Usage \u00b6 1.0.0-rc.3 Replace example entities with your entities! 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 - type : 'custom:swiss-army-knife-card' entities : - entity : sensor.dsmr_reading_electricity_currently_delivered name : 'Sensor #1-1' layout : template : name : sak_layout_fce_sensor1 variables : - sak_layout_sensor_history_disabled : true - sak_layout_sensor_scale_max : 2 ######################################################################## - type : 'custom:swiss-army-knife-card' entities : - entity : sensor.dsmr_reading_electricity_currently_delivered name : 'Sensor #1-2' layout : template : name : sak_layout_fce_sensor1 variables : - sak_layout_sensor_name_above_state : false - sak_layout_sensor_scale_max : 2 Data Default Required Description entities The single entity on the card sak_layout_sensor_name_above_state true Determines order of these two: name/state or state/name. Note that both versions are defined. The setting only disables one of them and enables the other! sak_layout_sensor_history_disabled false Disable history tool sak_layout_sensor_colorstops_template colorstops_energy_2kw Specify the colorstop template if you specified colorstops for one of the tools sak_layout_sensor_scale_max 2 Scale max must align to given colorstop and/or sensor range! sak_layout_sensor_circle_style default Can be either default , or colorstops sak_layout_sensor_icon_style default Can be either default , or colorstops sak_layout_sensor_segarc_style colorlist Can be either colorlist , or colorstops YAML Template Definition \u00b6 1.0.0-rc.3 Full definition of card (variant 1a) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 sak_layout_fce_sensor1 : template : type : layout defaults : - sak_layout_sensor_name_above_state : true - sak_layout_sensor_history_disabled : false - sak_layout_sensor_circle_style : default - sak_layout_sensor_icon_style : default - sak_layout_sensor_segarc_style : colorlist - sak_layout_sensor_scale_max : 2 - sak_layout_sensor_colorstops_template : colorstops_energy_2kw layout : aspectratio : 4/1 toolsets : # ================================================================ - toolset : half-circle position : cx : 0 # Center on cards border cy : 50 tools : # ------------------------------------------------------------ - type : circle position : cx : 50 cy : 50 radius : 50 show : style : '[[sak_layout_sensor_circle_style]]' entity_index : 0 colorstops : template : name : '[[sak_layout_sensor_colorstops_template]]' styles : circle : stroke : none fill : var(--theme-sys-elevation-surface-neutral4) # ------------------------------------------------------------ - type : 'segarc' id : 0 position : cx : 50 cy : 50 start_angle : 25 end_angle : 155 width : 4 radius : 58 entity_index : 0 scale : min : 0 max : '[[sak_layout_sensor_scale_max]]' width : 6 offset : 12 show : scale : false style : '[[sak_layout_sensor_segarc_style]]' lastcolor : true segments : colorlist : gap : 1 colors : - var(--theme-sys-color-secondary) colorstops : template : name : '[[sak_layout_sensor_colorstops_template]]' variables : - thegap : 2 styles : foreground : fill : darkgrey background : fill : var(--theme-sys-color-secondary) opacity : 0.5 # ================================================================ - toolset : column-icon position : cx : 25 cy : 50 tools : # ------------------------------------------------------------ - type : icon position : cx : 50 cy : 50 align : center icon_size : 45 entity_index : 0 show : style : '[[sak_layout_sensor_icon_style]]' colorlist : colors : - var(--theme-sys-color-secondary) colorstops : template : name : '[[sak_layout_sensor_colorstops_template]]' styles : icon : fill : var(--theme-sys-color-secondary) opacity : 0.9 # ================================================================ - toolset : column-bar position : cx : 235 # 400-70/2 + 70=235 cy : 50 tools : # ------------------------------------------------------------ - type : bar id : 1 disabled : '[[sak_layout_sensor_history_disabled]]' entity_index : 0 position : orientation : vertical cx : 50 cy : 50 width : 330 # 400-70=330 height : 100 margin : 1 hours : 24 barhours : 1 show : style : 'minmaxgradient' minmaxgradient : fill : true colors : min : var(--theme-sys-palette-secondary85) max : var(--theme-sys-palette-secondary65) styles : bar : stroke-linecap : square opacity : 0.25 # ================================================================ - toolset : column-name position : cx : 70 # Left part = 75, so 75+(300-75)/2 cy : 50 tools : # Variant 1a, name above state... # The YAML parser can't interpret logical operators, so we # have to use JavaScript to do this... # ------------------------------------------------------------ - type : name position : cx : 50 cy : 37 variables : name_above_state : '[[sak_layout_sensor_name_above_state]]' disabled : '[[[[ return !tool_config.variables.name_above_state; ]]]]' entity_index : 0 styles : name : text-anchor : start font-size : 30em font-weight : 700 opacity : 1 # ------------------------------------------------------------ - type : state position : cx : 50 cy : 70 variables : name_above_state : '[[sak_layout_sensor_name_above_state]]' disabled : '[[[[ return !tool_config.variables.name_above_state; ]]]]' entity_index : 0 styles : state : text-anchor : start font-size : 26em font-weight : 500 opacity : 0.7 # Variant 1b, state above name... # ------------------------------------------------------------ - type : state position : cx : 50 cy : 37 disabled : '[[sak_layout_sensor_name_above_state]]' entity_index : 0 styles : state : text-anchor : start font-size : 30em font-weight : 700 opacity : 1 # ------------------------------------------------------------ - type : name position : cx : 50 cy : 70 disabled : '[[sak_layout_sensor_name_above_state]]' entity_index : 0 styles : name : text-anchor : start font-size : 26em font-weight : 500 opacity : 0.7","title":"Sensor Card #1"},{"location":"design/functional-card-sensor1-card/#visualization","text":"This card uses the Material 3 theme D06, TealBlue You see different variations of the same card. These are controlled by variable settings Description Aspect Ratio Target Size A card that displays a sensor value. Both using a segmented arc and as state 4/1 Grid with 2 columns SAK Tool Used for Circle The half circle, as the left part of the circle is cutoff by the card. Configurable colorstop Icon Entity Icon. Configurable colorstop SegArc Minimalistic implementation of segmented arc showing the sensors state. Configurable colorstop Name / State Name and Value of Entity for setting name above state = true State / Name Value and Name of Entity for setting name above state = false State Secondary Info of entity Bar 24 hour history, if history enabled through variable","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Visualization"},{"location":"design/functional-card-sensor1-card/#interaction","text":"Part Description Card All tools connected to an entity do show by default the \"more-info\" dialog once clicked","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Interaction"},{"location":"design/functional-card-sensor1-card/#usage","text":"1.0.0-rc.3 Replace example entities with your entities! 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 - type : 'custom:swiss-army-knife-card' entities : - entity : sensor.dsmr_reading_electricity_currently_delivered name : 'Sensor #1-1' layout : template : name : sak_layout_fce_sensor1 variables : - sak_layout_sensor_history_disabled : true - sak_layout_sensor_scale_max : 2 ######################################################################## - type : 'custom:swiss-army-knife-card' entities : - entity : sensor.dsmr_reading_electricity_currently_delivered name : 'Sensor #1-2' layout : template : name : sak_layout_fce_sensor1 variables : - sak_layout_sensor_name_above_state : false - sak_layout_sensor_scale_max : 2 Data Default Required Description entities The single entity on the card sak_layout_sensor_name_above_state true Determines order of these two: name/state or state/name. Note that both versions are defined. The setting only disables one of them and enables the other! sak_layout_sensor_history_disabled false Disable history tool sak_layout_sensor_colorstops_template colorstops_energy_2kw Specify the colorstop template if you specified colorstops for one of the tools sak_layout_sensor_scale_max 2 Scale max must align to given colorstop and/or sensor range! sak_layout_sensor_circle_style default Can be either default , or colorstops sak_layout_sensor_icon_style default Can be either default , or colorstops sak_layout_sensor_segarc_style colorlist Can be either colorlist , or colorstops","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Usage"},{"location":"design/functional-card-sensor1-card/#yaml-template-definition","text":"1.0.0-rc.3 Full definition of card (variant 1asak_layout_fce_sensor1 : template : type : layout defaults : - sak_layout_sensor_name_above_state : true - sak_layout_sensor_history_disabled : false - sak_layout_sensor_circle_style : default - sak_layout_sensor_icon_style : default - sak_layout_sensor_segarc_style : colorlist - sak_layout_sensor_scale_max : 2 - sak_layout_sensor_colorstops_template : colorstops_energy_2kw layout : aspectratio : 4/1 toolsets : # ================================================================ - toolset : half-circle position : cx : 0 # Center on cards border cy : 50 tools : # ------------------------------------------------------------ - type : circle position : cx : 50 cy : 50 radius : 50 show : style : '[[sak_layout_sensor_circle_style]]' entity_index : 0 colorstops : template : name : '[[sak_layout_sensor_colorstops_template]]' styles : circle : stroke : none fill : var(--theme-sys-elevation-surface-neutral4) # ------------------------------------------------------------ - type : 'segarc' id : 0 position : cx : 50 cy : 50 start_angle : 25 end_angle : 155 width : 4 radius : 58 entity_index : 0 scale : min : 0 max : '[[sak_layout_sensor_scale_max]]' width : 6 offset : 12 show : scale : false style : '[[sak_layout_sensor_segarc_style]]' lastcolor : true segments : colorlist : gap : 1 colors : - var(--theme-sys-color-secondary) colorstops : template : name : '[[sak_layout_sensor_colorstops_template]]' variables : - thegap : 2 styles : foreground : fill : darkgrey background : fill : var(--theme-sys-color-secondary) opacity : 0.5 # ================================================================ - toolset : column-icon position : cx : 25 cy : 50 tools : # ------------------------------------------------------------ - type : icon position : cx : 50 cy : 50 align : center icon_size : 45 entity_index : 0 show : style : '[[sak_layout_sensor_icon_style]]' colorlist : colors : - var(--theme-sys-color-secondary) colorstops : template : name : '[[sak_layout_sensor_colorstops_template]]' styles : icon : fill : var(--theme-sys-color-secondary) opacity : 0.9 # ================================================================ - toolset : column-bar position : cx : 235 # 400-70/2 + 70=235 cy : 50 tools : # ------------------------------------------------------------ - type : bar id : 1 disabled : '[[sak_layout_sensor_history_disabled]]' entity_index : 0 position : orientation : vertical cx : 50 cy : 50 width : 330 # 400-70=330 height : 100 margin : 1 hours : 24 barhours : 1 show : style : 'minmaxgradient' minmaxgradient : fill : true colors : min : var(--theme-sys-palette-secondary85) max : var(--theme-sys-palette-secondary65) styles : bar : stroke-linecap : square opacity : 0.25 # ================================================================ - toolset : column-name position : cx : 70 # Left part = 75, so 75+(300-75)/2 cy : 50 tools : # Variant 1a, name above state... # The YAML parser can't interpret logical operators, so we # have to use JavaScript to do this... # ------------------------------------------------------------ - type : name position : cx : 50 cy : 37 variables : name_above_state : '[[sak_layout_sensor_name_above_state]]' disabled : '[[[[ return !tool_config.variables.name_above_state; ]]]]' entity_index : 0 styles : name : text-anchor : start font-size : 30em font-weight : 700 opacity : 1 # ------------------------------------------------------------ - type : state position : cx : 50 cy : 70 variables : name_above_state : '[[sak_layout_sensor_name_above_state]]' disabled : '[[[[ return !tool_config.variables.name_above_state; ]]]]' entity_index : 0 styles : state : text-anchor : start font-size : 26em font-weight : 500 opacity : 0.7 # Variant 1b, state above name... # ------------------------------------------------------------ - type : state position : cx : 50 cy : 37 disabled : '[[sak_layout_sensor_name_above_state]]' entity_index : 0 styles : state : text-anchor : start font-size : 30em font-weight : 700 opacity : 1 # ------------------------------------------------------------ - type : name position : cx : 50 cy : 70 disabled : '[[sak_layout_sensor_name_above_state]]' entity_index : 0 styles : name : text-anchor : start font-size : 26em font-weight : 500 opacity : 0.7","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n YAML Template Definition"},{"location":"design/functional-card-sensor2-card/","tags":["Design","Functional Card","Sensor Card"],"text":"Visualization \u00b6 This card uses the Material 3 theme D06, TealBlue You see different variations of the same card. These are controlled by variable settings Description Aspect Ratio Target Size A card that displays a sensor value. Both using a segmented arc and as state 3/1 Grid with 2 columns SAK Tool Used for Circle The half circle, as the left part of the circle is cutoff by the card. Configurable colorstop Icon Entity Icon. Configurable colorstop SegArc Minimalistic implementation of segmented arc showing the sensors state. Configurable colorstop Name / State Name and Value of Entity for setting name above state = true State / Name Value and Name of Entity for setting name above state = false State Secondary Info of entity Bar 24 hour history, if history enabled through variable Interaction \u00b6 Part Description Card All tools connected to an entity do show by default the \"more-info\" dialog once clicked Usage \u00b6 1.0.0-rc.3 Replace example entities with your entities! 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 - type : 'custom:swiss-army-knife-card' entities : - entity : sensor.dsmr_reading_electricity_currently_delivered name : 'Sensor #2-1' - entity : sensor.dsmr_reading_electricity_currently_delivered secondary_info : last_changed format : relative layout : template : name : sak_layout_fce_sensor2 variables : - sak_layout_sensor_scale_max : 2 ######################################################################## - type : 'custom:swiss-army-knife-card' entities : - entity : sensor.dsmr_reading_electricity_currently_delivered name : 'Sensor #2-2' layout : template : name : sak_layout_fce_sensor2 variables : - sak_layout_sensor_name_above_state : false - sak_layout_sensor_segarc_style : colorstops - sak_layout_sensor_scale_max : 2 ######################################################################## - type : 'custom:swiss-army-knife-card' entities : - entity : sensor.dsmr_reading_electricity_currently_delivered name : 'Sensor #2-3' layout : template : name : sak_layout_fce_sensor2 variables : - sak_layout_sensor_segarc_style : colorstops - sak_layout_sensor_icon_style : colorstops - sak_layout_sensor_scale_max : 2 ######################################################################## - type : 'custom:swiss-army-knife-card' entities : - entity : sensor.dsmr_reading_electricity_currently_delivered name : 'Sensor #2-4' layout : template : name : sak_layout_fce_sensor2 variables : - sak_layout_sensor_name_above_state : false - sak_layout_sensor_segarc_style : colorstops - sak_layout_sensor_icon_style : colorstops - sak_layout_sensor_circle_style : colorstops - sak_layout_sensor_scale_max : 2 ######################################################################## - type : 'custom:swiss-army-knife-card' entities : - entity : sensor.dsmr_reading_electricity_currently_delivered name : 'Sensor #2-5' layout : template : name : sak_layout_fce_sensor2 variables : - sak_layout_sensor_circle_style : colorstops - sak_layout_sensor_segarc_style : colorstops - sak_layout_sensor_scale_max : 2 ######################################################################## - type : 'custom:swiss-army-knife-card' entities : - entity : sensor.dsmr_reading_electricity_currently_delivered name : 'Sensor #2-6' - entity : sensor.dsmr_reading_electricity_currently_delivered secondary_info : last_changed format : relative layout : template : name : sak_layout_fce_sensor2 variables : - sak_layout_sensor_name_above_state : false - sak_layout_sensor_history_disabled : true - sak_layout_sensor_circle_style : default - sak_layout_sensor_icon_style : default - sak_layout_sensor_segarc_style : colorlist - sak_layout_sensor_scale_max : 2 Data Default Required Description entities The single entity on the card sak_layout_sensor_name_above_state true Determines order of these two: name/state or state/name. Note that both versions are defined. The setting only disables one of them and enables the other! sak_layout_sensor_history_disabled false Disable history tool sak_layout_sensor_colorstops_template colorstops_energy_2kw Specify the colorstop template if you specified colorstops for one of the tools sak_layout_sensor_scale_max 2 Scale max must align to given colorstop and/or sensor range! sak_layout_sensor_circle_style default Can be either default , or colorstops sak_layout_sensor_icon_style default Can be either default , or colorstops sak_layout_sensor_segarc_style colorlist Can be either colorlist , or colorstops YAML Template Definition \u00b6 1.0.0-rc.3 Full definition of card (all variantssak_layout_fce_sensor2 : template : type : layout defaults : - sak_layout_sensor_name_above_state : true - sak_layout_sensor_history_disabled : false - sak_layout_sensor_circle_style : default - sak_layout_sensor_icon_style : default - sak_layout_sensor_segarc_style : colorlist - sak_layout_sensor_scale_max : 2 - sak_layout_sensor_colorstops_template : colorstops_energy_2kw layout : aspectratio : 3/1 toolsets : # ================================================================ - toolset : half-circle position : cx : 0 # Center on cards border cy : 50 tools : # ------------------------------------------------------------ - type : circle position : cx : 50 cy : 50 radius : 50 show : style : '[[sak_layout_sensor_circle_style]]' entity_index : 0 colorstops : template : name : '[[sak_layout_sensor_colorstops_template]]' styles : circle : stroke : none opacity : 0.25 fill : var(--theme-sys-elevation-surface-neutral4) # ------------------------------------------------------------ - type : 'segarc' id : 0 position : cx : 50 cy : 50 start_angle : 25 end_angle : 155 width : 6 radius : 59 entity_index : 0 scale : min : 0 max : '[[sak_layout_sensor_scale_max]]' width : 6 offset : 12 show : scale : false style : '[[sak_layout_sensor_segarc_style]]' lastcolor : true segments : colorlist : gap : 1 colors : - var(--theme-sys-color-secondary) colorstops : template : name : '[[sak_layout_sensor_colorstops_template]]' variables : - thegap : 2 styles : foreground : fill : darkgrey background : fill : var(--theme-sys-elevation-surface-neutral4) # ================================================================ - toolset : column-icon position : cx : 25 cy : 50 tools : # ------------------------------------------------------------ - type : icon position : cx : 50 cy : 50 align : center icon_size : 45 entity_index : 0 show : style : '[[sak_layout_sensor_icon_style]]' colorlist : colors : - var(--theme-sys-color-secondary) colorstops : template : name : '[[sak_layout_sensor_colorstops_template]]' styles : icon : fill : var(--theme-sys-color-secondary) opacity : 0.9 # ================================================================ - toolset : column-bar position : cx : 185 # 300-70/2 + 70=185 cy : 50 tools : # ------------------------------------------------------------ - type : bar id : 1 disabled : '[[sak_layout_sensor_history_disabled]]' entity_index : 0 position : orientation : vertical cx : 50 cy : 50 width : 230 # 300-70=230 height : 100 margin : 1 hours : 24 barhours : 1 show : style : 'minmaxgradient' minmaxgradient : fill : true colors : min : var(--theme-sys-palette-secondary85) max : var(--theme-sys-palette-secondary65) styles : bar : stroke-linecap : square opacity : 0.2 # ================================================================ - toolset : column-name position : cx : 70 # Left part = 75, so 75+(300-75)/2 cy : 50 tools : # ------------------------------------------------------------ - type : name variables : name_above_state : '[[sak_layout_sensor_name_above_state]]' disabled : '[[[[ return !tool_config.variables.name_above_state; ]]]]' position : cx : 50 cy : 33 entity_index : 0 styles : name : text-anchor : start font-size : 30em font-weight : 700 # ------------------------------------------------------------ - type : state variables : name_above_state : '[[sak_layout_sensor_name_above_state]]' disabled : '[[[[ return !tool_config.variables.name_above_state; ]]]]' position : cx : 50 cy : 61 entity_index : 0 styles : state : text-anchor : start font-size : 22em font-weight : 500 opacity : 0.7 # ------------------------------------------------------------ - type : state position : cx : 50 cy : 85 entity_index : 1 show : uom : none styles : state : text-anchor : start font-size : 15em font-weight : 500 opacity : 0.7 # ================================================================ - toolset : column-name position : cx : 70 # Left part = 75, so 75+(300-75)/2 cy : 50 tools : # ------------------------------------------------------------ - type : state disabled : '[[sak_layout_sensor_name_above_state]]' position : cx : 50 cy : 33 entity_index : 0 styles : state : text-anchor : start font-size : 30em font-weight : 700 # ------------------------------------------------------------ - type : name disabled : '[[sak_layout_sensor_name_above_state]]' position : cx : 50 cy : 61 entity_index : 0 styles : name : text-anchor : start font-size : 22em font-weight : 500 opacity : 0.7","title":"Sensor Card #2"},{"location":"design/functional-card-sensor2-card/#visualization","text":"This card uses the Material 3 theme D06, TealBlue You see different variations of the same card. These are controlled by variable settings Description Aspect Ratio Target Size A card that displays a sensor value. Both using a segmented arc and as state 3/1 Grid with 2 columns SAK Tool Used for Circle The half circle, as the left part of the circle is cutoff by the card. Configurable colorstop Icon Entity Icon. Configurable colorstop SegArc Minimalistic implementation of segmented arc showing the sensors state. Configurable colorstop Name / State Name and Value of Entity for setting name above state = true State / Name Value and Name of Entity for setting name above state = false State Secondary Info of entity Bar 24 hour history, if history enabled through variable","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Visualization"},{"location":"design/functional-card-sensor2-card/#interaction","text":"Part Description Card All tools connected to an entity do show by default the \"more-info\" dialog once clicked","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Interaction"},{"location":"design/functional-card-sensor2-card/#usage","text":"1.0.0-rc.3 Replace example entities with your entities! 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 - type : 'custom:swiss-army-knife-card' entities : - entity : sensor.dsmr_reading_electricity_currently_delivered name : 'Sensor #2-1' - entity : sensor.dsmr_reading_electricity_currently_delivered secondary_info : last_changed format : relative layout : template : name : sak_layout_fce_sensor2 variables : - sak_layout_sensor_scale_max : 2 ######################################################################## - type : 'custom:swiss-army-knife-card' entities : - entity : sensor.dsmr_reading_electricity_currently_delivered name : 'Sensor #2-2' layout : template : name : sak_layout_fce_sensor2 variables : - sak_layout_sensor_name_above_state : false - sak_layout_sensor_segarc_style : colorstops - sak_layout_sensor_scale_max : 2 ######################################################################## - type : 'custom:swiss-army-knife-card' entities : - entity : sensor.dsmr_reading_electricity_currently_delivered name : 'Sensor #2-3' layout : template : name : sak_layout_fce_sensor2 variables : - sak_layout_sensor_segarc_style : colorstops - sak_layout_sensor_icon_style : colorstops - sak_layout_sensor_scale_max : 2 ######################################################################## - type : 'custom:swiss-army-knife-card' entities : - entity : sensor.dsmr_reading_electricity_currently_delivered name : 'Sensor #2-4' layout : template : name : sak_layout_fce_sensor2 variables : - sak_layout_sensor_name_above_state : false - sak_layout_sensor_segarc_style : colorstops - sak_layout_sensor_icon_style : colorstops - sak_layout_sensor_circle_style : colorstops - sak_layout_sensor_scale_max : 2 ######################################################################## - type : 'custom:swiss-army-knife-card' entities : - entity : sensor.dsmr_reading_electricity_currently_delivered name : 'Sensor #2-5' layout : template : name : sak_layout_fce_sensor2 variables : - sak_layout_sensor_circle_style : colorstops - sak_layout_sensor_segarc_style : colorstops - sak_layout_sensor_scale_max : 2 ######################################################################## - type : 'custom:swiss-army-knife-card' entities : - entity : sensor.dsmr_reading_electricity_currently_delivered name : 'Sensor #2-6' - entity : sensor.dsmr_reading_electricity_currently_delivered secondary_info : last_changed format : relative layout : template : name : sak_layout_fce_sensor2 variables : - sak_layout_sensor_name_above_state : false - sak_layout_sensor_history_disabled : true - sak_layout_sensor_circle_style : default - sak_layout_sensor_icon_style : default - sak_layout_sensor_segarc_style : colorlist - sak_layout_sensor_scale_max : 2 Data Default Required Description entities The single entity on the card sak_layout_sensor_name_above_state true Determines order of these two: name/state or state/name. Note that both versions are defined. The setting only disables one of them and enables the other! sak_layout_sensor_history_disabled false Disable history tool sak_layout_sensor_colorstops_template colorstops_energy_2kw Specify the colorstop template if you specified colorstops for one of the tools sak_layout_sensor_scale_max 2 Scale max must align to given colorstop and/or sensor range! sak_layout_sensor_circle_style default Can be either default , or colorstops sak_layout_sensor_icon_style default Can be either default , or colorstops sak_layout_sensor_segarc_style colorlist Can be either colorlist , or colorstops","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Usage"},{"location":"design/functional-card-sensor2-card/#yaml-template-definition","text":"1.0.0-rc.3 Full definition of card (all variantssak_layout_fce_sensor2 : template : type : layout defaults : - sak_layout_sensor_name_above_state : true - sak_layout_sensor_history_disabled : false - sak_layout_sensor_circle_style : default - sak_layout_sensor_icon_style : default - sak_layout_sensor_segarc_style : colorlist - sak_layout_sensor_scale_max : 2 - sak_layout_sensor_colorstops_template : colorstops_energy_2kw layout : aspectratio : 3/1 toolsets : # ================================================================ - toolset : half-circle position : cx : 0 # Center on cards border cy : 50 tools : # ------------------------------------------------------------ - type : circle position : cx : 50 cy : 50 radius : 50 show : style : '[[sak_layout_sensor_circle_style]]' entity_index : 0 colorstops : template : name : '[[sak_layout_sensor_colorstops_template]]' styles : circle : stroke : none opacity : 0.25 fill : var(--theme-sys-elevation-surface-neutral4) # ------------------------------------------------------------ - type : 'segarc' id : 0 position : cx : 50 cy : 50 start_angle : 25 end_angle : 155 width : 6 radius : 59 entity_index : 0 scale : min : 0 max : '[[sak_layout_sensor_scale_max]]' width : 6 offset : 12 show : scale : false style : '[[sak_layout_sensor_segarc_style]]' lastcolor : true segments : colorlist : gap : 1 colors : - var(--theme-sys-color-secondary) colorstops : template : name : '[[sak_layout_sensor_colorstops_template]]' variables : - thegap : 2 styles : foreground : fill : darkgrey background : fill : var(--theme-sys-elevation-surface-neutral4) # ================================================================ - toolset : column-icon position : cx : 25 cy : 50 tools : # ------------------------------------------------------------ - type : icon position : cx : 50 cy : 50 align : center icon_size : 45 entity_index : 0 show : style : '[[sak_layout_sensor_icon_style]]' colorlist : colors : - var(--theme-sys-color-secondary) colorstops : template : name : '[[sak_layout_sensor_colorstops_template]]' styles : icon : fill : var(--theme-sys-color-secondary) opacity : 0.9 # ================================================================ - toolset : column-bar position : cx : 185 # 300-70/2 + 70=185 cy : 50 tools : # ------------------------------------------------------------ - type : bar id : 1 disabled : '[[sak_layout_sensor_history_disabled]]' entity_index : 0 position : orientation : vertical cx : 50 cy : 50 width : 230 # 300-70=230 height : 100 margin : 1 hours : 24 barhours : 1 show : style : 'minmaxgradient' minmaxgradient : fill : true colors : min : var(--theme-sys-palette-secondary85) max : var(--theme-sys-palette-secondary65) styles : bar : stroke-linecap : square opacity : 0.2 # ================================================================ - toolset : column-name position : cx : 70 # Left part = 75, so 75+(300-75)/2 cy : 50 tools : # ------------------------------------------------------------ - type : name variables : name_above_state : '[[sak_layout_sensor_name_above_state]]' disabled : '[[[[ return !tool_config.variables.name_above_state; ]]]]' position : cx : 50 cy : 33 entity_index : 0 styles : name : text-anchor : start font-size : 30em font-weight : 700 # ------------------------------------------------------------ - type : state variables : name_above_state : '[[sak_layout_sensor_name_above_state]]' disabled : '[[[[ return !tool_config.variables.name_above_state; ]]]]' position : cx : 50 cy : 61 entity_index : 0 styles : state : text-anchor : start font-size : 22em font-weight : 500 opacity : 0.7 # ------------------------------------------------------------ - type : state position : cx : 50 cy : 85 entity_index : 1 show : uom : none styles : state : text-anchor : start font-size : 15em font-weight : 500 opacity : 0.7 # ================================================================ - toolset : column-name position : cx : 70 # Left part = 75, so 75+(300-75)/2 cy : 50 tools : # ------------------------------------------------------------ - type : state disabled : '[[sak_layout_sensor_name_above_state]]' position : cx : 50 cy : 33 entity_index : 0 styles : state : text-anchor : start font-size : 30em font-weight : 700 # ------------------------------------------------------------ - type : name disabled : '[[sak_layout_sensor_name_above_state]]' position : cx : 50 cy : 61 entity_index : 0 styles : name : text-anchor : start font-size : 22em font-weight : 500 opacity : 0.7","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n YAML Template Definition"},{"location":"design/functional-card-server-statistics-card/","tags":["Design","Functional Card","Server Statistics Card"],"text":"Visualization \u00b6 This card uses the Material 3 theme D06, TealBlue Description Aspect Ratio Target Size A card that displays the main server statistics. CPU load, memory used, disk used and the 1 minute system load 6/1 Grid with 1 column SAK Tool Used for Circle The half circle, as the left part of the circle is cutoff by the card. Circle is animated, state dependent Icon Entity Icon. Name Name of Entity State Secondary Info of Entity Template x4 Uses the toolset_tutorial_02_part1 template created in the Swiss Army Knife Tutorial 02 . This template shows the segmented arc with icon and state display for cpu, memory, disk and 1minute system load Integrations \u00b6 You need one of the integrations setup that give you system information. An example is the System Monitor integration . Interaction \u00b6 Part Description Card All tools connected to an entity do show by default the \"more-info\" dialog once clicked Usage \u00b6 1.0.0-rc.3 Replace example entities with your entities! 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 - type : 'custom:swiss-army-knife-card' entities : # CPU - entity : sensor.processor_use decimals : 0 name : 'Server Stats' # Memory - entity : sensor.memory_use_percent icon : mdi:memory decimals : 0 # Disk - entity : sensor.disk_use_percent decimals : 0 icon : mdi:harddisk # System Load - entity : sensor.load_1m decimals : 2 unit : '1m' # Last changed - entity : sensor.processor_use secondary_info : last_changed format : relative layout : template : name : sak_layout_fce_server_statistics YAML Template Definition \u00b6 1.0.0-rc.3 Full definition of layout template 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 sak_layout_fce_server_statistics : template : type : layout defaults : - var_entity_index : 0 layout : aspectratio : 6/1 # Card is 600x100 grid styles : card : toolsets : # ================================================================ - toolset : half-circle position : cx : 0 # Center on cards border cy : 50 tools : # ------------------------------------------------------------ - type : circle position : cx : 50 cy : 50 radius : 48 styles : circle : fill : none stroke : var(--theme-sys-color-secondary) stroke-width : 3em opacity : 0.5 # ================================================================ - toolset : column-icon position : cx : 25 cy : 50 tools : # ------------------------------------------------------------ - type : icon position : cx : 50 cy : 50 align : center icon_size : 30 icon : mdi:server-network styles : icon : fill : var(--theme-sys-color-secondary) # ================================================================ - toolset : column-name position : cx : 120 cy : 50 tools : # ------------------------------------------------------------ - type : name position : cx : 50 cy : 50 entity_index : 0 styles : name : text-anchor : middle font-size : 25em font-weight : 700 opacity : 1 # ------------------------------------------------------------ - type : state position : cx : 50 cy : 80 entity_index : 4 show : uom : none styles : state : text-anchor : middle font-size : 14em font-weight : 500 opacity : 0.7 # ================================================================ - toolset : line1 position : cx : 200 # On 1/3 of card width cy : 50 tools : # ------------------------------------------------------------ - type : line position : cx : 50 cy : 50 orientation : vertical length : 50 styles : line : fill : var(--primary-text-color) opacity : 0.5 # ================================================================ - toolset : column-cpu template : name : toolset_tutorial_02_part1 variables : - var_toolset_position_cx : 260 # ================================================================ - toolset : column-memory template : name : toolset_tutorial_02_part1 variables : - var_entity_index : 1 - var_toolset_position_cx : 355 # ================================================================ - toolset : column-disk template : name : toolset_tutorial_02_part1 variables : - var_entity_index : 2 - var_toolset_position_cx : 450 # ================================================================ - toolset : column-load template : name : toolset_tutorial_02_part1 variables : - var_entity_index : 3 - var_toolset_position_cx : 545 - var_segarc_scale_max : 2","title":"Server Card"},{"location":"design/functional-card-server-statistics-card/#visualization","text":"This card uses the Material 3 theme D06, TealBlue Description Aspect Ratio Target Size A card that displays the main server statistics. CPU load, memory used, disk used and the 1 minute system load 6/1 Grid with 1 column SAK Tool Used for Circle The half circle, as the left part of the circle is cutoff by the card. Circle is animated, state dependent Icon Entity Icon. Name Name of Entity State Secondary Info of Entity Template x4 Uses the toolset_tutorial_02_part1 template created in the Swiss Army Knife Tutorial 02 . This template shows the segmented arc with icon and state display for cpu, memory, disk and 1minute system load","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Visualization"},{"location":"design/functional-card-server-statistics-card/#integrations","text":"You need one of the integrations setup that give you system information. An example is the System Monitor integration .","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Integrations"},{"location":"design/functional-card-server-statistics-card/#interaction","text":"Part Description Card All tools connected to an entity do show by default the \"more-info\" dialog once clicked","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Interaction"},{"location":"design/functional-card-server-statistics-card/#usage","text":"1.0.0-rc.3 Replace example entities with your entities! 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 - type : 'custom:swiss-army-knife-card' entities : # CPU - entity : sensor.processor_use decimals : 0 name : 'Server Stats' # Memory - entity : sensor.memory_use_percent icon : mdi:memory decimals : 0 # Disk - entity : sensor.disk_use_percent decimals : 0 icon : mdi:harddisk # System Load - entity : sensor.load_1m decimals : 2 unit : '1m' # Last changed - entity : sensor.processor_use secondary_info : last_changed format : relative layout : template : name : sak_layout_fce_server_statistics","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Usage"},{"location":"design/functional-card-server-statistics-card/#yaml-template-definition","text":"1.0.0-rc.3 Full definition of layout template 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 sak_layout_fce_server_statistics : template : type : layout defaults : - var_entity_index : 0 layout : aspectratio : 6/1 # Card is 600x100 grid styles : card : toolsets : # ================================================================ - toolset : half-circle position : cx : 0 # Center on cards border cy : 50 tools : # ------------------------------------------------------------ - type : circle position : cx : 50 cy : 50 radius : 48 styles : circle : fill : none stroke : var(--theme-sys-color-secondary) stroke-width : 3em opacity : 0.5 # ================================================================ - toolset : column-icon position : cx : 25 cy : 50 tools : # ------------------------------------------------------------ - type : icon position : cx : 50 cy : 50 align : center icon_size : 30 icon : mdi:server-network styles : icon : fill : var(--theme-sys-color-secondary) # ================================================================ - toolset : column-name position : cx : 120 cy : 50 tools : # ------------------------------------------------------------ - type : name position : cx : 50 cy : 50 entity_index : 0 styles : name : text-anchor : middle font-size : 25em font-weight : 700 opacity : 1 # ------------------------------------------------------------ - type : state position : cx : 50 cy : 80 entity_index : 4 show : uom : none styles : state : text-anchor : middle font-size : 14em font-weight : 500 opacity : 0.7 # ================================================================ - toolset : line1 position : cx : 200 # On 1/3 of card width cy : 50 tools : # ------------------------------------------------------------ - type : line position : cx : 50 cy : 50 orientation : vertical length : 50 styles : line : fill : var(--primary-text-color) opacity : 0.5 # ================================================================ - toolset : column-cpu template : name : toolset_tutorial_02_part1 variables : - var_toolset_position_cx : 260 # ================================================================ - toolset : column-memory template : name : toolset_tutorial_02_part1 variables : - var_entity_index : 1 - var_toolset_position_cx : 355 # ================================================================ - toolset : column-disk template : name : toolset_tutorial_02_part1 variables : - var_entity_index : 2 - var_toolset_position_cx : 450 # ================================================================ - toolset : column-load template : name : toolset_tutorial_02_part1 variables : - var_entity_index : 3 - var_toolset_position_cx : 545 - var_segarc_scale_max : 2","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n YAML Template Definition"},{"location":"design/functional-card-switch1-card/","tags":["Design","Functional Card","Switch Card"],"text":"Visualization \u00b6 This card uses the Material 3 theme D06, TealBlue Description Aspect Ratio Target Size A simple switch card with the \"switch\" on the left side of the card 3/1 Grid with 2 columns SAK Tool Used for Circle The half circle, as the left part of the circle is cutoff by the card. Circle is animated, state dependent Icon Entity Icon. Animated, state dependent. Icon spins in this case Name Name of Entity State Secondary Info of Entity Line Used as vertical separator Switch The switch. Animated, state dependent Interaction \u00b6 Part Description Switch Used to toggle the binary sensor entity Other tools All tools connected to an entity do show by default the \"more-info\" dialog once clicked Usage \u00b6 1.0.0-rc.3 Replace example entities with your entities! 1 2 3 4 5 6 7 8 9 10 11 12 13 14 - type : 'custom:swiss-army-knife-card' entities : - entity : light.livingroom_light_duo_right_light name : 'Switch #1' icon : mdi:fan - entity : light.livingroom_light_duo_right_light secondary_info : last_changed format : relative layout : template : name : sak_layout_fce_switch1 variables : - sak_layout_switch_icon_spin : true - sak_layout_switch_service : light.toggle Data Default Required Description entities The two entities on the card sak_layout_switch_icon_spin false True to have the icon spin indefinitely sak_layout_switch_service switch.toggle You can alter the service, if that is needed... YAML Template Definition \u00b6 1.0.0-rc.3 Full definition of card 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 sak_layout_fce_switch1 : template : type : layout defaults : - sak_layout_switch_icon_spin : false - sak_layout_switch_service : switch.toggle layout : aspectratio : 3/1 toolsets : # ================================================================ - toolset : half-circle position : cx : 0 # Center on cards border cy : 50 tools : # ------------------------------------------------------------ - type : circle position : cx : 50 cy : 50 radius : 50 entity_index : 0 animations : - state : 'on' styles : circle : fill : var(--theme-sys-color-primary) - state : 'off' styles : circle : fill : var(--theme-sys-elevation-surface-neutral4) styles : circle : stroke : none # transition: fill 1s ease # ================================================================ - toolset : column-icon position : cx : 25 cy : 50 tools : # ------------------------------------------------------------ - type : icon position : cx : 50 cy : 50 align : center icon_size : 35 icon : mdi:fan entity_index : 0 # Define template variable for this icon tool, so it can be # processed by a piece of JavaScript ;-) # The template engine will replace the variable! variables : sak_layout_switch_icon_spin : '[[sak_layout_switch_icon_spin]]' animations : - state : 'on' styles : icon : # Use template variable as the source to spin or not. # the config JavaScript parameter is this tools config... animation : > [[[ if (tool_config.variables.sak_layout_switch_icon_spin) return \"spin 3s linear infinite\"; return \"\"; ]]] fill : var(--primary-background-color) - state : 'off' styles : icon : fill : var(--theme-sys-color-secondary) styles : icon : fill : var(--primary-background-color) opacity : 0.9 # ================================================================ - toolset : column-name position : cx : 120 cy : 50 tools : # ------------------------------------------------------------ - type : name position : cx : 50 cy : 50 entity_index : 0 styles : name : text-anchor : middle font-size : 25em font-weight : 700 opacity : 1 # ------------------------------------------------------------ - type : state position : cx : 50 cy : 80 entity_index : 1 show : uom : none styles : state : text-anchor : middle font-size : 14em font-weight : 500 opacity : 0.7 # ================================================================ - toolset : line1 position : cx : 200 # On 1/3 of card width cy : 50 tools : # ------------------------------------------------------------ - type : line position : cx : 50 cy : 50 orientation : vertical length : 50 styles : line : fill : var(--primary-text-color) opacity : 0.5 # ================================================================ - toolset : switch position : cx : 250 # On 1/3 of card width cy : 50 scale : 3 tools : # ------------------------------------------------------------ - type : switch position : cx : 50 cy : 50 entity_index : 0 user_actions : tap_action : haptic : light actions : - action : call-service service : '[[sak_layout_switch_service]]'","title":"Switch Card #1"},{"location":"design/functional-card-switch1-card/#visualization","text":"This card uses the Material 3 theme D06, TealBlue Description Aspect Ratio Target Size A simple switch card with the \"switch\" on the left side of the card 3/1 Grid with 2 columns SAK Tool Used for Circle The half circle, as the left part of the circle is cutoff by the card. Circle is animated, state dependent Icon Entity Icon. Animated, state dependent. Icon spins in this case Name Name of Entity State Secondary Info of Entity Line Used as vertical separator Switch The switch. Animated, state dependent","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Visualization"},{"location":"design/functional-card-switch1-card/#interaction","text":"Part Description Switch Used to toggle the binary sensor entity Other tools All tools connected to an entity do show by default the \"more-info\" dialog once clicked","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Interaction"},{"location":"design/functional-card-switch1-card/#usage","text":"1.0.0-rc.3 Replace example entities with your entities! 1 2 3 4 5 6 7 8 9 10 11 12 13 14 - type : 'custom:swiss-army-knife-card' entities : - entity : light.livingroom_light_duo_right_light name : 'Switch #1' icon : mdi:fan - entity : light.livingroom_light_duo_right_light secondary_info : last_changed format : relative layout : template : name : sak_layout_fce_switch1 variables : - sak_layout_switch_icon_spin : true - sak_layout_switch_service : light.toggle Data Default Required Description entities The two entities on the card sak_layout_switch_icon_spin false True to have the icon spin indefinitely sak_layout_switch_service switch.toggle You can alter the service, if that is needed...","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Usage"},{"location":"design/functional-card-switch1-card/#yaml-template-definition","text":"1.0.0-rc.3 Full definition of card 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 sak_layout_fce_switch1 : template : type : layout defaults : - sak_layout_switch_icon_spin : false - sak_layout_switch_service : switch.toggle layout : aspectratio : 3/1 toolsets : # ================================================================ - toolset : half-circle position : cx : 0 # Center on cards border cy : 50 tools : # ------------------------------------------------------------ - type : circle position : cx : 50 cy : 50 radius : 50 entity_index : 0 animations : - state : 'on' styles : circle : fill : var(--theme-sys-color-primary) - state : 'off' styles : circle : fill : var(--theme-sys-elevation-surface-neutral4) styles : circle : stroke : none # transition: fill 1s ease # ================================================================ - toolset : column-icon position : cx : 25 cy : 50 tools : # ------------------------------------------------------------ - type : icon position : cx : 50 cy : 50 align : center icon_size : 35 icon : mdi:fan entity_index : 0 # Define template variable for this icon tool, so it can be # processed by a piece of JavaScript ;-) # The template engine will replace the variable! variables : sak_layout_switch_icon_spin : '[[sak_layout_switch_icon_spin]]' animations : - state : 'on' styles : icon : # Use template variable as the source to spin or not. # the config JavaScript parameter is this tools config... animation : > [[[ if (tool_config.variables.sak_layout_switch_icon_spin) return \"spin 3s linear infinite\"; return \"\"; ]]] fill : var(--primary-background-color) - state : 'off' styles : icon : fill : var(--theme-sys-color-secondary) styles : icon : fill : var(--primary-background-color) opacity : 0.9 # ================================================================ - toolset : column-name position : cx : 120 cy : 50 tools : # ------------------------------------------------------------ - type : name position : cx : 50 cy : 50 entity_index : 0 styles : name : text-anchor : middle font-size : 25em font-weight : 700 opacity : 1 # ------------------------------------------------------------ - type : state position : cx : 50 cy : 80 entity_index : 1 show : uom : none styles : state : text-anchor : middle font-size : 14em font-weight : 500 opacity : 0.7 # ================================================================ - toolset : line1 position : cx : 200 # On 1/3 of card width cy : 50 tools : # ------------------------------------------------------------ - type : line position : cx : 50 cy : 50 orientation : vertical length : 50 styles : line : fill : var(--primary-text-color) opacity : 0.5 # ================================================================ - toolset : switch position : cx : 250 # On 1/3 of card width cy : 50 scale : 3 tools : # ------------------------------------------------------------ - type : switch position : cx : 50 cy : 50 entity_index : 0 user_actions : tap_action : haptic : light actions : - action : call-service service : '[[sak_layout_switch_service]]'","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n YAML Template Definition"},{"location":"design/functional-card-switch2-card/","tags":["Design","Functional Card","Switch Card"],"text":"Visualization \u00b6 This card uses the Material 3 theme D06, TealBlue Description Aspect Ratio Target Size A simple switch card with the \"switch\" on the left side of the card 4/1 Grid with 2 columns SAK Tool Used for Badge Background of card. Left part is animated, state dependent Icon Entity Icon. Animated, state dependent Switch To indicate that this part is the switch. Animated, state dependent Name Name of Entity State Secondary Info of Entity Interaction \u00b6 Part Description Left part of badge The whole left part functions as a button to toggle the binary sensor entity Right part of badge All tools connected to an entity do show by default the \"more-info\" dialog once clicked Usage \u00b6 1.0.0-rc.3 Replace example entities with your entities! 1 2 3 4 5 6 7 8 9 10 11 12 - type : 'custom:swiss-army-knife-card' entities : - entity : light.livingroom_light_duo_right_light name : 'Switch #2a' - entity : light.livingroom_light_duo_right_light secondary_info : last_changed format : relative layout : template : name : sak_layout_fce_switch2 variables : - sak_layout_switch_icon_spin : false Data Default Required Description entities The two entities on the card sak_layout_switch_icon_spin false True to have the icon spin indefinitely sak_layout_switch_service switch.toggle You can alter the service, if that is needed... YAML Template Definition \u00b6 1.0.0-rc.3 Full definition of card 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 sak_layout_fce_switch2 : template : type : layout defaults : - sak_layout_switch_icon_spin : false - sak_layout_switch_service : switch.toggle layout : aspectratio : 4/1 toolsets : # ================================================================ - toolset : badge-background position : cx : 150 cy : 50 tools : - type : badge position : cx : 50 cy : 50 height : 100 width : 300 ratio : 25 radius : 5 divider : 30 entity_index : 0 user_actions : tap_action : haptic : light actions : - action : call-service service : light.toggle animations : - state : 'on' styles : left : fill : var(--theme-sys-color-primary) - state : 'off' styles : left : # Use as filled tonal button (m3) fill : var(--theme-sys-color-secondary-container) styles : left : fill : grey right : fill : none # Show background pointer-events : none # Disable user interaction # ================================================================ - toolset : column-icon position : cx : 37.5 # On 12.5% f width cy : 50 tools : # ------------------------------------------------------------ - type : icon position : cx : 50 cy : 50 align : center icon_size : 45 entity_index : 0 # Define template variable for this icon tool, so it can be # processed by a piece of JavaScript ;-) # The template engine will replace the variable! variables : sak_layout_switch_icon_spin : '[[sak_layout_switch_icon_spin]]' animations : - state : 'on' styles : icon : # Use template variable as the source to spin or not. # the config JavaScript parameter is this tools config... animation : > [[[ if (tool_config.variables.sak_layout_switch_icon_spin) return \"spin 3s linear infinite\"; return \"\"; ]]] fill : var(--primary-background-color) - state : 'off' styles : icon : fill : var(--theme-sys-color-secondary) styles : icon : fill : var(--primary-background-color) opacity : 0.9 pointer-events : none # Disable user interaction # ================================================================ - toolset : switch position : cx : 37.5 # On 1/3 of card width cy : 85 scale : 2 tools : # ------------------------------------------------------------ - type : switch position : cx : 50 cy : 50 orientation : 'horizontal' track : width : 15 height : 5 radius : 2.5 thumb : width : 3 height : 3 radius : 2.5 offset : 4.5 entity_index : 0 user_actions : tap_action : haptic : light actions : - action : call-service service : '[[sak_layout_switch_service]]' styles : track : --switch-checked-track-color : var(--primary-background-color) --switch-unchecked-track-color : var(--theme-sys-color-secondary) # --switch-checked-button-color: pointer-events : none thumb : --thumb-stroke : 'var(--primary-background-color)' pointer-events : none # ================================================================ - toolset : column-name position : cx : 110 cy : 50 tools : # ------------------------------------------------------------ - type : name position : cx : 50 cy : 37 entity_index : 0 styles : name : text-anchor : start font-size : 30em font-weight : 700 # ------------------------------------------------------------ - type : state position : cx : 50 cy : 70 entity_index : 1 show : uom : none styles : state : text-anchor : start font-size : 26em font-weight : 500 opacity : 0.7","title":"Switch Card #2"},{"location":"design/functional-card-switch2-card/#visualization","text":"This card uses the Material 3 theme D06, TealBlue Description Aspect Ratio Target Size A simple switch card with the \"switch\" on the left side of the card 4/1 Grid with 2 columns SAK Tool Used for Badge Background of card. Left part is animated, state dependent Icon Entity Icon. Animated, state dependent Switch To indicate that this part is the switch. Animated, state dependent Name Name of Entity State Secondary Info of Entity","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Visualization"},{"location":"design/functional-card-switch2-card/#interaction","text":"Part Description Left part of badge The whole left part functions as a button to toggle the binary sensor entity Right part of badge All tools connected to an entity do show by default the \"more-info\" dialog once clicked","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Interaction"},{"location":"design/functional-card-switch2-card/#usage","text":"1.0.0-rc.3 Replace example entities with your entities! 1 2 3 4 5 6 7 8 9 10 11 12 - type : 'custom:swiss-army-knife-card' entities : - entity : light.livingroom_light_duo_right_light name : 'Switch #2a' - entity : light.livingroom_light_duo_right_light secondary_info : last_changed format : relative layout : template : name : sak_layout_fce_switch2 variables : - sak_layout_switch_icon_spin : false Data Default Required Description entities The two entities on the card sak_layout_switch_icon_spin false True to have the icon spin indefinitely sak_layout_switch_service switch.toggle You can alter the service, if that is needed...","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Usage"},{"location":"design/functional-card-switch2-card/#yaml-template-definition","text":"1.0.0-rc.3 Full definition of card 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 sak_layout_fce_switch2 : template : type : layout defaults : - sak_layout_switch_icon_spin : false - sak_layout_switch_service : switch.toggle layout : aspectratio : 4/1 toolsets : # ================================================================ - toolset : badge-background position : cx : 150 cy : 50 tools : - type : badge position : cx : 50 cy : 50 height : 100 width : 300 ratio : 25 radius : 5 divider : 30 entity_index : 0 user_actions : tap_action : haptic : light actions : - action : call-service service : light.toggle animations : - state : 'on' styles : left : fill : var(--theme-sys-color-primary) - state : 'off' styles : left : # Use as filled tonal button (m3) fill : var(--theme-sys-color-secondary-container) styles : left : fill : grey right : fill : none # Show background pointer-events : none # Disable user interaction # ================================================================ - toolset : column-icon position : cx : 37.5 # On 12.5% f width cy : 50 tools : # ------------------------------------------------------------ - type : icon position : cx : 50 cy : 50 align : center icon_size : 45 entity_index : 0 # Define template variable for this icon tool, so it can be # processed by a piece of JavaScript ;-) # The template engine will replace the variable! variables : sak_layout_switch_icon_spin : '[[sak_layout_switch_icon_spin]]' animations : - state : 'on' styles : icon : # Use template variable as the source to spin or not. # the config JavaScript parameter is this tools config... animation : > [[[ if (tool_config.variables.sak_layout_switch_icon_spin) return \"spin 3s linear infinite\"; return \"\"; ]]] fill : var(--primary-background-color) - state : 'off' styles : icon : fill : var(--theme-sys-color-secondary) styles : icon : fill : var(--primary-background-color) opacity : 0.9 pointer-events : none # Disable user interaction # ================================================================ - toolset : switch position : cx : 37.5 # On 1/3 of card width cy : 85 scale : 2 tools : # ------------------------------------------------------------ - type : switch position : cx : 50 cy : 50 orientation : 'horizontal' track : width : 15 height : 5 radius : 2.5 thumb : width : 3 height : 3 radius : 2.5 offset : 4.5 entity_index : 0 user_actions : tap_action : haptic : light actions : - action : call-service service : '[[sak_layout_switch_service]]' styles : track : --switch-checked-track-color : var(--primary-background-color) --switch-unchecked-track-color : var(--theme-sys-color-secondary) # --switch-checked-button-color: pointer-events : none thumb : --thumb-stroke : 'var(--primary-background-color)' pointer-events : none # ================================================================ - toolset : column-name position : cx : 110 cy : 50 tools : # ------------------------------------------------------------ - type : name position : cx : 50 cy : 37 entity_index : 0 styles : name : text-anchor : start font-size : 30em font-weight : 700 # ------------------------------------------------------------ - type : state position : cx : 50 cy : 70 entity_index : 1 show : uom : none styles : state : text-anchor : start font-size : 26em font-weight : 500 opacity : 0.7","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n YAML Template Definition"},{"location":"design/functional-card-switch3-card/","tags":["Design","Functional Card","Switch Card"],"text":"Visualization \u00b6 This card uses the Material 3 theme D06, TealBlue Description Aspect Ratio Target Size A simple switch card with the \"switch\" on the left side of the card 3/1 Grid with 3 columns SAK Tool Used for Badge Background of card. Left part is animated, state dependent Icon Entity Icon. Animated, state dependent Switch To indicate that this part is the switch. Animated, state dependent Name Name of Entity State Secondary Info of Entity Interaction \u00b6 Part Description Left part of badge The whole left part functions as a button to toggle the switch Right part of badge All tools connected to an entity do show by default the \"more-info\" dialog once clicked Usage \u00b6 1.0.0-rc.3 Replace example entities with your entities! 1 2 3 4 5 6 7 8 9 10 11 12 13 - type : 'custom:swiss-army-knife-card' entities : - entity : light.livingroom_light_duo_right_light name : 'Switch #3' icon : mdi:fan - entity : light.livingroom_light_duo_right_light secondary_info : last_changed format : relative layout : template : name : sak_layout_fce_switch3 variables : - sak_layout_switch_icon_spin : true Data Default Required Description entities The two entities on the card sak_layout_switch_icon_spin false True to have the icon spin indefinitely sak_layout_switch_service switch.toggle You can alter the service, if that is needed... YAML Template Definition \u00b6 1.0.0-rc.3 Full definition of card 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 sak_layout_fce_switch3 : template : type : layout defaults : - sak_layout_switch_icon_spin : false - sak_layout_switch_service : switch.toggle layout : aspectratio : 3/1 toolsets : # ================================================================ - toolset : badge-background position : cx : 150 cy : 50 tools : - type : badge position : cx : 50 cy : 50 height : 100 width : 300 ratio : 25 radius : 5 divider : 30 entity_index : 0 user_actions : tap_action : haptic : light actions : - action : call-service service : light.toggle animations : - state : 'on' styles : left : fill : var(--theme-sys-color-primary) - state : 'off' styles : left : # Use as filled tonal button (m3) fill : var(--theme-sys-color-secondary-container) styles : left : fill : grey right : fill : none # Show background pointer-events : none # Disable user interaction # ================================================================ - toolset : column-icon position : cx : 37.5 # On 12.5% f width cy : 50 tools : # ------------------------------------------------------------ - type : icon position : cx : 50 cy : 50 align : center icon_size : 45 entity_index : 0 # Define template variable for this icon tool, so it can be # processed by a piece of JavaScript ;-) # The template engine will replace the variable! variables : sak_layout_switch_icon_spin : '[[sak_layout_switch_icon_spin]]' animations : - state : 'on' styles : icon : # Use template variable as the source to spin or not. # the config JavaScript parameter is this tools config... animation : > [[[ if (config.variables.sak_layout_switch_icon_spin) return \"spin 3s linear infinite\"; return \"\"; ]]] fill : var(--primary-background-color) - state : 'off' styles : icon : fill : var(--theme-sys-color-secondary) styles : icon : fill : var(--primary-background-color) opacity : 0.9 pointer-events : none # Disable user interaction # transition: fill 1s ease # ================================================================ - toolset : switch position : cx : 37.5 # On 1/3 of card width cy : 85 scale : 2 tools : # ------------------------------------------------------------ - type : switch position : cx : 50 cy : 50 orientation : 'horizontal' track : width : 15 height : 5 radius : 2.5 thumb : width : 3 height : 3 radius : 2.5 offset : 4.5 entity_index : 0 user_actions : tap_action : haptic : light actions : - action : call-service service : '[[sak_layout_switch_service]]' styles : track : --switch-checked-track-color : var(--primary-background-color) --switch-unchecked-track-color : var(--theme-sys-color-secondary) --switch-checked-button-color : var(--primary-color) --switch-unchecked-button-color : var(--primary-background-color) pointer-events : none thumb : --thumb-stroke : 'var(--primary-background-color)' pointer-events : none # ================================================================ - toolset : column-name position : cx : 100 # Left part = 75, so 75+(300-75)/2 cy : 50 tools : # ------------------------------------------------------------ - type : name position : cx : 50 cy : 50 entity_index : 0 styles : name : text-anchor : start font-size : 30em font-weight : 700 opacity : 1 # ------------------------------------------------------------ - type : state position : cx : 50 cy : 80 entity_index : 1 show : uom : none styles : state : text-anchor : start font-size : 16em font-weight : 500 opacity : 0.7","title":"Switch Card #3"},{"location":"design/functional-card-switch3-card/#visualization","text":"This card uses the Material 3 theme D06, TealBlue Description Aspect Ratio Target Size A simple switch card with the \"switch\" on the left side of the card 3/1 Grid with 3 columns SAK Tool Used for Badge Background of card. Left part is animated, state dependent Icon Entity Icon. Animated, state dependent Switch To indicate that this part is the switch. Animated, state dependent Name Name of Entity State Secondary Info of Entity","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Visualization"},{"location":"design/functional-card-switch3-card/#interaction","text":"Part Description Left part of badge The whole left part functions as a button to toggle the switch Right part of badge All tools connected to an entity do show by default the \"more-info\" dialog once clicked","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Interaction"},{"location":"design/functional-card-switch3-card/#usage","text":"1.0.0-rc.3 Replace example entities with your entities! 1 2 3 4 5 6 7 8 9 10 11 12 13 - type : 'custom:swiss-army-knife-card' entities : - entity : light.livingroom_light_duo_right_light name : 'Switch #3' icon : mdi:fan - entity : light.livingroom_light_duo_right_light secondary_info : last_changed format : relative layout : template : name : sak_layout_fce_switch3 variables : - sak_layout_switch_icon_spin : true Data Default Required Description entities The two entities on the card sak_layout_switch_icon_spin false True to have the icon spin indefinitely sak_layout_switch_service switch.toggle You can alter the service, if that is needed...","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Usage"},{"location":"design/functional-card-switch3-card/#yaml-template-definition","text":"1.0.0-rc.3 Full definition of card 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 sak_layout_fce_switch3 : template : type : layout defaults : - sak_layout_switch_icon_spin : false - sak_layout_switch_service : switch.toggle layout : aspectratio : 3/1 toolsets : # ================================================================ - toolset : badge-background position : cx : 150 cy : 50 tools : - type : badge position : cx : 50 cy : 50 height : 100 width : 300 ratio : 25 radius : 5 divider : 30 entity_index : 0 user_actions : tap_action : haptic : light actions : - action : call-service service : light.toggle animations : - state : 'on' styles : left : fill : var(--theme-sys-color-primary) - state : 'off' styles : left : # Use as filled tonal button (m3) fill : var(--theme-sys-color-secondary-container) styles : left : fill : grey right : fill : none # Show background pointer-events : none # Disable user interaction # ================================================================ - toolset : column-icon position : cx : 37.5 # On 12.5% f width cy : 50 tools : # ------------------------------------------------------------ - type : icon position : cx : 50 cy : 50 align : center icon_size : 45 entity_index : 0 # Define template variable for this icon tool, so it can be # processed by a piece of JavaScript ;-) # The template engine will replace the variable! variables : sak_layout_switch_icon_spin : '[[sak_layout_switch_icon_spin]]' animations : - state : 'on' styles : icon : # Use template variable as the source to spin or not. # the config JavaScript parameter is this tools config... animation : > [[[ if (config.variables.sak_layout_switch_icon_spin) return \"spin 3s linear infinite\"; return \"\"; ]]] fill : var(--primary-background-color) - state : 'off' styles : icon : fill : var(--theme-sys-color-secondary) styles : icon : fill : var(--primary-background-color) opacity : 0.9 pointer-events : none # Disable user interaction # transition: fill 1s ease # ================================================================ - toolset : switch position : cx : 37.5 # On 1/3 of card width cy : 85 scale : 2 tools : # ------------------------------------------------------------ - type : switch position : cx : 50 cy : 50 orientation : 'horizontal' track : width : 15 height : 5 radius : 2.5 thumb : width : 3 height : 3 radius : 2.5 offset : 4.5 entity_index : 0 user_actions : tap_action : haptic : light actions : - action : call-service service : '[[sak_layout_switch_service]]' styles : track : --switch-checked-track-color : var(--primary-background-color) --switch-unchecked-track-color : var(--theme-sys-color-secondary) --switch-checked-button-color : var(--primary-color) --switch-unchecked-button-color : var(--primary-background-color) pointer-events : none thumb : --thumb-stroke : 'var(--primary-background-color)' pointer-events : none # ================================================================ - toolset : column-name position : cx : 100 # Left part = 75, so 75+(300-75)/2 cy : 50 tools : # ------------------------------------------------------------ - type : name position : cx : 50 cy : 50 entity_index : 0 styles : name : text-anchor : start font-size : 30em font-weight : 700 opacity : 1 # ------------------------------------------------------------ - type : state position : cx : 50 cy : 80 entity_index : 1 show : uom : none styles : state : text-anchor : start font-size : 16em font-weight : 500 opacity : 0.7","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n YAML Template Definition"},{"location":"design/functional-card-tomorrow-pollen-all-aqi-card/","tags":["Design","Functional Card","Tomorrow Pollen All AQI Card"],"text":"Visualization \u00b6 This card uses the Material 3 theme D06, TealBlue Description Aspect Ratio Target Size A card that shows the pollen status from Tomorrow and the AQI value. This value from Tomorrow doesn't work, so I used the default AQI integration. 6/2 Grid with 1 column SAK Tool Used for Ellipse The half ellipse, as the left part of the circle is cutoff by the card. Icon Entity Icon. Name Name of AQI Entity Circle Circle as background for the Svg. Animated, state dependent UserSvg Svg image for AQI. Animated, state dependent State State of AQI State State of Pollutant Line Vertical line separator Name Name of Trees Entity UserSvg Svg image for trees. Animated, state dependent State State of trees entity Name Name of Grass Entity UserSvg Svg image for grass. Animated, state dependent State State of grass entity Name Name of Weed Entity UserSvg Svg image for weed. Animated, state dependent State State of weed entity Integrations \u00b6 You need the AirVisual integration : and the tomorrow.io integration : Interaction \u00b6 Part Description Card All tools connected to an entity do show by default the \"more-info\" dialog once clicked Usage \u00b6 1.0.0-rc.3 You need the tomorrow.io SVG files from Github and put those in the www/images/tomorrow folder Images and colors used for this card are adapted versions from Isabella Alstr\u00f6ms pollen images You need the AirVisual SVG files from Github and put those in the www/images/airvisual folder Replace tomorrow entities with your entities!. The AQI entities are generic 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 - type : 'custom:swiss-army-knife-card' entities : - entity : sensor.tomorrow_io_tree_pollen_index name : 'Trees' - entity : sensor.tomorrow_io_grass_pollen_index name : 'Grass' - entity : sensor.tomorrow_io_weed_pollen_index name : 'Weed' - entity : sensor.u_s_air_quality_index name : 'AQI' - entity : sensor.u_s_air_pollution_level layout : template : name : sak_layout_fce_tomorrow_pollen_all_aqi variables : - sak_layout_tomorrow_pollen_image_path : tomorrow/ Data Default Required Description entities The three tomorrow pollen entities; tree, grass and weed and the two AQI entities, in that order! sak_layout_tomorrow_pollen_image_path tomorrow/ Folder in /local/images/, including a trailing slash! YAML Template Definition \u00b6 1.0.0-rc.3 Full definition of layout template sak_layout_fce_tomorrow_pollen_all_aqi : template : type : layout defaults : - sak_layout_tomorrow_pollen_image_path : 'tomorrow/' layout : aspectratio : 6/2 toolsets : # ================================================================ - toolset : line1 position : cx : 200 cy : 100 tools : # ------------------------------------------------------------ - type : line position : cx : 50 cy : 50 orientation : vertical length : 100 styles : line : fill : var(--primary-text-color) opacity : 0.5 # ================================================================ - toolset : half-circle position : cx : 0 # Center on cards border cy : 100 tools : # ------------------------------------------------------------ - type : ellipse position : cx : 50 cy : 50 radiusx : 48 radiusy : 96 styles : ellipse : fill : none stroke : var(--theme-sys-color-secondary) stroke-width : 3em opacity : 0.5 # ================================================================ - toolset : column-icon position : cx : 25 cy : 100 tools : # ------------------------------------------------------------ - type : icon position : cx : 50 cy : 50 align : center icon_size : 50 entity_index : 0 styles : icon : fill : var(--theme-sys-color-secondary) # ================================================================ - toolset : aqi-column position : cx : 125 cy : 100 tools : # ------------------------------------------------------------ - type : name position : cx : 50 cy : -25 entity_index : 3 styles : name : text-anchor : middle font-size : 26em font-weight : 700 opacity : 1 # ------------------------------------------------------------ - type : circle position : cx : 50 cy : 50 radius : 50 entity_index : 3 show : style : 'colorstops' colorstops : template : name : colorstops_airvisual variables : - thegap : 2 styles : circle : stroke : none fill : var(--theme-sys-elevation-surface-neutral4) # ------------------------------------------------------------ - type : 'usersvg' entity_index : 3 position : cx : 50 cy : 50 height : 95 width : 95 style : 'images' images : - face1 : /local/images/airvisual/ic-face-1.svg - face2 : /local/images/airvisual/ic-face-2.svg - face3 : /local/images/airvisual/ic-face-3.svg - face4 : /local/images/airvisual/ic-face-4.svg - face5 : /local/images/airvisual/ic-face-5.svg - face6 : /local/images/airvisual/ic-face-6.svg animations : - state : '50' operator : <= image : face1 - state : '100' operator : <= image : face2 - state : '150' operator : <= image : face3 - state : '200' operator : <= image : face4 - state : '300' operator : <= image : face5 - state : '9999' operator : <= image : face6 styles : usersvg : stroke-width : 5em # ------------------------------------------------------------ - type : state position : cx : 43 cy : 125 entity_index : 3 show : ellipsis : 5 styles : state : text-anchor : end font-size : 20em font-weight : 500 opacity : 0.7 # ------------------------------------------------------------ - type : state position : cx : 48 cy : 125 entity_index : 4 text : before : ' | ' styles : state : text-anchor : start font-size : 20em font-weight : 500 opacity : 0.7 # ================================================================ - toolset : pollen-column-trees position : cx : 260 cy : 100 tools : # ------------------------------------------------------------ - type : name position : cx : 50 cy : -25 entity_index : 0 styles : name : text-anchor : middle font-size : 26em font-weight : 700 opacity : 1 # ------------------------------------------------------------ - type : 'usersvg' entity_index : 0 position : cx : 50 cy : 50 height : 100 width : 100 style : 'images' variables : path : '[[sak_layout_tomorrow_pollen_image_path]]' prefix : 'pollen_tree_' images : - default : > [[[ return \"/local/images/\"+ config.variables.path + config.variables.prefix + state + \".svg\"; ]]] # ------------------------------------------------------------ - type : state position : cx : 50 cy : 125 entity_index : 0 show : uom : none styles : state : text-anchor : middle font-size : 20em font-weight : 500 opacity : 0.7 # ================================================================ - toolset : pollen-column-grass position : cx : 395 cy : 100 tools : # ------------------------------------------------------------ - type : name position : cx : 50 cy : -25 entity_index : 1 styles : name : text-anchor : middle font-size : 26em font-weight : 700 opacity : 1 # ------------------------------------------------------------ - type : 'usersvg' entity_index : 1 position : cx : 50 cy : 50 height : 100 width : 100 style : 'images' variables : path : '[[sak_layout_tomorrow_pollen_image_path]]' prefix : 'pollen_grass_' images : - default : > [[[ return \"/local/images/\"+ config.variables.path + config.variables.prefix + state + \".svg\"; ]]] # ------------------------------------------------------------ - type : state position : cx : 50 cy : 125 entity_index : 1 show : uom : none styles : state : text-anchor : middle font-size : 20em font-weight : 500 opacity : 0.7 # ================================================================ - toolset : pollen-column-weed position : cx : 530 cy : 100 tools : # ------------------------------------------------------------ - type : name position : cx : 50 cy : -25 entity_index : 2 styles : name : text-anchor : middle font-size : 26em font-weight : 700 opacity : 1 # ------------------------------------------------------------ - type : 'usersvg' entity_index : 2 position : cx : 50 cy : 50 height : 100 width : 100 style : 'images' variables : path : '[[sak_layout_tomorrow_pollen_image_path]]' prefix : 'pollen_weed_' images : - default : > [[[ return \"/local/images/\"+ config.variables.path + config.variables.prefix + state + \".svg\"; ]]] # ------------------------------------------------------------ - type : state position : cx : 50 cy : 125 entity_index : 2 show : uom : none styles : state : text-anchor : middle font-size : 20em font-weight : 500 opacity : 0.7","title":"Tomorrow Pollen All with AQI Card"},{"location":"design/functional-card-tomorrow-pollen-all-aqi-card/#visualization","text":"This card uses the Material 3 theme D06, TealBlue Description Aspect Ratio Target Size A card that shows the pollen status from Tomorrow and the AQI value. This value from Tomorrow doesn't work, so I used the default AQI integration. 6/2 Grid with 1 column SAK Tool Used for Ellipse The half ellipse, as the left part of the circle is cutoff by the card. Icon Entity Icon. Name Name of AQI Entity Circle Circle as background for the Svg. Animated, state dependent UserSvg Svg image for AQI. Animated, state dependent State State of AQI State State of Pollutant Line Vertical line separator Name Name of Trees Entity UserSvg Svg image for trees. Animated, state dependent State State of trees entity Name Name of Grass Entity UserSvg Svg image for grass. Animated, state dependent State State of grass entity Name Name of Weed Entity UserSvg Svg image for weed. Animated, state dependent State State of weed entity","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Visualization"},{"location":"design/functional-card-tomorrow-pollen-all-aqi-card/#integrations","text":"You need the AirVisual integration : and the tomorrow.io integration :","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Integrations"},{"location":"design/functional-card-tomorrow-pollen-all-aqi-card/#interaction","text":"Part Description Card All tools connected to an entity do show by default the \"more-info\" dialog once clicked","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Interaction"},{"location":"design/functional-card-tomorrow-pollen-all-aqi-card/#usage","text":"1.0.0-rc.3 You need the tomorrow.io SVG files from Github and put those in the www/images/tomorrow folder Images and colors used for this card are adapted versions from Isabella Alstr\u00f6ms pollen images You need the AirVisual SVG files from Github and put those in the www/images/airvisual folder Replace tomorrow entities with your entities!. The AQI entities are generic 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 - type : 'custom:swiss-army-knife-card' entities : - entity : sensor.tomorrow_io_tree_pollen_index name : 'Trees' - entity : sensor.tomorrow_io_grass_pollen_index name : 'Grass' - entity : sensor.tomorrow_io_weed_pollen_index name : 'Weed' - entity : sensor.u_s_air_quality_index name : 'AQI' - entity : sensor.u_s_air_pollution_level layout : template : name : sak_layout_fce_tomorrow_pollen_all_aqi variables : - sak_layout_tomorrow_pollen_image_path : tomorrow/ Data Default Required Description entities The three tomorrow pollen entities; tree, grass and weed and the two AQI entities, in that order! sak_layout_tomorrow_pollen_image_path tomorrow/ Folder in /local/images/, including a trailing slash!","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Usage"},{"location":"design/functional-card-tomorrow-pollen-all-aqi-card/#yaml-template-definition","text":"1.0.0-rc.3 Full definition of layout template sak_layout_fce_tomorrow_pollen_all_aqi : template : type : layout defaults : - sak_layout_tomorrow_pollen_image_path : 'tomorrow/' layout : aspectratio : 6/2 toolsets : # ================================================================ - toolset : line1 position : cx : 200 cy : 100 tools : # ------------------------------------------------------------ - type : line position : cx : 50 cy : 50 orientation : vertical length : 100 styles : line : fill : var(--primary-text-color) opacity : 0.5 # ================================================================ - toolset : half-circle position : cx : 0 # Center on cards border cy : 100 tools : # ------------------------------------------------------------ - type : ellipse position : cx : 50 cy : 50 radiusx : 48 radiusy : 96 styles : ellipse : fill : none stroke : var(--theme-sys-color-secondary) stroke-width : 3em opacity : 0.5 # ================================================================ - toolset : column-icon position : cx : 25 cy : 100 tools : # ------------------------------------------------------------ - type : icon position : cx : 50 cy : 50 align : center icon_size : 50 entity_index : 0 styles : icon : fill : var(--theme-sys-color-secondary) # ================================================================ - toolset : aqi-column position : cx : 125 cy : 100 tools : # ------------------------------------------------------------ - type : name position : cx : 50 cy : -25 entity_index : 3 styles : name : text-anchor : middle font-size : 26em font-weight : 700 opacity : 1 # ------------------------------------------------------------ - type : circle position : cx : 50 cy : 50 radius : 50 entity_index : 3 show : style : 'colorstops' colorstops : template : name : colorstops_airvisual variables : - thegap : 2 styles : circle : stroke : none fill : var(--theme-sys-elevation-surface-neutral4) # ------------------------------------------------------------ - type : 'usersvg' entity_index : 3 position : cx : 50 cy : 50 height : 95 width : 95 style : 'images' images : - face1 : /local/images/airvisual/ic-face-1.svg - face2 : /local/images/airvisual/ic-face-2.svg - face3 : /local/images/airvisual/ic-face-3.svg - face4 : /local/images/airvisual/ic-face-4.svg - face5 : /local/images/airvisual/ic-face-5.svg - face6 : /local/images/airvisual/ic-face-6.svg animations : - state : '50' operator : <= image : face1 - state : '100' operator : <= image : face2 - state : '150' operator : <= image : face3 - state : '200' operator : <= image : face4 - state : '300' operator : <= image : face5 - state : '9999' operator : <= image : face6 styles : usersvg : stroke-width : 5em # ------------------------------------------------------------ - type : state position : cx : 43 cy : 125 entity_index : 3 show : ellipsis : 5 styles : state : text-anchor : end font-size : 20em font-weight : 500 opacity : 0.7 # ------------------------------------------------------------ - type : state position : cx : 48 cy : 125 entity_index : 4 text : before : ' | ' styles : state : text-anchor : start font-size : 20em font-weight : 500 opacity : 0.7 # ================================================================ - toolset : pollen-column-trees position : cx : 260 cy : 100 tools : # ------------------------------------------------------------ - type : name position : cx : 50 cy : -25 entity_index : 0 styles : name : text-anchor : middle font-size : 26em font-weight : 700 opacity : 1 # ------------------------------------------------------------ - type : 'usersvg' entity_index : 0 position : cx : 50 cy : 50 height : 100 width : 100 style : 'images' variables : path : '[[sak_layout_tomorrow_pollen_image_path]]' prefix : 'pollen_tree_' images : - default : > [[[ return \"/local/images/\"+ config.variables.path + config.variables.prefix + state + \".svg\"; ]]] # ------------------------------------------------------------ - type : state position : cx : 50 cy : 125 entity_index : 0 show : uom : none styles : state : text-anchor : middle font-size : 20em font-weight : 500 opacity : 0.7 # ================================================================ - toolset : pollen-column-grass position : cx : 395 cy : 100 tools : # ------------------------------------------------------------ - type : name position : cx : 50 cy : -25 entity_index : 1 styles : name : text-anchor : middle font-size : 26em font-weight : 700 opacity : 1 # ------------------------------------------------------------ - type : 'usersvg' entity_index : 1 position : cx : 50 cy : 50 height : 100 width : 100 style : 'images' variables : path : '[[sak_layout_tomorrow_pollen_image_path]]' prefix : 'pollen_grass_' images : - default : > [[[ return \"/local/images/\"+ config.variables.path + config.variables.prefix + state + \".svg\"; ]]] # ------------------------------------------------------------ - type : state position : cx : 50 cy : 125 entity_index : 1 show : uom : none styles : state : text-anchor : middle font-size : 20em font-weight : 500 opacity : 0.7 # ================================================================ - toolset : pollen-column-weed position : cx : 530 cy : 100 tools : # ------------------------------------------------------------ - type : name position : cx : 50 cy : -25 entity_index : 2 styles : name : text-anchor : middle font-size : 26em font-weight : 700 opacity : 1 # ------------------------------------------------------------ - type : 'usersvg' entity_index : 2 position : cx : 50 cy : 50 height : 100 width : 100 style : 'images' variables : path : '[[sak_layout_tomorrow_pollen_image_path]]' prefix : 'pollen_weed_' images : - default : > [[[ return \"/local/images/\"+ config.variables.path + config.variables.prefix + state + \".svg\"; ]]] # ------------------------------------------------------------ - type : state position : cx : 50 cy : 125 entity_index : 2 show : uom : none styles : state : text-anchor : middle font-size : 20em font-weight : 500 opacity : 0.7","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n YAML Template Definition"},{"location":"design/functional-card-tomorrow-pollen-all-card/","tags":["Design","Functional Card","Tomorrow Pollen All Card"],"text":"Visualization \u00b6 This card uses the Material 3 theme D06, TealBlue Description Aspect Ratio Target Size A card that shows the pollen status from Tomorrow. You need to have setup that integration of course. 6/2 Grid with 1 column SAK Tool Used for Ellipse The half ellipse, as the left part of the circle is cutoff by the card. Icon Entity Icon. Text Text \"Pollen\" Text Text \"Index\" Name Name of Trees Entity UserSvg Svg image for trees. Animated, state dependent State State of trees entity Name Name of Grass Entity UserSvg Svg image for grass. Animated, state dependent State State of grass entity Name Name of Weed Entity UserSvg Svg image for weed. Animated, state dependent State State of weed entity Integrations \u00b6 You need the tomorrow.io integration : Interaction \u00b6 Part Description Card All tools connected to an entity do show by default the \"more-info\" dialog once clicked Usage \u00b6 1.0.0-rc.3 You need the SVG files from Github and put those in the www/images/tomorrow folder Images and colors used for this card are adapted versions from Isabella Alstr\u00f6ms pollen images Replace example entities with your entities! 1 2 3 4 5 6 7 8 9 10 11 12 13 - type : 'custom:swiss-army-knife-card' entities : - entity : sensor.tomorrow_io_tree_pollen_index name : 'Trees' - entity : sensor.tomorrow_io_grass_pollen_index name : 'Grass' - entity : sensor.tomorrow_io_weed_pollen_index name : 'Weed' layout : template : name : sak_layout_fce_tomorrow_pollen_all variables : - sak_layout_tomorrow_pollen_image_path : tomorrow/ Data Default Required Description entities The three tomorrow pollen entities; tree, grass and weed, in that order! sak_layout_tomorrow_pollen_image_path tomorrow/ Folder in /local/images/, including a trailing slash! YAML Template Definition \u00b6 1.0.0-rc.3 Full definition of layout template sak_layout_fce_tomorrow_pollen_all : template : type : layout defaults : - sak_layout_tomorrow_pollen_image_path : 'tomorrow/' layout : aspectratio : 6/2 toolsets : # ================================================================ - toolset : line1 position : cx : 200 cy : 100 tools : # ------------------------------------------------------------ - type : line position : cx : 50 cy : 50 orientation : vertical length : 100 styles : line : fill : var(--primary-text-color) opacity : 0.5 # ================================================================ - toolset : half-circle position : cx : 0 # Center on cards border cy : 100 tools : # ------------------------------------------------------------ - type : ellipse position : cx : 50 cy : 50 radiusx : 48 radiusy : 96 styles : ellipse : fill : none stroke : var(--theme-sys-color-secondary) stroke-width : 3em opacity : 0.5 # ================================================================ - toolset : column-icon position : cx : 25 cy : 100 tools : # ------------------------------------------------------------ - type : icon position : cx : 50 cy : 50 align : center icon_size : 50 entity_index : 0 styles : icon : fill : var(--theme-sys-color-secondary) # ================================================================ - toolset : column-text position : cx : 125 cy : 100 tools : # ------------------------------------------------------------ - type : text position : cx : 50 cy : 37 text : 'Pollen' styles : text : text-anchor : middle font-size : 30em font-weight : 600 opacity : 0.9 # ------------------------------------------------------------ - type : text position : cx : 50 cy : 70 text : 'Index' styles : text : text-anchor : middle font-size : 26em font-weight : 600 opacity : 0.9 # ================================================================ - toolset : pollen-column-trees position : cx : 260 cy : 100 tools : # ------------------------------------------------------------ - type : name position : cx : 50 cy : -25 entity_index : 0 styles : name : text-anchor : middle font-size : 26em font-weight : 700 opacity : 1 # ------------------------------------------------------------ - type : 'usersvg' entity_index : 0 position : cx : 50 cy : 50 height : 100 width : 100 style : 'images' variables : path : '[[sak_layout_tomorrow_pollen_image_path]]' prefix : 'pollen_tree_' images : - default : > [[[ return \"/local/images/\"+ config.variables.path + config.variables.prefix + state + \".svg\"; ]]] # ------------------------------------------------------------ - type : state position : cx : 50 cy : 125 entity_index : 0 show : uom : none styles : state : text-anchor : middle font-size : 22em font-weight : 500 opacity : 0.7 # ================================================================ - toolset : pollen-column-grass position : cx : 395 cy : 100 tools : # ------------------------------------------------------------ - type : name position : cx : 50 cy : -25 entity_index : 1 styles : name : text-anchor : middle font-size : 26em font-weight : 700 opacity : 1 # ------------------------------------------------------------ - type : 'usersvg' entity_index : 1 position : cx : 50 cy : 50 height : 100 width : 100 style : 'images' variables : path : '[[sak_layout_tomorrow_pollen_image_path]]' prefix : 'pollen_grass_' images : - default : > [[[ return \"/local/images/\"+ config.variables.path + config.variables.prefix + state + \".svg\"; ]]] # ------------------------------------------------------------ - type : state position : cx : 50 cy : 125 entity_index : 1 show : uom : none styles : state : text-anchor : middle font-size : 22em font-weight : 500 opacity : 0.7 # ================================================================ - toolset : pollen-column-weed position : cx : 530 cy : 100 tools : # ------------------------------------------------------------ - type : name position : cx : 50 cy : -25 entity_index : 2 styles : name : text-anchor : middle font-size : 26em font-weight : 700 opacity : 1 # ------------------------------------------------------------ - type : 'usersvg' entity_index : 2 position : cx : 50 cy : 50 height : 100 width : 100 style : 'images' variables : path : '[[sak_layout_tomorrow_pollen_image_path]]' prefix : 'pollen_weed_' images : - default : > [[[ return \"/local/images/\"+ config.variables.path + config.variables.prefix + state + \".svg\"; ]]] # ------------------------------------------------------------ - type : state position : cx : 50 cy : 125 entity_index : 2 show : uom : none styles : state : text-anchor : middle font-size : 22em font-weight : 500 opacity : 0.7","title":"Tomorrow Pollen All Card"},{"location":"design/functional-card-tomorrow-pollen-all-card/#visualization","text":"This card uses the Material 3 theme D06, TealBlue Description Aspect Ratio Target Size A card that shows the pollen status from Tomorrow. You need to have setup that integration of course. 6/2 Grid with 1 column SAK Tool Used for Ellipse The half ellipse, as the left part of the circle is cutoff by the card. Icon Entity Icon. Text Text \"Pollen\" Text Text \"Index\" Name Name of Trees Entity UserSvg Svg image for trees. Animated, state dependent State State of trees entity Name Name of Grass Entity UserSvg Svg image for grass. Animated, state dependent State State of grass entity Name Name of Weed Entity UserSvg Svg image for weed. Animated, state dependent State State of weed entity","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Visualization"},{"location":"design/functional-card-tomorrow-pollen-all-card/#integrations","text":"You need the tomorrow.io integration :","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Integrations"},{"location":"design/functional-card-tomorrow-pollen-all-card/#interaction","text":"Part Description Card All tools connected to an entity do show by default the \"more-info\" dialog once clicked","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Interaction"},{"location":"design/functional-card-tomorrow-pollen-all-card/#usage","text":"1.0.0-rc.3 You need the SVG files from Github and put those in the www/images/tomorrow folder Images and colors used for this card are adapted versions from Isabella Alstr\u00f6ms pollen images Replace example entities with your entities! 1 2 3 4 5 6 7 8 9 10 11 12 13 - type : 'custom:swiss-army-knife-card' entities : - entity : sensor.tomorrow_io_tree_pollen_index name : 'Trees' - entity : sensor.tomorrow_io_grass_pollen_index name : 'Grass' - entity : sensor.tomorrow_io_weed_pollen_index name : 'Weed' layout : template : name : sak_layout_fce_tomorrow_pollen_all variables : - sak_layout_tomorrow_pollen_image_path : tomorrow/ Data Default Required Description entities The three tomorrow pollen entities; tree, grass and weed, in that order! sak_layout_tomorrow_pollen_image_path tomorrow/ Folder in /local/images/, including a trailing slash!","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Usage"},{"location":"design/functional-card-tomorrow-pollen-all-card/#yaml-template-definition","text":"1.0.0-rc.3 Full definition of layout template sak_layout_fce_tomorrow_pollen_all : template : type : layout defaults : - sak_layout_tomorrow_pollen_image_path : 'tomorrow/' layout : aspectratio : 6/2 toolsets : # ================================================================ - toolset : line1 position : cx : 200 cy : 100 tools : # ------------------------------------------------------------ - type : line position : cx : 50 cy : 50 orientation : vertical length : 100 styles : line : fill : var(--primary-text-color) opacity : 0.5 # ================================================================ - toolset : half-circle position : cx : 0 # Center on cards border cy : 100 tools : # ------------------------------------------------------------ - type : ellipse position : cx : 50 cy : 50 radiusx : 48 radiusy : 96 styles : ellipse : fill : none stroke : var(--theme-sys-color-secondary) stroke-width : 3em opacity : 0.5 # ================================================================ - toolset : column-icon position : cx : 25 cy : 100 tools : # ------------------------------------------------------------ - type : icon position : cx : 50 cy : 50 align : center icon_size : 50 entity_index : 0 styles : icon : fill : var(--theme-sys-color-secondary) # ================================================================ - toolset : column-text position : cx : 125 cy : 100 tools : # ------------------------------------------------------------ - type : text position : cx : 50 cy : 37 text : 'Pollen' styles : text : text-anchor : middle font-size : 30em font-weight : 600 opacity : 0.9 # ------------------------------------------------------------ - type : text position : cx : 50 cy : 70 text : 'Index' styles : text : text-anchor : middle font-size : 26em font-weight : 600 opacity : 0.9 # ================================================================ - toolset : pollen-column-trees position : cx : 260 cy : 100 tools : # ------------------------------------------------------------ - type : name position : cx : 50 cy : -25 entity_index : 0 styles : name : text-anchor : middle font-size : 26em font-weight : 700 opacity : 1 # ------------------------------------------------------------ - type : 'usersvg' entity_index : 0 position : cx : 50 cy : 50 height : 100 width : 100 style : 'images' variables : path : '[[sak_layout_tomorrow_pollen_image_path]]' prefix : 'pollen_tree_' images : - default : > [[[ return \"/local/images/\"+ config.variables.path + config.variables.prefix + state + \".svg\"; ]]] # ------------------------------------------------------------ - type : state position : cx : 50 cy : 125 entity_index : 0 show : uom : none styles : state : text-anchor : middle font-size : 22em font-weight : 500 opacity : 0.7 # ================================================================ - toolset : pollen-column-grass position : cx : 395 cy : 100 tools : # ------------------------------------------------------------ - type : name position : cx : 50 cy : -25 entity_index : 1 styles : name : text-anchor : middle font-size : 26em font-weight : 700 opacity : 1 # ------------------------------------------------------------ - type : 'usersvg' entity_index : 1 position : cx : 50 cy : 50 height : 100 width : 100 style : 'images' variables : path : '[[sak_layout_tomorrow_pollen_image_path]]' prefix : 'pollen_grass_' images : - default : > [[[ return \"/local/images/\"+ config.variables.path + config.variables.prefix + state + \".svg\"; ]]] # ------------------------------------------------------------ - type : state position : cx : 50 cy : 125 entity_index : 1 show : uom : none styles : state : text-anchor : middle font-size : 22em font-weight : 500 opacity : 0.7 # ================================================================ - toolset : pollen-column-weed position : cx : 530 cy : 100 tools : # ------------------------------------------------------------ - type : name position : cx : 50 cy : -25 entity_index : 2 styles : name : text-anchor : middle font-size : 26em font-weight : 700 opacity : 1 # ------------------------------------------------------------ - type : 'usersvg' entity_index : 2 position : cx : 50 cy : 50 height : 100 width : 100 style : 'images' variables : path : '[[sak_layout_tomorrow_pollen_image_path]]' prefix : 'pollen_weed_' images : - default : > [[[ return \"/local/images/\"+ config.variables.path + config.variables.prefix + state + \".svg\"; ]]] # ------------------------------------------------------------ - type : state position : cx : 50 cy : 125 entity_index : 2 show : uom : none styles : state : text-anchor : middle font-size : 22em font-weight : 500 opacity : 0.7","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n YAML Template Definition"},{"location":"design/functional-card-tomorrow-pollen-card/","tags":["Design","Functional Card","Tomorrow Pollen Card"],"text":"Visualization \u00b6 This card uses the Material 3 theme D06, TealBlue This card shows you some possibilities to apply JavaScript to the svg image section Description Aspect Ratio Target Size A card that shows the pollen status from Tomorrow. You need to have setup that integration of course. 4/1 Grid with 2 columns SAK Tool Used for UserSvg Background svg image. Animated, state dependent Circle The half circle, as the left part of the circle is cutoff by the card. Animated, state dependent Icon Entity Icon. Name Name of Entity State State of entity Integrations \u00b6 You need the tomorrow.io integration : Interaction \u00b6 Part Description Card All tools connected to an entity do show by default the \"more-info\" dialog once clicked Usage \u00b6 1.0.0-rc.3 You need the SVG files from Github and put those in the www/images/tomorrow folder Images and colors used for this card are adapted versions from Isabella Alstr\u00f6ms pollen images Replace example entities with your entities! 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 - type : grid columns : 2 square : false cards : ####################################################################### - type : 'custom:swiss-army-knife-card' entities : - entity : sensor.tomorrow_io_tree_pollen_index name : 'Tree Pollen Index' layout : template : name : sak_layout_fce_tomorrow_pollen variables : - sak_layout_tomorrow_pollen_image_path : tomorrow/ - sak_layout_tomorrow_pollen_file_prefix : pollen_tree_ ####################################################################### - type : 'custom:swiss-army-knife-card' entities : - entity : sensor.tomorrow_io_grass_pollen_index name : 'Grass Pollen Index' layout : template : name : sak_layout_fce_tomorrow_pollen variables : - sak_layout_tomorrow_pollen_image_path : tomorrow/ - sak_layout_tomorrow_pollen_file_prefix : pollen_grass_ ####################################################################### - type : 'custom:swiss-army-knife-card' entities : - entity : sensor.tomorrow_io_weed_pollen_index name : 'Weed Pollen Index' layout : template : name : sak_layout_fce_tomorrow_pollen variables : - sak_layout_tomorrow_pollen_image_path : tomorrow/ - sak_layout_tomorrow_pollen_file_prefix : pollen_weed_ Data Default Required Description entities The tomorrow tree, grass or weed entity sak_layout_tomorrow_pollen_image_path tomorrow/ Folder in /local/images/, including a trailing slash! sak_layout_tomorrow_pollen_file_prefix Depending on the entity, pollen_tree, pollen_grass or pollen_weed YAML Template Definition \u00b6 1.0.0-rc.3 Full definition of layout template sak_layout_fce_tomorrow_pollen : template : type : layout defaults : - sak_layout_tomorrow_pollen_image_path : 'tomorrow/' - sak_layout_tomorrow_pollen_file_prefix : '' layout : aspectratio : 4/1 toolsets : # ================================================================ - toolset : half-circle position : cx : 0 # Center on cards border cy : 50 tools : # ------------------------------------------------------------ - type : circle position : cx : 50 cy : 50 radius : 50 entity_index : 0 animations : - state : 'none' styles : circle : fill : '#848484' - state : 'very_low' styles : circle : fill : '#ffe99d' - state : 'low' styles : circle : fill : '#fcc449' - state : 'medium' styles : circle : fill : '#f79f23' - state : 'high' styles : circle : fill : '#ef7f01' - state : 'very_high' styles : circle : fill : '#e73f10' styles : circle : stroke : none # ================================================================ - toolset : column-icon position : cx : 25 cy : 50 tools : # ------------------------------------------------------------ - type : icon position : cx : 50 cy : 50 align : center icon_size : 45 entity_index : 0 animations : - state : 'none' styles : icon : fill : var(--primary-background-color) - state : 'very_low' styles : icon : fill : var(--theme-ref-palette-secondary20) - state : 'low' styles : icon : fill : var(--theme-ref-palette-secondary20) - state : 'medium' styles : icon : fill : var(--primary-background-color) - state : 'high' styles : icon : fill : var(--primary-background-color) - state : 'very_high' styles : icon : fill : var(--primary-background-color) styles : icon : opacity : 0.9 fill : var(--primary-background-color) # ================================================================ - toolset : background-svg position : cx : 350 cy : 50 tools : - type : 'usersvg' entity_index : 0 position : cx : 50 cy : 50 height : 100 width : 100 style : 'images' variables : path : '[[sak_layout_tomorrow_pollen_image_path]]' prefix : '[[sak_layout_tomorrow_pollen_file_prefix]]' images : - default : > [[[ return \"/local/images/\"+ config.variables.path + config.variables.prefix + state + \".svg\"; ]]] styles : usersvg : opacity : 0.5 # ================================================================ - toolset : column-name position : cx : 70 cy : 50 tools : # ------------------------------------------------------------ - type : name position : cx : 50 cy : 37 entity_index : 0 styles : name : text-anchor : start font-size : 30em font-weight : 700 opacity : 1 # ------------------------------------------------------------ - type : state position : cx : 50 cy : 70 entity_index : 0 show : uom : none styles : state : text-anchor : start font-size : 26em font-weight : 500 opacity : 0.7","title":"Tomorrow Pollen Card"},{"location":"design/functional-card-tomorrow-pollen-card/#visualization","text":"This card uses the Material 3 theme D06, TealBlue This card shows you some possibilities to apply JavaScript to the svg image section Description Aspect Ratio Target Size A card that shows the pollen status from Tomorrow. You need to have setup that integration of course. 4/1 Grid with 2 columns SAK Tool Used for UserSvg Background svg image. Animated, state dependent Circle The half circle, as the left part of the circle is cutoff by the card. Animated, state dependent Icon Entity Icon. Name Name of Entity State State of entity","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Visualization"},{"location":"design/functional-card-tomorrow-pollen-card/#integrations","text":"You need the tomorrow.io integration :","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Integrations"},{"location":"design/functional-card-tomorrow-pollen-card/#interaction","text":"Part Description Card All tools connected to an entity do show by default the \"more-info\" dialog once clicked","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Interaction"},{"location":"design/functional-card-tomorrow-pollen-card/#usage","text":"1.0.0-rc.3 You need the SVG files from Github and put those in the www/images/tomorrow folder Images and colors used for this card are adapted versions from Isabella Alstr\u00f6ms pollen images Replace example entities with your entities! 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 - type : grid columns : 2 square : false cards : ####################################################################### - type : 'custom:swiss-army-knife-card' entities : - entity : sensor.tomorrow_io_tree_pollen_index name : 'Tree Pollen Index' layout : template : name : sak_layout_fce_tomorrow_pollen variables : - sak_layout_tomorrow_pollen_image_path : tomorrow/ - sak_layout_tomorrow_pollen_file_prefix : pollen_tree_ ####################################################################### - type : 'custom:swiss-army-knife-card' entities : - entity : sensor.tomorrow_io_grass_pollen_index name : 'Grass Pollen Index' layout : template : name : sak_layout_fce_tomorrow_pollen variables : - sak_layout_tomorrow_pollen_image_path : tomorrow/ - sak_layout_tomorrow_pollen_file_prefix : pollen_grass_ ####################################################################### - type : 'custom:swiss-army-knife-card' entities : - entity : sensor.tomorrow_io_weed_pollen_index name : 'Weed Pollen Index' layout : template : name : sak_layout_fce_tomorrow_pollen variables : - sak_layout_tomorrow_pollen_image_path : tomorrow/ - sak_layout_tomorrow_pollen_file_prefix : pollen_weed_ Data Default Required Description entities The tomorrow tree, grass or weed entity sak_layout_tomorrow_pollen_image_path tomorrow/ Folder in /local/images/, including a trailing slash! sak_layout_tomorrow_pollen_file_prefix Depending on the entity, pollen_tree, pollen_grass or pollen_weed","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Usage"},{"location":"design/functional-card-tomorrow-pollen-card/#yaml-template-definition","text":"1.0.0-rc.3 Full definition of layout template sak_layout_fce_tomorrow_pollen : template : type : layout defaults : - sak_layout_tomorrow_pollen_image_path : 'tomorrow/' - sak_layout_tomorrow_pollen_file_prefix : '' layout : aspectratio : 4/1 toolsets : # ================================================================ - toolset : half-circle position : cx : 0 # Center on cards border cy : 50 tools : # ------------------------------------------------------------ - type : circle position : cx : 50 cy : 50 radius : 50 entity_index : 0 animations : - state : 'none' styles : circle : fill : '#848484' - state : 'very_low' styles : circle : fill : '#ffe99d' - state : 'low' styles : circle : fill : '#fcc449' - state : 'medium' styles : circle : fill : '#f79f23' - state : 'high' styles : circle : fill : '#ef7f01' - state : 'very_high' styles : circle : fill : '#e73f10' styles : circle : stroke : none # ================================================================ - toolset : column-icon position : cx : 25 cy : 50 tools : # ------------------------------------------------------------ - type : icon position : cx : 50 cy : 50 align : center icon_size : 45 entity_index : 0 animations : - state : 'none' styles : icon : fill : var(--primary-background-color) - state : 'very_low' styles : icon : fill : var(--theme-ref-palette-secondary20) - state : 'low' styles : icon : fill : var(--theme-ref-palette-secondary20) - state : 'medium' styles : icon : fill : var(--primary-background-color) - state : 'high' styles : icon : fill : var(--primary-background-color) - state : 'very_high' styles : icon : fill : var(--primary-background-color) styles : icon : opacity : 0.9 fill : var(--primary-background-color) # ================================================================ - toolset : background-svg position : cx : 350 cy : 50 tools : - type : 'usersvg' entity_index : 0 position : cx : 50 cy : 50 height : 100 width : 100 style : 'images' variables : path : '[[sak_layout_tomorrow_pollen_image_path]]' prefix : '[[sak_layout_tomorrow_pollen_file_prefix]]' images : - default : > [[[ return \"/local/images/\"+ config.variables.path + config.variables.prefix + state + \".svg\"; ]]] styles : usersvg : opacity : 0.5 # ================================================================ - toolset : column-name position : cx : 70 cy : 50 tools : # ------------------------------------------------------------ - type : name position : cx : 50 cy : 37 entity_index : 0 styles : name : text-anchor : start font-size : 30em font-weight : 700 opacity : 1 # ------------------------------------------------------------ - type : state position : cx : 50 cy : 70 entity_index : 0 show : uom : none styles : state : text-anchor : start font-size : 26em font-weight : 500 opacity : 0.7","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n YAML Template Definition"},{"location":"design/how-to-create-functional-cards/","tags":["Design","Functional Cards"],"text":"The next step: create functional cards! \u00b6 In the end, we all want functional cards, no matter what look & feel we are using. We want something for binary and analog sensors, switches, power outlets, etc. This section, and the next sections is all about creating such cards. The steps I normally take to work from a certain look & feel to functional cards is as follows: Create some cards to establish that look & feel. Make a list of functional cards you like to have Sketch them Create them Now depending on how you want to work you: create SAK toolset templates from the start, just as I show in one of th 10 Step Tutorials. This can save you a lot of time creating functional cards, as you can re-use parts from the beginning! Create all cards first, check the similar toolsets, and create SAK templates The same holds true about using CSS Classes : Create user CSS Classes from the start of your design Or experiment first with several cards, before creating those classes. Either way: you will get your functional cards! This section serves as an example of functional cards, not as a starting point to win a Red-Dot Award! Step 1: Choose your look & feel \u00b6 For these sections, I choose Example 12 : as the basis for creating some example functional cards. These pages is still a work in progress, so AS IS This example view requires one of the Home Assistant Material 3 Themes Light example using HA Material 3 theme d06 (Teal blue) Dark example using HA Material 3 theme d06 (Teal blue) Step 2: Make a list \u00b6 I use a Mobile First approach. All cards should be readable and usable on my iPhone. So cards can't be very small! In most cases that means for the card size: Cards to fit a 1 column grid Cards to fit a 2 column grid Cards to fit a 3 column grid 4 column cards are too small on my mobile, hence I don't use or create them. Step 3: Sketch some cards \u00b6 I made some rough sketches based on the example 12 card :, but also used some cards I made as the basis to create other variants and cards. Step 4: Create them \u00b6 Last step is to create the cards you need. As an example, I created a bunch of functional cards for inspiration and learning. Check the next page for that!","title":"How to create functional cards"},{"location":"design/how-to-create-functional-cards/#the-next-step-create-functional-cards","text":"In the end, we all want functional cards, no matter what look & feel we are using. We want something for binary and analog sensors, switches, power outlets, etc. This section, and the next sections is all about creating such cards. The steps I normally take to work from a certain look & feel to functional cards is as follows: Create some cards to establish that look & feel. Make a list of functional cards you like to have Sketch them Create them Now depending on how you want to work you: create SAK toolset templates from the start, just as I show in one of th 10 Step Tutorials. This can save you a lot of time creating functional cards, as you can re-use parts from the beginning! Create all cards first, check the similar toolsets, and create SAK templates The same holds true about using CSS Classes : Create user CSS Classes from the start of your design Or experiment first with several cards, before creating those classes. Either way: you will get your functional cards! This section serves as an example of functional cards, not as a starting point to win a Red-Dot Award!","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n The next step: create functional cards!"},{"location":"design/how-to-create-functional-cards/#step-1-choose-your-look-feel","text":"For these sections, I choose Example 12 : as the basis for creating some example functional cards. These pages is still a work in progress, so AS IS This example view requires one of the Home Assistant Material 3 Themes Light example using HA Material 3 theme d06 (Teal blue) Dark example using HA Material 3 theme d06 (Teal blue)","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Step 1: Choose your look &amp; feel"},{"location":"design/how-to-create-functional-cards/#step-2-make-a-list","text":"I use a Mobile First approach. All cards should be readable and usable on my iPhone. So cards can't be very small! In most cases that means for the card size: Cards to fit a 1 column grid Cards to fit a 2 column grid Cards to fit a 3 column grid 4 column cards are too small on my mobile, hence I don't use or create them.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Step 2: Make a list"},{"location":"design/how-to-create-functional-cards/#step-3-sketch-some-cards","text":"I made some rough sketches based on the example 12 card :, but also used some cards I made as the basis to create other variants and cards.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Step 3: Sketch some cards"},{"location":"design/how-to-create-functional-cards/#step-4-create-them","text":"Last step is to create the cards you need. As an example, I created a bunch of functional cards for inspiration and learning. Check the next page for that!","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Step 4: Create them"},{"location":"design/how-to-design-your-card/","tags":["Design"],"text":"Where to start? \u00b6 So, you came here to read how to design your own card. That's good! If you're a graphic designer or some UX guy/woman, you will probably have tons of ideas, and after understanding the possibilities, you immediately fire up Adobe Indesign, Affinity Designer, Inkscape, or Procreate on your PC/Mac/iPad or went online using Figma or some other online tool to sketch your design. You're one of those people: The nice thing about the Swiss Army Knife is that you can design your own card. But not everybody is a graphical designer, so how to approach designing a visualization in that case if you're one of the below people? The bad thing about the Swiss Army Knife is that you do need a design for a card. Get inspired! \u00b6 If you browse the internet you can find all sorts of visualizations. I just picked 3 as an example: The left one is a simple flat design with no fancy stuff on it if we forget the waves in the background. The center is based on a Neumorphic design. I used that for some of the examples. You probably recognize the typical discs! By the way, the shadows in this example are a bit exaggerated for my taste. I've used more subtle shadows in the examples. The right one resembles a Homekit-alike design. It's clean and simple. All three are completely different designs, and all three can be build using the Swiss Army Knife card! Of course, you can't build them EXACTLY that way, but you can come a long way mimicking these examples. You will find several designs in the examples About half of them use a Neumorphic design, and the other half flat and Homekit alike designs. Ok, I got inspired. Now what? \u00b6 Well, you can try different approaches. Re-use an existing card and modify this to your own needs to design your own card Re-use some existing design you found on the internet to design your own card Create something completely new and have a unique card design Most of the possible card visualizations have been created I think. So taking inspiration from something you found on the web and using that as the basis for your cards is a tried and true approach. Once you've decided what style you want, you can start designing your cards. You can choose the simple approach or a more professional approach: The simple approach of \"outlining something\" and then trying to make it using trial and error in YAML Create a real design in an app on a 100x100 artboard and then create the card using the dimensions and coordinates of the design The easy approach: hand sketching some design \u00b6 I used this a lot and created about 50 of these sketches in Procreate on my iPad. Only some of them made it in production. Many were not useful, too complex to make, or just ugly. Below you see one of those sketches. It shows a pre-version of the server example (See: example 7 ) and a production example of the lights (See: example 2 ). Not yet Leonardo da Vinci quality, but I'm learning. At least my handwriting is on par with a doctor I then use this sketch as the basis to create the card. It took some guessing about coordinates and sizes. I use Notepad++ as an editor to produce the YAML. After every \"save\" action, I hit F5 to refresh Home Assistant's view to check if I'm satisfied with the result. If not, rinse and repeat... The server card took a lot of trial-and-error to get the 4 CPU/Load circles aligned the way I wanted to: The lights were much easier, as it involved much less parts: The professional approach: using an app \u00b6 Below you see Affinity Designer in action. For example 6 , I wanted to create something different with circles as the background, and on top of that some SAK tools (circles) with weather and airvisual data. The design is for a square card, so I created an artboard with a size 100mmx100mm. This is the default 'coordinate' system for a square card. As a result, the coordinates shown by Affinity Designer can be copied 1:1 in the cards YAML definition. No trial-and-error this time placing the tools at the right location. The units used are NOT relevant, it's all about a 100x100 canvas. Use centons if you like... As an example, I selected one of the circles where the weather type will be put. In the lower right corner of the Affinity Designer screen, you can see that I selected the center coordinates and (if you look closely) that the X coordinate is 77 (mm) and the Y coordinate 59 (mm). You also notice the width/height for the circle is 22 (mm). The resulting partial YAML definition is as follows: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 - toolset : weather-type position : # The center X and Y position from Affinity Designer cx : 77 cy : 59 tools : # The height is 22. We make the circle a bit smaller: # Outer is 22. Radius = 22/2 - 4 = 7 - type : 'circle' id : 0 position : cx : 50 cy : 50 radius : 7 styles : circle : fill : white And the final result after placing all the SAK tools ( circles , entity icon , entity state , and weather type ) on top of the background : a nice visualization, a bit artistic, clean, and showing a fair bit of information. The gradient also gives a nice touch to the overall look & feel. A word on Theme usage \u00b6 If you want your design to work in both Light and Dark theme mode, make sure you use theme colors for the implementation of your design. Swiss Army Knife examples 11 and 12 use my Home Assistant Material 3 themes to implement cards that adapt to theme colors and to theme modes (dark/light). Enjoy!","title":"How to design your card"},{"location":"design/how-to-design-your-card/#where-to-start","text":"So, you came here to read how to design your own card. That's good! If you're a graphic designer or some UX guy/woman, you will probably have tons of ideas, and after understanding the possibilities, you immediately fire up Adobe Indesign, Affinity Designer, Inkscape, or Procreate on your PC/Mac/iPad or went online using Figma or some other online tool to sketch your design. You're one of those people: The nice thing about the Swiss Army Knife is that you can design your own card. But not everybody is a graphical designer, so how to approach designing a visualization in that case if you're one of the below people? The bad thing about the Swiss Army Knife is that you do need a design for a card.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Where to start?"},{"location":"design/how-to-design-your-card/#get-inspired","text":"If you browse the internet you can find all sorts of visualizations. I just picked 3 as an example: The left one is a simple flat design with no fancy stuff on it if we forget the waves in the background. The center is based on a Neumorphic design. I used that for some of the examples. You probably recognize the typical discs! By the way, the shadows in this example are a bit exaggerated for my taste. I've used more subtle shadows in the examples. The right one resembles a Homekit-alike design. It's clean and simple. All three are completely different designs, and all three can be build using the Swiss Army Knife card! Of course, you can't build them EXACTLY that way, but you can come a long way mimicking these examples. You will find several designs in the examples About half of them use a Neumorphic design, and the other half flat and Homekit alike designs.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Get inspired!"},{"location":"design/how-to-design-your-card/#ok-i-got-inspired-now-what","text":"Well, you can try different approaches. Re-use an existing card and modify this to your own needs to design your own card Re-use some existing design you found on the internet to design your own card Create something completely new and have a unique card design Most of the possible card visualizations have been created I think. So taking inspiration from something you found on the web and using that as the basis for your cards is a tried and true approach. Once you've decided what style you want, you can start designing your cards. You can choose the simple approach or a more professional approach: The simple approach of \"outlining something\" and then trying to make it using trial and error in YAML Create a real design in an app on a 100x100 artboard and then create the card using the dimensions and coordinates of the design","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Ok, I got inspired. Now what?"},{"location":"design/how-to-design-your-card/#the-easy-approach-hand-sketching-some-design","text":"I used this a lot and created about 50 of these sketches in Procreate on my iPad. Only some of them made it in production. Many were not useful, too complex to make, or just ugly. Below you see one of those sketches. It shows a pre-version of the server example (See: example 7 ) and a production example of the lights (See: example 2 ). Not yet Leonardo da Vinci quality, but I'm learning. At least my handwriting is on par with a doctor I then use this sketch as the basis to create the card. It took some guessing about coordinates and sizes. I use Notepad++ as an editor to produce the YAML. After every \"save\" action, I hit F5 to refresh Home Assistant's view to check if I'm satisfied with the result. If not, rinse and repeat... The server card took a lot of trial-and-error to get the 4 CPU/Load circles aligned the way I wanted to: The lights were much easier, as it involved much less parts:","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n The easy approach: hand sketching some design"},{"location":"design/how-to-design-your-card/#the-professional-approach-using-an-app","text":"Below you see Affinity Designer in action. For example 6 , I wanted to create something different with circles as the background, and on top of that some SAK tools (circles) with weather and airvisual data. The design is for a square card, so I created an artboard with a size 100mmx100mm. This is the default 'coordinate' system for a square card. As a result, the coordinates shown by Affinity Designer can be copied 1:1 in the cards YAML definition. No trial-and-error this time placing the tools at the right location. The units used are NOT relevant, it's all about a 100x100 canvas. Use centons if you like... As an example, I selected one of the circles where the weather type will be put. In the lower right corner of the Affinity Designer screen, you can see that I selected the center coordinates and (if you look closely) that the X coordinate is 77 (mm) and the Y coordinate 59 (mm). You also notice the width/height for the circle is 22 (mm). The resulting partial YAML definition is as follows: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 - toolset : weather-type position : # The center X and Y position from Affinity Designer cx : 77 cy : 59 tools : # The height is 22. We make the circle a bit smaller: # Outer is 22. Radius = 22/2 - 4 = 7 - type : 'circle' id : 0 position : cx : 50 cy : 50 radius : 7 styles : circle : fill : white And the final result after placing all the SAK tools ( circles , entity icon , entity state , and weather type ) on top of the background : a nice visualization, a bit artistic, clean, and showing a fair bit of information. The gradient also gives a nice touch to the overall look & feel.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n The professional approach: using an app"},{"location":"design/how-to-design-your-card/#a-word-on-theme-usage","text":"If you want your design to work in both Light and Dark theme mode, make sure you use theme colors for the implementation of your design. Swiss Army Knife examples 11 and 12 use my Home Assistant Material 3 themes to implement cards that adapt to theme colors and to theme modes (dark/light). Enjoy!","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n A word on Theme usage"},{"location":"examples/example-1/","tags":["Examples"],"text":"Example 1: AirVisual and Weather forecast \u00b6 A single card displaying data from Airvisual, the current weather and a 5 day weather forecast. Topcard showing AirVisual data with some weather data: Bottom card showing weather and weather forecast: Visualization \u00b6 AirVisual \u00b6 The AirVisual card shows two blocks: The left part shows the AirVisual data with 24 hours of history The AQI 'face', an external SVG The AQI value with interpretation (good, etc.) The AQI main pollutant. 24 hour history of the AQI value The right part shows weather data. The weathertype is displayed using an external animated SVG And below that, the outside temperature, humidity, pressure and wind speed. Weather forecast \u00b6 This visualization is divided into three major blocks: The top part shows the weathertype, temperature, humidity and AQI value. The weathertype is displayed using an external animated SVG Next are three segmented arc tools with dedicated colorstops and the state value and icon inside. The AQI icon is state dependent. The second / middle block shows pressure, wind and wind direction and sunset and sunrise The last block shows the 5 day weather forecast. The localized short day name using a bit of javascript in the YAML configuration The expected weather type using (again) external animated SVG's The maximum expected temperature The minimum expected temperature The expected precipitation Interactions \u00b6 All tools support by default the \"more-info\" dialog once clicked. Used Home Assistant Integrations \u00b6 Met.no Weather integration Airvisual integration In total approx 50 entities are used to build this visualization. How to make it work in your own installation \u00b6 Card \u00b6 Required Home Assistant Integrations The visualization is build on the Met.no and Airvisual entities, so you need these integrations: Met.no Weather integration : Airvisual integration : Required Home Assistant Entity Changes The Airvisual entities should be the same for any installation, so no changes required on that part. The Met.no integration creates the weather.changeme entity. Adapt the changeme part to your own installation! Other weather integrations won't work, as they create different states and attributes View and Card Configuration \u00b6 If you LOVE YAML If you DON'T love YAML It's your lucky day This is your go-to card: absolutely NO re-use, so no templates are used to define this card. It's a whopping 1.500 lines of YAML to display about 50 entities. Only 30 lines/entity! It was my first card, made in a time where templates didn't exist yet! Skip this one for now Skip this example and look at the other examples first! Or start with this one, and learn how to read YAML the hard way... Lovelace view \u00b6 file location included from view-sake1.yml /lovelace/views sak-examples-dashboard.yaml File assets \u00b6 To display the weather type, you need the external animated SVG's which are located in the /local/images/weather folder Definitions used in the animations section to display the weather type icon images : - clear-night-night : /local/images/weather/clear-night.svg - cloudy-day : /local/images/weather/cloudy-day.svg - cloudy-night : /local/images/weather/cloudy-night.svg - fog-day : /local/images/weather/fog-day.svg - fog-night : /local/images/weather/fog-night.svg - hail-day : /local/images/weather/hail-day.svg - hail-night : /local/images/weather/hail-night.svg - lightning-day : /local/images/weather/lightning.svg - lightning-night : /local/images/weather/lightning.svg - partlycloudy-day : /local/images/weather/partlycloudy-day.svg - partlycloudy-night : /local/images/weather/partlycloudy-night.svg - pouring-day : /local/images/weather/pouring.svg - pouring-night : /local/images/weather/pouring-night.svg - rainy-day : /local/images/weather/rainy-day.svg - rainy-night : /local/images/weather/rainy-night.svg - snowy-day : /local/images/weather/snowy-day.svg - snowy-night : /local/images/weather/snowy-night.svg - snowy-rainy-day : /local/images/weather/snowy-rainy-day.svg - snowy-rainy-night : /local/images/weather/snowy-rainy-night.svg - sunny-day : /local/images/weather/sunny-day.svg - sunny-night : /local/images/weather/clear-night.svg - snowy-rainy-day : /local/images/weather/snowy-rainy-day.svg - snowy-rainy-night : /local/images/weather/snowy-rainy-night.svg - windy-day : /local/images/weather/windy-day.svg - windy-night : /local/images/weather/windy-night.svg - windy-variant-day : /local/images/weather/windy-variant.svg - windy-variant-night : /local/images/weather/windy-variant.svg animations : - state : '[[[ return (state); ]]]' image : > [[[ if (states[\"sun.sun\"].state == 'below_horizon') return (state + '-night'); return (state + '-day'); ]]] Remarks \u00b6 This view shows the dutch translation for \"Partly Cloudy \u2192 Gedeeltelijk bewolkt\" and the wind direction \"WSW \u2192 WZW\". Support for translations is possible using a YAML configuration.","title":"1. Airvisual & Weather forecast"},{"location":"examples/example-1/#example-1-airvisual-and-weather-forecast","text":"A single card displaying data from Airvisual, the current weather and a 5 day weather forecast. Topcard showing AirVisual data with some weather data: Bottom card showing weather and weather forecast:","title":"Example 1: AirVisual and Weather forecast"},{"location":"examples/example-1/#visualization","text":"","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Visualization"},{"location":"examples/example-1/#airvisual","text":"The AirVisual card shows two blocks: The left part shows the AirVisual data with 24 hours of history The AQI 'face', an external SVG The AQI value with interpretation (good, etc.) The AQI main pollutant. 24 hour history of the AQI value The right part shows weather data. The weathertype is displayed using an external animated SVG And below that, the outside temperature, humidity, pressure and wind speed.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n AirVisual"},{"location":"examples/example-1/#weather-forecast","text":"This visualization is divided into three major blocks: The top part shows the weathertype, temperature, humidity and AQI value. The weathertype is displayed using an external animated SVG Next are three segmented arc tools with dedicated colorstops and the state value and icon inside. The AQI icon is state dependent. The second / middle block shows pressure, wind and wind direction and sunset and sunrise The last block shows the 5 day weather forecast. The localized short day name using a bit of javascript in the YAML configuration The expected weather type using (again) external animated SVG's The maximum expected temperature The minimum expected temperature The expected precipitation","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Weather forecast"},{"location":"examples/example-1/#interactions","text":"All tools support by default the \"more-info\" dialog once clicked.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Interactions"},{"location":"examples/example-1/#used-home-assistant-integrations","text":"Met.no Weather integration Airvisual integration In total approx 50 entities are used to build this visualization.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Used Home Assistant Integrations"},{"location":"examples/example-1/#how-to-make-it-work-in-your-own-installation","text":"","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n How to make it work in your own installation"},{"location":"examples/example-1/#card","text":"Required Home Assistant Integrations The visualization is build on the Met.no and Airvisual entities, so you need these integrations: Met.no Weather integration : Airvisual integration : Required Home Assistant Entity Changes The Airvisual entities should be the same for any installation, so no changes required on that part. The Met.no integration creates the weather.changeme entity. Adapt the changeme part to your own installation! Other weather integrations won't work, as they create different states and attributes","title":"Card"},{"location":"examples/example-1/#view-and-card-configuration","text":"If you LOVE YAML If you DON'T love YAML It's your lucky day This is your go-to card: absolutely NO re-use, so no templates are used to define this card. It's a whopping 1.500 lines of YAML to display about 50 entities. Only 30 lines/entity! It was my first card, made in a time where templates didn't exist yet! Skip this one for now Skip this example and look at the other examples first! Or start with this one, and learn how to read YAML the hard way...","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n View and Card Configuration"},{"location":"examples/example-1/#lovelace-view","text":"file location included from view-sake1.yml /lovelace/views sak-examples-dashboard.yaml","title":"Lovelace view"},{"location":"examples/example-1/#file-assets","text":"To display the weather type, you need the external animated SVG's which are located in the /local/images/weather folder Definitions used in the animations section to display the weather type icon images : - clear-night-night : /local/images/weather/clear-night.svg - cloudy-day : /local/images/weather/cloudy-day.svg - cloudy-night : /local/images/weather/cloudy-night.svg - fog-day : /local/images/weather/fog-day.svg - fog-night : /local/images/weather/fog-night.svg - hail-day : /local/images/weather/hail-day.svg - hail-night : /local/images/weather/hail-night.svg - lightning-day : /local/images/weather/lightning.svg - lightning-night : /local/images/weather/lightning.svg - partlycloudy-day : /local/images/weather/partlycloudy-day.svg - partlycloudy-night : /local/images/weather/partlycloudy-night.svg - pouring-day : /local/images/weather/pouring.svg - pouring-night : /local/images/weather/pouring-night.svg - rainy-day : /local/images/weather/rainy-day.svg - rainy-night : /local/images/weather/rainy-night.svg - snowy-day : /local/images/weather/snowy-day.svg - snowy-night : /local/images/weather/snowy-night.svg - snowy-rainy-day : /local/images/weather/snowy-rainy-day.svg - snowy-rainy-night : /local/images/weather/snowy-rainy-night.svg - sunny-day : /local/images/weather/sunny-day.svg - sunny-night : /local/images/weather/clear-night.svg - snowy-rainy-day : /local/images/weather/snowy-rainy-day.svg - snowy-rainy-night : /local/images/weather/snowy-rainy-night.svg - windy-day : /local/images/weather/windy-day.svg - windy-night : /local/images/weather/windy-night.svg - windy-variant-day : /local/images/weather/windy-variant.svg - windy-variant-night : /local/images/weather/windy-variant.svg animations : - state : '[[[ return (state); ]]]' image : > [[[ if (states[\"sun.sun\"].state == 'below_horizon') return (state + '-night'); return (state + '-day'); ]]]","title":"File assets"},{"location":"examples/example-1/#remarks","text":"This view shows the dutch translation for \"Partly Cloudy \u2192 Gedeeltelijk bewolkt\" and the wind direction \"WSW \u2192 WZW\". Support for translations is possible using a YAML configuration.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Remarks"},{"location":"examples/example-10/","tags":["Examples"],"text":"Example 10: A colorful mix \u00b6 And a short GIF to give you an idea of the CSS animations : Actions: I moved I switched all three lights to on. I changed the brightness of the right-most light back and forth. And finally, I switched all three lights to off. Visualization \u00b6 Indoor environment sensors, occupancy, airvisual, and some light switchable square cards with status, icon, history, segmented arc, and card animations. Cards 1, 2 and 3 use a similar design with small variations in the state bar (top of card), thickness of segmented arc and history bars. Interactions \u00b6 All tools support by default the \"more-info\" dialog once clicked. The lights can be switched on/off by clicking/tapping the large light icon. All lights brightness update during dragging. Used Home Assistant Integrations \u00b6 First row: Aqara temperature, humidity and pressure Zigbee sensors Second row: Aqara Occupancy Zigbee sensor Second row: Airvisual integration Third row: Ikea Tradfri Zigbee Lights I use [zigbee2mqtt][zigbee2mqtt-url] for the Zigbee sensors and lights. Zigbee2mqtt can be used either as docker container or [Home Assistant Add-on][zigbee2mqtt-addon-url] combined with the MQTT integration How to make it work in your own installation \u00b6 Other than the Air Visual integration, the other generic ones are temperature, humidity, and pressure sensors, occupancy switches, and light switches, so you can replace them with your own entities. Environment sensors (First row) \u00b6 Required Home Assistant Entity Changes Replace the sensor entities with your own entities. As long as the entities do not use an attribute for the value, the history tool will work. Movement/occupancy sensor (Second row) \u00b6 Required Home Assistant Entity Changes Replace the occupancy entity with your own entity. AirVisual (Second row) \u00b6 Required Home Assistant Integrations The only integration you need are the Airvisual entities, so you need the Airvisual integration Required Home Assistant Entity Changes The Airvisual entities should be the same for every installation, so no changes are needed on that part. If you don't have a presence sensor, replace it with an on/off sensor and the card should at least work! Lights (Third row) \u00b6 Required Home Assistant Entity Changes Replace the light entities with your light entities that have a brightness attribute. View and Card Configuration \u00b6 Lovelace view \u00b6 file location included from view-sake10.yml /lovelace/views sak-examples-dashboard.yaml Decluttering templates \u00b6 None. SAK templates \u00b6 None. Remarks \u00b6 The AQI Card (second row, second card) You see two lines below the \"46 AQI\" state: a scale and the actual value. This is the segmented arc which is configured in such a way that it resembles a straight line. So this is not a new tool you're seeing The segarc config uses an elliptical display and a small arc to resemble a line. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 - type : 'segarc' id : 0 position : cx : 65 cy : 35 radius_x : 120 # Wide ellipse radius_y : 1 # ...with almost no height start_angle : 190 # Show only 20 degrees of the end_angle : 170 # ..ellipse to look like a straight line width : 2 entity_index : 0 scale : min : 0 max : 300 width : 2 offset : 3","title":"10. Colorful mix"},{"location":"examples/example-10/#example-10-a-colorful-mix","text":"And a short GIF to give you an idea of the CSS animations : Actions: I moved I switched all three lights to on. I changed the brightness of the right-most light back and forth. And finally, I switched all three lights to off.","title":"Example 10: A colorful mix"},{"location":"examples/example-10/#visualization","text":"Indoor environment sensors, occupancy, airvisual, and some light switchable square cards with status, icon, history, segmented arc, and card animations. Cards 1, 2 and 3 use a similar design with small variations in the state bar (top of card), thickness of segmented arc and history bars.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Visualization"},{"location":"examples/example-10/#interactions","text":"All tools support by default the \"more-info\" dialog once clicked. The lights can be switched on/off by clicking/tapping the large light icon. All lights brightness update during dragging.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Interactions"},{"location":"examples/example-10/#used-home-assistant-integrations","text":"First row: Aqara temperature, humidity and pressure Zigbee sensors Second row: Aqara Occupancy Zigbee sensor Second row: Airvisual integration Third row: Ikea Tradfri Zigbee Lights I use [zigbee2mqtt][zigbee2mqtt-url] for the Zigbee sensors and lights. Zigbee2mqtt can be used either as docker container or [Home Assistant Add-on][zigbee2mqtt-addon-url] combined with the MQTT integration","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Used Home Assistant Integrations"},{"location":"examples/example-10/#how-to-make-it-work-in-your-own-installation","text":"Other than the Air Visual integration, the other generic ones are temperature, humidity, and pressure sensors, occupancy switches, and light switches, so you can replace them with your own entities.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n How to make it work in your own installation"},{"location":"examples/example-10/#environment-sensors-first-row","text":"Required Home Assistant Entity Changes Replace the sensor entities with your own entities. As long as the entities do not use an attribute for the value, the history tool will work.","title":"Environment sensors (First row)"},{"location":"examples/example-10/#movementoccupancy-sensor-second-row","text":"Required Home Assistant Entity Changes Replace the occupancy entity with your own entity.","title":"Movement/occupancy sensor (Second row)"},{"location":"examples/example-10/#airvisual-second-row","text":"Required Home Assistant Integrations The only integration you need are the Airvisual entities, so you need the Airvisual integration Required Home Assistant Entity Changes The Airvisual entities should be the same for every installation, so no changes are needed on that part. If you don't have a presence sensor, replace it with an on/off sensor and the card should at least work!","title":"AirVisual (Second row)"},{"location":"examples/example-10/#lights-third-row","text":"Required Home Assistant Entity Changes Replace the light entities with your light entities that have a brightness attribute.","title":"Lights (Third row)"},{"location":"examples/example-10/#view-and-card-configuration","text":"","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n View and Card Configuration"},{"location":"examples/example-10/#lovelace-view","text":"file location included from view-sake10.yml /lovelace/views sak-examples-dashboard.yaml","title":"Lovelace view"},{"location":"examples/example-10/#decluttering-templates","text":"None.","title":"Decluttering templates"},{"location":"examples/example-10/#sak-templates","text":"None.","title":"SAK templates"},{"location":"examples/example-10/#remarks","text":"The AQI Card (second row, second card) You see two lines below the \"46 AQI\" state: a scale and the actual value. This is the segmented arc which is configured in such a way that it resembles a straight line. So this is not a new tool you're seeing The segarc config uses an elliptical display and a small arc to resemble a line. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 - type : 'segarc' id : 0 position : cx : 65 cy : 35 radius_x : 120 # Wide ellipse radius_y : 1 # ...with almost no height start_angle : 190 # Show only 20 degrees of the end_angle : 170 # ..ellipse to look like a straight line width : 2 entity_index : 0 scale : min : 0 max : 300 width : 2 offset : 3","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Remarks"},{"location":"examples/example-11/","tags":["Examples"],"text":"Example 11: Boiler and Electricity cards \u00b6 Light example using Home Assistant Material 3 theme c11 (Purple) Dark example using Home Assistant Material 3 theme c11 (Purple) Visualization \u00b6 This visualization shows colorful boiler and electricity cards with possibly very \"Dutch/European\" integrations. The second card has the data from my 3 phase smart meter. My 4 kWp solar system is disconnected, so you don't see any returned power. Boiler \u00b6 It shows a thermostat with some extra data (heat/hot water active) and the boilers' setpoints and actual measured temperatures. The thermostat card uses two overlayed segmented arcs: - One (with scale) for the actual room temperature measured by the thermostat - One (white, no scale, superimposed on previous segarc) for the setpoint. You can see the setpoint in the screenshot: the room temperature is 19.6 degrees celcius and the setpoint is 20.0 degrees celcius. The latter one is a smaller segarc. Electricity \u00b6 The electricity card shows my 230V/3x25A smart meter data where the upper segmented arc shows the delivered (from the grid) electricity, and the lower part the returned (to the grid) electricity from for instance a solar system. In my case, my 4 kWp solar systems converter delivers up to 3680 W (230V / 16A) and is connected to a single phase (L3). Used Home Assistant Integrations \u00b6 Boiler: OpenTherm Gateway integration. I'm using both a MQTT based integration and the official OpenTherm Gateway integration . Electricity: DSMR smart meter readings using the separate DSMR Reader application, ie the DMSR Reader integration which uses MQTT to transfer the data to Home Assistant. How to make it work in your own installation \u00b6 Both boiler and electricity are quite specific, but give you a nice idea what is possible to control a thermostat for instance. Boiler (top two cards) \u00b6 Required Home Assistant Integrations OpenTherm Gateway integration Required Home Assistant Entity Changes The OpenTherm Integration uses a name for the thermostat, in my case, this is calenta . If you also use the OpenTherm Integration, replace calenta with your own installation name. In other cases, you should be able to customize entities for your own thermostat/boiler configuration. The entities for the first card of the boiler: The first entity is the current room temperature ( sensor.room_temp_thermostat_calenta ) The last is just a random Zigbee sensor showing the current humidity inside ( sensor.studym_iaq_humidity ) The other sensors are to control the thermostat ( room_setpoint_thermostat_calenta ) using the slider and the boiler active / flame / hot water requests. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 - type : 'custom:swiss-army-knife-card' entities : - entity : sensor.room_temp_thermostat_calenta name : Actueel - entity : binary_sensor.slave_ch_active_boiler_calenta icon : 'mdi:radiator' name : Warmtevraag? - entity : binary_sensor.slave_dhw_active_boiler_calenta icon : 'mdi:shower' name : WW vraag? - entity : binary_sensor.slave_flame_on_boiler_calenta icon : 'mdi:fire' name : Brander Aan? - entity : sensor.room_setpoint_thermostat_calenta icon : 'mdi:thermostat-box' name : Gewenst decimals : 1 - entity : sensor.studym_iaq_humidity unit : '%' decimals : 0 The entities for the second card of the boiler: The slave_flame_on entity is used to show a white background (using a rectangle) of the boiler is on 1 2 3 4 5 6 7 8 9 10 11 12 13 14 - type : 'custom:swiss-army-knife-card' entities : - entity : binary_sensor.slave_flame_on_boiler_calenta icon : 'mdi:fire' name : Brander Aan? - entity : sensor.control_setpoint_boiler_calenta name : Setpoint decimals : 1 - entity : sensor.ch_water_temp_boiler_calenta name : Actual decimals : 1 - entity : sensor.return_water_temp_boiler_calenta name : Return decimals : 1 Electricity \u00b6 Required Integrations - DMSR Reader integration Required Entity Changes If you are using the DSMR Reader integration, no changes are necessary for the electricity part. The DSMR Reader integration generates generic sensor entities: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 - type : 'custom:swiss-army-knife-card' entities : #Total - entity : sensor.dsmr_reading_electricity_currently_delivered decimals : 3 name : 'Total' area : 'Tha Moon' - entity : sensor.dsmr_reading_electricity_currently_returned decimals : 3 #L1 - entity : sensor.dsmr_reading_phase_currently_delivered_l1 name : 'L1' decimals : 3 - entity : sensor.dsmr_reading_phase_currently_returned_l1 decimals : 3 #L2 - entity : sensor.dsmr_reading_phase_currently_delivered_l2 name : 'L2' decimals : 3 - entity : sensor.dsmr_reading_phase_currently_returned_l2 decimals : 3 #L3 - entity : sensor.dsmr_reading_phase_currently_delivered_l3 name : 'L3' decimals : 3 - entity : sensor.dsmr_reading_phase_currently_returned_l3 decimals : 3 Interactions \u00b6 The slider for the thermostat will set the temperature using the climate.set_temperature service for my climate.calenta boiler entity in 0.5 degrees Celcius steps and a range between 17..23 degrees Celcius. All tools support by default the \"more-info\" dialog once clicked. View and Card Configuration \u00b6 Lovelace view \u00b6 file location included from view-sake11.yml /lovelace/views sak-examples-dashboard.yaml Decluttering templates \u00b6 None. SAK templates \u00b6 This view uses a template for the electricity card. name file toolset_electricity_delivered_returned toolset-electricity-delivered-returned-template.yaml The four parts therefore can use the same definition: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 # ================================================================ - toolset : totals template : name : toolset_electricity_delivered_returned variables : - entity_delivered : 0 - entity_returned : 1 - cx : 30 - cy : 50 # ================================================================ - toolset : L1 template : name : toolset_electricity_delivered_returned variables : - entity_delivered : 2 - entity_returned : 3 - cx : 80 - cy : 50 - opacity : 0.7 # ================================================================ - toolset : L2 template : name : toolset_electricity_delivered_returned variables : - entity_delivered : 4 - entity_returned : 5 - cx : 125 - cy : 50 - opacity : 0.7 # ================================================================ - toolset : L3 template : name : toolset_electricity_delivered_returned variables : - entity_delivered : 6 - entity_returned : 7 - cx : 170 - cy : 50 - opacity : 0.7","title":"11. Boiler and electricity (m3)"},{"location":"examples/example-11/#example-11-boiler-and-electricity-cards","text":"Light example using Home Assistant Material 3 theme c11 (Purple) Dark example using Home Assistant Material 3 theme c11 (Purple)","title":"Example 11: Boiler and Electricity cards"},{"location":"examples/example-11/#visualization","text":"This visualization shows colorful boiler and electricity cards with possibly very \"Dutch/European\" integrations. The second card has the data from my 3 phase smart meter. My 4 kWp solar system is disconnected, so you don't see any returned power.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Visualization"},{"location":"examples/example-11/#boiler","text":"It shows a thermostat with some extra data (heat/hot water active) and the boilers' setpoints and actual measured temperatures. The thermostat card uses two overlayed segmented arcs: - One (with scale) for the actual room temperature measured by the thermostat - One (white, no scale, superimposed on previous segarc) for the setpoint. You can see the setpoint in the screenshot: the room temperature is 19.6 degrees celcius and the setpoint is 20.0 degrees celcius. The latter one is a smaller segarc.","title":"Boiler"},{"location":"examples/example-11/#electricity","text":"The electricity card shows my 230V/3x25A smart meter data where the upper segmented arc shows the delivered (from the grid) electricity, and the lower part the returned (to the grid) electricity from for instance a solar system. In my case, my 4 kWp solar systems converter delivers up to 3680 W (230V / 16A) and is connected to a single phase (L3).","title":"Electricity"},{"location":"examples/example-11/#used-home-assistant-integrations","text":"Boiler: OpenTherm Gateway integration. I'm using both a MQTT based integration and the official OpenTherm Gateway integration . Electricity: DSMR smart meter readings using the separate DSMR Reader application, ie the DMSR Reader integration which uses MQTT to transfer the data to Home Assistant.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Used Home Assistant Integrations"},{"location":"examples/example-11/#how-to-make-it-work-in-your-own-installation","text":"Both boiler and electricity are quite specific, but give you a nice idea what is possible to control a thermostat for instance.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n How to make it work in your own installation"},{"location":"examples/example-11/#boiler-top-two-cards","text":"Required Home Assistant Integrations OpenTherm Gateway integration Required Home Assistant Entity Changes The OpenTherm Integration uses a name for the thermostat, in my case, this is calenta . If you also use the OpenTherm Integration, replace calenta with your own installation name. In other cases, you should be able to customize entities for your own thermostat/boiler configuration. The entities for the first card of the boiler: The first entity is the current room temperature ( sensor.room_temp_thermostat_calenta ) The last is just a random Zigbee sensor showing the current humidity inside ( sensor.studym_iaq_humidity ) The other sensors are to control the thermostat ( room_setpoint_thermostat_calenta ) using the slider and the boiler active / flame / hot water requests. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 - type : 'custom:swiss-army-knife-card' entities : - entity : sensor.room_temp_thermostat_calenta name : Actueel - entity : binary_sensor.slave_ch_active_boiler_calenta icon : 'mdi:radiator' name : Warmtevraag? - entity : binary_sensor.slave_dhw_active_boiler_calenta icon : 'mdi:shower' name : WW vraag? - entity : binary_sensor.slave_flame_on_boiler_calenta icon : 'mdi:fire' name : Brander Aan? - entity : sensor.room_setpoint_thermostat_calenta icon : 'mdi:thermostat-box' name : Gewenst decimals : 1 - entity : sensor.studym_iaq_humidity unit : '%' decimals : 0 The entities for the second card of the boiler: The slave_flame_on entity is used to show a white background (using a rectangle) of the boiler is on 1 2 3 4 5 6 7 8 9 10 11 12 13 14 - type : 'custom:swiss-army-knife-card' entities : - entity : binary_sensor.slave_flame_on_boiler_calenta icon : 'mdi:fire' name : Brander Aan? - entity : sensor.control_setpoint_boiler_calenta name : Setpoint decimals : 1 - entity : sensor.ch_water_temp_boiler_calenta name : Actual decimals : 1 - entity : sensor.return_water_temp_boiler_calenta name : Return decimals : 1","title":"Boiler (top two cards)"},{"location":"examples/example-11/#electricity_1","text":"Required Integrations - DMSR Reader integration Required Entity Changes If you are using the DSMR Reader integration, no changes are necessary for the electricity part. The DSMR Reader integration generates generic sensor entities: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 - type : 'custom:swiss-army-knife-card' entities : #Total - entity : sensor.dsmr_reading_electricity_currently_delivered decimals : 3 name : 'Total' area : 'Tha Moon' - entity : sensor.dsmr_reading_electricity_currently_returned decimals : 3 #L1 - entity : sensor.dsmr_reading_phase_currently_delivered_l1 name : 'L1' decimals : 3 - entity : sensor.dsmr_reading_phase_currently_returned_l1 decimals : 3 #L2 - entity : sensor.dsmr_reading_phase_currently_delivered_l2 name : 'L2' decimals : 3 - entity : sensor.dsmr_reading_phase_currently_returned_l2 decimals : 3 #L3 - entity : sensor.dsmr_reading_phase_currently_delivered_l3 name : 'L3' decimals : 3 - entity : sensor.dsmr_reading_phase_currently_returned_l3 decimals : 3","title":"Electricity"},{"location":"examples/example-11/#interactions","text":"The slider for the thermostat will set the temperature using the climate.set_temperature service for my climate.calenta boiler entity in 0.5 degrees Celcius steps and a range between 17..23 degrees Celcius. All tools support by default the \"more-info\" dialog once clicked.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Interactions"},{"location":"examples/example-11/#view-and-card-configuration","text":"","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n View and Card Configuration"},{"location":"examples/example-11/#lovelace-view","text":"file location included from view-sake11.yml /lovelace/views sak-examples-dashboard.yaml","title":"Lovelace view"},{"location":"examples/example-11/#decluttering-templates","text":"None.","title":"Decluttering templates"},{"location":"examples/example-11/#sak-templates","text":"This view uses a template for the electricity card. name file toolset_electricity_delivered_returned toolset-electricity-delivered-returned-template.yaml The four parts therefore can use the same definition: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 # ================================================================ - toolset : totals template : name : toolset_electricity_delivered_returned variables : - entity_delivered : 0 - entity_returned : 1 - cx : 30 - cy : 50 # ================================================================ - toolset : L1 template : name : toolset_electricity_delivered_returned variables : - entity_delivered : 2 - entity_returned : 3 - cx : 80 - cy : 50 - opacity : 0.7 # ================================================================ - toolset : L2 template : name : toolset_electricity_delivered_returned variables : - entity_delivered : 4 - entity_returned : 5 - cx : 125 - cy : 50 - opacity : 0.7 # ================================================================ - toolset : L3 template : name : toolset_electricity_delivered_returned variables : - entity_delivered : 6 - entity_returned : 7 - cx : 170 - cy : 50 - opacity : 0.7","title":"SAK templates"},{"location":"examples/example-12/","tags":["Examples"],"text":"Example 12: Wide cards showing lots of sensors \u00b6 This example view requires one of the Home Assistant Material 3 Themes Light example using HA Material 3 theme d06 (Teal blue) Dark example using HA Material 3 theme d06 (Teal blue) How to \u00b6 The Hestia server statistics card is available as tutorial #2 . In this tutorial you learn how to recreate that specific card and as a bonus you learn to make a SAK template that is used for the 4 sensors. Furthermore, to show how you can create a full set of cards using a certain look & feel, I just created this example: Full length (aspectratio 6/1) cards: An AirVisual Card An Environment Card with battery/linkquality (Bath #2) A Server Statistics Card (Hestia) Half length (aspectratio 3/1) cards: A Power Usage Card (Kitchen) A Switch w/ Power Usage Card (Air) An Occupancy Card with battery/linkquality (Movement) A Fan Card (Fan) A Fire Detection Card with battery/linkquality (Fire 1 st , same sensor as Movement) A Switch Card (Heater) The animated version looks like this: And YES, you can have Alert icons too if you want Visualization \u00b6 This visualization shows some multi entity wide cards instead of the abundant square cards. All cards have an aspect ratio of 6/1. The information density is pretty high, but still readable on my iPhone. AirVisual card The first one shows air quality data from AirVisual in a three 'columns' layout: The air quality icon and description in the first 'column', the state with a segmented arc in the second 'column', and finally the history over the last 24 hours in the last 'column'. Environment cards The environmental cards are all the same format and show data from my Aqara Zigbee environmental sensors. In addition to the sensor values \u200b\u200b(temperature, humidity, and pressure), battery and link quality data is also displayed. Server cards These show the usual suspects like cpu, memory, disk, and system load information. Tools used to create this visualization \u00b6 AirVisual card The AirVisual card is built with (first column) the Entity Icon , Entity Name (Tha Moon) and Entity State (1 uur geleden / 1 hour ago) tools. The second column contains - once again - an Entity Icon , the state value 7AQI and on the lower end a more or less flat Segmented Arc . The last column shows the 24 hour history trend of the AQI value using the Entity History Tool . Environment cards The environment cards are all identical. The first column is identical to the AirVisual card. The second column is using 3 segmented arcs , each containing the entity icon and state value of the temperature, humidity and pressure sensors. The last column uses the entity icon and entity state together with a segmented arc , which is also showing the entity state value. Server cards The first column of the server cards are again identical to the previous cards. Additional to that 4 segmented arcs , each containing the entity icon and state value of the CPU, RAM, DISC and LOAD sensors. Interactions \u00b6 All tools support by default the \"more-info\" dialog once clicked. Used Home Assistant Integrations \u00b6 First card: Airvisual integration Environment cards: Aqara Zigbee sensors with temperature, humidity and pressure data using zigbee2mqtt, ie the MQTT integration Server cards: The System Monitor integration The Glances integration The RESTful sensor integration to get extra sensors from Glances, as the default Glances integration does not give you all the 'load' sensors. Below the sensor: configuration for the System Monitor and extra Glances RESTful sensors: System Monitor sensors 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 # System Monitor # ============== # - https://www.home-assistant.io/integrations/systemmonitor/ - platform : systemmonitor resources : - type : disk_use_percent arg : / - type : disk_use arg : / - type : disk_free arg : / - type : memory_free - type : memory_use - type : memory_use_percent - type : load_1m - type : load_5m - type : load_15m - type : processor_use - type : last_boot Extra Glances sensors 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # REStful stuff, Glances for instance # =================================== # - https://www.home-assistant.io/integrations/rest/ # - https://www.home-assistant.io/integrations/sensor.rest/ # # Get Load sensors from Glances directly. The integration does not give them... - platform : rest resource : http://poseidon.srv.home:61208/api/3/load scan_interval : 60 name : glances_poseidon_load value_template : \"{{ value_json}}\" json_attributes : - min1 - min5 - min15 - cpucore - platform : template sensors : glances_poseidon_load_min1 : value_template : \"{{ state_attr('sensor.glances_poseidon_load', 'min1') }}\" friendly_name : \"Glances-Poseidon Load 1min\" unit_of_measurement : \"1m\" The top card uses the system monitor integration, the bottom card the Glances and RESTful sensor integration How to make it work in your own installation \u00b6 In general \u00b6 Theme This card requires the use of one of the Material 3 Themes for Home Assistant to be displayed as intended Airvisual card \u00b6 Required Home Assistant Integrations You need the AirVisual integration . Required Home Assistant Entity Changes The Airvisual entities should be the same for any installation. Environment cards \u00b6 Required Home Assistant Entity Changes Replace my temperature , humidity , pressure , battery , and linkquality entities with your sensor entities. The Hestia server card \u00b6 Required Home Assistant Integrations The System Monitor integration Required Home Assistant Entity Changes The System Monitor entities should be the same for each installation, so no changes are required for that part. The Poseidon server card \u00b6 Required Home Assistant Integrations - The Glances integration - The RESTful sensor integration to get extra sensors from Glances, as the default Glances integration does not give you all the 'load' sensors. Required Home Assistant Entity Changes The Glances integration creates environment dependent entities: the server name is usually appended to the integration. My integration is called Glances-Poseidon with entity names like sensor.glances_poseidon_cpu_load . You must change the entities to your own entity IDs. If you have only 1 server, remove the second server... View and Card Configuration \u00b6 Lovelace view \u00b6 file location included from view-sake12-m3.yml /lovelace/views sak-examples-dashboard.yaml There is a second variant of this card view-sake12-ani-m3.yml has some animated circles in the second card, including a rotating battery icon. Just for fun, and to show these possibilities. Decluttering templates \u00b6 The only decluttering template this card uses is the header_template . SAK templates \u00b6 This view does not use any SAK Template. It should of course, but in this case, I applied the renowned copy-paste-adapt paradigm. And that gives you 3.200 lines of YAML! name file none none.yaml","title":"12. Wide cards (m3)"},{"location":"examples/example-12/#example-12-wide-cards-showing-lots-of-sensors","text":"This example view requires one of the Home Assistant Material 3 Themes Light example using HA Material 3 theme d06 (Teal blue) Dark example using HA Material 3 theme d06 (Teal blue)","title":"Example 12: Wide cards showing lots of sensors"},{"location":"examples/example-12/#how-to","text":"The Hestia server statistics card is available as tutorial #2 . In this tutorial you learn how to recreate that specific card and as a bonus you learn to make a SAK template that is used for the 4 sensors. Furthermore, to show how you can create a full set of cards using a certain look & feel, I just created this example: Full length (aspectratio 6/1) cards: An AirVisual Card An Environment Card with battery/linkquality (Bath #2) A Server Statistics Card (Hestia) Half length (aspectratio 3/1) cards: A Power Usage Card (Kitchen) A Switch w/ Power Usage Card (Air) An Occupancy Card with battery/linkquality (Movement) A Fan Card (Fan) A Fire Detection Card with battery/linkquality (Fire 1 st , same sensor as Movement) A Switch Card (Heater) The animated version looks like this: And YES, you can have Alert icons too if you want","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n How to"},{"location":"examples/example-12/#visualization","text":"This visualization shows some multi entity wide cards instead of the abundant square cards. All cards have an aspect ratio of 6/1. The information density is pretty high, but still readable on my iPhone. AirVisual card The first one shows air quality data from AirVisual in a three 'columns' layout: The air quality icon and description in the first 'column', the state with a segmented arc in the second 'column', and finally the history over the last 24 hours in the last 'column'. Environment cards The environmental cards are all the same format and show data from my Aqara Zigbee environmental sensors. In addition to the sensor values \u200b\u200b(temperature, humidity, and pressure), battery and link quality data is also displayed. Server cards These show the usual suspects like cpu, memory, disk, and system load information.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Visualization"},{"location":"examples/example-12/#tools-used-to-create-this-visualization","text":"AirVisual card The AirVisual card is built with (first column) the Entity Icon , Entity Name (Tha Moon) and Entity State (1 uur geleden / 1 hour ago) tools. The second column contains - once again - an Entity Icon , the state value 7AQI and on the lower end a more or less flat Segmented Arc . The last column shows the 24 hour history trend of the AQI value using the Entity History Tool . Environment cards The environment cards are all identical. The first column is identical to the AirVisual card. The second column is using 3 segmented arcs , each containing the entity icon and state value of the temperature, humidity and pressure sensors. The last column uses the entity icon and entity state together with a segmented arc , which is also showing the entity state value. Server cards The first column of the server cards are again identical to the previous cards. Additional to that 4 segmented arcs , each containing the entity icon and state value of the CPU, RAM, DISC and LOAD sensors.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Tools used to create this visualization"},{"location":"examples/example-12/#interactions","text":"All tools support by default the \"more-info\" dialog once clicked.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Interactions"},{"location":"examples/example-12/#used-home-assistant-integrations","text":"First card: Airvisual integration Environment cards: Aqara Zigbee sensors with temperature, humidity and pressure data using zigbee2mqtt, ie the MQTT integration Server cards: The System Monitor integration The Glances integration The RESTful sensor integration to get extra sensors from Glances, as the default Glances integration does not give you all the 'load' sensors. Below the sensor: configuration for the System Monitor and extra Glances RESTful sensors: System Monitor sensors 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 # System Monitor # ============== # - https://www.home-assistant.io/integrations/systemmonitor/ - platform : systemmonitor resources : - type : disk_use_percent arg : / - type : disk_use arg : / - type : disk_free arg : / - type : memory_free - type : memory_use - type : memory_use_percent - type : load_1m - type : load_5m - type : load_15m - type : processor_use - type : last_boot Extra Glances sensors 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # REStful stuff, Glances for instance # =================================== # - https://www.home-assistant.io/integrations/rest/ # - https://www.home-assistant.io/integrations/sensor.rest/ # # Get Load sensors from Glances directly. The integration does not give them... - platform : rest resource : http://poseidon.srv.home:61208/api/3/load scan_interval : 60 name : glances_poseidon_load value_template : \"{{ value_json}}\" json_attributes : - min1 - min5 - min15 - cpucore - platform : template sensors : glances_poseidon_load_min1 : value_template : \"{{ state_attr('sensor.glances_poseidon_load', 'min1') }}\" friendly_name : \"Glances-Poseidon Load 1min\" unit_of_measurement : \"1m\" The top card uses the system monitor integration, the bottom card the Glances and RESTful sensor integration","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Used Home Assistant Integrations"},{"location":"examples/example-12/#how-to-make-it-work-in-your-own-installation","text":"","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n How to make it work in your own installation"},{"location":"examples/example-12/#in-general","text":"Theme This card requires the use of one of the Material 3 Themes for Home Assistant to be displayed as intended","title":"In general"},{"location":"examples/example-12/#airvisual-card","text":"Required Home Assistant Integrations You need the AirVisual integration . Required Home Assistant Entity Changes The Airvisual entities should be the same for any installation.","title":"Airvisual card"},{"location":"examples/example-12/#environment-cards","text":"Required Home Assistant Entity Changes Replace my temperature , humidity , pressure , battery , and linkquality entities with your sensor entities.","title":"Environment cards"},{"location":"examples/example-12/#the-hestia-server-card","text":"Required Home Assistant Integrations The System Monitor integration Required Home Assistant Entity Changes The System Monitor entities should be the same for each installation, so no changes are required for that part.","title":"The Hestia server card"},{"location":"examples/example-12/#the-poseidon-server-card","text":"Required Home Assistant Integrations - The Glances integration - The RESTful sensor integration to get extra sensors from Glances, as the default Glances integration does not give you all the 'load' sensors. Required Home Assistant Entity Changes The Glances integration creates environment dependent entities: the server name is usually appended to the integration. My integration is called Glances-Poseidon with entity names like sensor.glances_poseidon_cpu_load . You must change the entities to your own entity IDs. If you have only 1 server, remove the second server...","title":"The Poseidon server card"},{"location":"examples/example-12/#view-and-card-configuration","text":"","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n View and Card Configuration"},{"location":"examples/example-12/#lovelace-view","text":"file location included from view-sake12-m3.yml /lovelace/views sak-examples-dashboard.yaml There is a second variant of this card view-sake12-ani-m3.yml has some animated circles in the second card, including a rotating battery icon. Just for fun, and to show these possibilities.","title":"Lovelace view"},{"location":"examples/example-12/#decluttering-templates","text":"The only decluttering template this card uses is the header_template .","title":"Decluttering templates"},{"location":"examples/example-12/#sak-templates","text":"This view does not use any SAK Template. It should of course, but in this case, I applied the renowned copy-paste-adapt paradigm. And that gives you 3.200 lines of YAML! name file none none.yaml","title":"SAK templates"},{"location":"examples/example-2/","tags":["Examples"],"text":"Example 2: Controlling Lights \u00b6 Visualization of lights and interaction to switch lights on and off and to control brightness using a slider for the first row. Visualization \u00b6 Tip This visualization shows some non-card alike aspects of the Swiss Army Knife: the horizontal divider lines, and the texts \"SCENES\", \"VERLICHTING (Lights)\" and \"WOONKAMER (Livingroom)\" are all made with SAK. The first lights row shows some cards with different experimental sliders and a segmented arc to display the brightness. The other rows show a standard light card. The light switch (all cards) The light switch is made out of 3 circles and an icon: the 1 st (bottom) circle is used to get the Neumorphic effect: a button that 'rises' out of the background. It also servers as the edge of the light button. the second circle is used to display the activation ring; orange if 'on' and light grey if 'off'. the third (top) circle is used to display the inset shadow effect as if the button is \"pressed\". last but not least: the light icon is displayed on top of all those circles. First card The first card shows a \"more-info\" button in the top left, the ligh button, the name of the light, and a slider with the actual percentage on the right side of the slider. The position of that value can be defined in the card. Second and third card The configurable position of the percentage is visible in the second and third card: apart from using a different styled slider, the percentage is shown in the circle where the segmented arc is also defined. The rest of the cards The other 4 - identical - cards show the light button, the area (Woonkamer = Livingroom), the name of the light, and if present: the brightness in the lower right corner. Brightness is only displayed if the light is on This is a change in Home Assistant some months ago. Interactions \u00b6 Sliders \u2192 Experimental First row The first row has an explicit \"more-info\" menu button and sliders for brightness The menu in the upper left corner calls the \"more-info\" popup for the light. Clicking the light icon toggles the state of the light. The circle behind the icon functions as a \"button\". Dragging the slider will set the brightness and update the lights brightness semi-realtime 4 times a second. Other rows All cards displayed toggle the light by clicking on the light icon. The circle behind the icon functions as a \"button\". All rows All cards displayed show the \"more-info\" dialog if name, area or brightness percentage is clicked. Used Home Assistant Integrations \u00b6 Ikea Tradfri Zigbee lights using zigbee2mqtt, ie the MQTT integration Dumb on/off lights using MQTT. How to make it work in your own installation \u00b6 All cards \u00b6 Required Home Assistant Integrations The visualization is build on light entities that have a on/off state and a brightness . It does not depend on any specific integration. Any entity from the light domain with these entity/attribute should work Required Home Assistant Entity Changes Replace the light entities ( state and brightness attribute) with your own entities View and Card Configuration \u00b6 Lovelace view \u00b6 file location included from view-sake2.yml /lovelace/views sak-examples-dashboard.yaml This example uses decluttering templates for all cards except for the first row of lights! Both SAK templates and Decluttering templates are used to display the cards. This view is therefore as compact and easy to read as possible and is a good example of re-use. Decluttering templates \u00b6 Decluttering templates are used extensively in this view except for the cards on the first row. The following templates are defined in /lovelace/decluttering_templates/decluttering_templates.yaml file: The header_template is used for displaying the header sak card The divider_template is used for displaying the divider line sak card The sak_button_template_nm_tpl is used for displaying the light card Excerpt of the headers and dividers in this view... 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 - type : custom:decluttering-card template : divider_template - type : custom:decluttering-card template : header_template variables : - content : 'Scenes' - type : custom:decluttering-card template : divider_template - type : custom:decluttering-card template : header_template variables : - content : 'Verlichting' - type : custom:decluttering-card template : header_template variables : - content : 'Woonkamer' - font_color : var(--secondary-text-color) - font_size : 3em And the excerpt of the lights on second and third row... 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 - type : horizontal-stack cards : - type : custom:decluttering-card template : sak_light_button_template_nm_tpl variables : - entity : light.livingroom_light_gasheater_light - area : Woonkamer - name : Rode Lamp - icon : 'mdi:floor-lamp' - type : custom:decluttering-card template : sak_light_button_template_nm_tpl variables : - entity : light.livingroom_light_cupboard_light - area : Woonkamer - name : Boekenkast - icon : 'mdi:book-open-outline' Excerpt of the decluttering_templates.yaml file... 1 2 3 4 5 6 7 header_template : !include sak-header-template-mw.yaml divider_template : !include sak-divider-template-mw.yaml sak_light_button_template_nm_tpl : !include sak-light-button-nm-tpl.yaml SAK templates \u00b6 The following templates are defined in the /lovelace/sak_templates/sak-templates.yaml file: The toolset_light_button_nm is the template used for the standard lights (second and third row of cards). The toolset_light_button_slider_nm for the first card on the first row. The toolset_light_button_slider3_nm for the second card on the first row. The toolset_light_button_slider2_nm for the third card on the first row. Excerpt of the sak-templates.yaml file... 1 2 3 4 5 6 7 8 9 10 11 toolset_light_button_nm : !include toolset-light-button-nm-template.yaml toolset_light_button_slider_nm : !include toolset-light-button-slider-nm-template.yaml toolset_light_button_slider2_nm : !include toolset-light-button-slider2-nm-template.yaml toolset_light_button_slider3_nm : !include toolset-light-button-slider3-nm-template.yaml Remarks \u00b6 Home Assistant sends a brightness value between 0..255. A little piece of javascript in the card converts this to 0..100% as a derived state, including a unit of measurement setting of \"%\". This means that the value and the uom can be styled as if it is an existing state.","title":"2. Lights"},{"location":"examples/example-2/#example-2-controlling-lights","text":"Visualization of lights and interaction to switch lights on and off and to control brightness using a slider for the first row.","title":"Example 2: Controlling Lights"},{"location":"examples/example-2/#visualization","text":"Tip This visualization shows some non-card alike aspects of the Swiss Army Knife: the horizontal divider lines, and the texts \"SCENES\", \"VERLICHTING (Lights)\" and \"WOONKAMER (Livingroom)\" are all made with SAK. The first lights row shows some cards with different experimental sliders and a segmented arc to display the brightness. The other rows show a standard light card. The light switch (all cards) The light switch is made out of 3 circles and an icon: the 1 st (bottom) circle is used to get the Neumorphic effect: a button that 'rises' out of the background. It also servers as the edge of the light button. the second circle is used to display the activation ring; orange if 'on' and light grey if 'off'. the third (top) circle is used to display the inset shadow effect as if the button is \"pressed\". last but not least: the light icon is displayed on top of all those circles. First card The first card shows a \"more-info\" button in the top left, the ligh button, the name of the light, and a slider with the actual percentage on the right side of the slider. The position of that value can be defined in the card. Second and third card The configurable position of the percentage is visible in the second and third card: apart from using a different styled slider, the percentage is shown in the circle where the segmented arc is also defined. The rest of the cards The other 4 - identical - cards show the light button, the area (Woonkamer = Livingroom), the name of the light, and if present: the brightness in the lower right corner. Brightness is only displayed if the light is on This is a change in Home Assistant some months ago.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Visualization"},{"location":"examples/example-2/#interactions","text":"Sliders \u2192 Experimental First row The first row has an explicit \"more-info\" menu button and sliders for brightness The menu in the upper left corner calls the \"more-info\" popup for the light. Clicking the light icon toggles the state of the light. The circle behind the icon functions as a \"button\". Dragging the slider will set the brightness and update the lights brightness semi-realtime 4 times a second. Other rows All cards displayed toggle the light by clicking on the light icon. The circle behind the icon functions as a \"button\". All rows All cards displayed show the \"more-info\" dialog if name, area or brightness percentage is clicked.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Interactions"},{"location":"examples/example-2/#used-home-assistant-integrations","text":"Ikea Tradfri Zigbee lights using zigbee2mqtt, ie the MQTT integration Dumb on/off lights using MQTT.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Used Home Assistant Integrations"},{"location":"examples/example-2/#how-to-make-it-work-in-your-own-installation","text":"","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n How to make it work in your own installation"},{"location":"examples/example-2/#all-cards","text":"Required Home Assistant Integrations The visualization is build on light entities that have a on/off state and a brightness . It does not depend on any specific integration. Any entity from the light domain with these entity/attribute should work Required Home Assistant Entity Changes Replace the light entities ( state and brightness attribute) with your own entities","title":"All cards"},{"location":"examples/example-2/#view-and-card-configuration","text":"","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n View and Card Configuration"},{"location":"examples/example-2/#lovelace-view","text":"file location included from view-sake2.yml /lovelace/views sak-examples-dashboard.yaml This example uses decluttering templates for all cards except for the first row of lights! Both SAK templates and Decluttering templates are used to display the cards. This view is therefore as compact and easy to read as possible and is a good example of re-use.","title":"Lovelace view"},{"location":"examples/example-2/#decluttering-templates","text":"Decluttering templates are used extensively in this view except for the cards on the first row. The following templates are defined in /lovelace/decluttering_templates/decluttering_templates.yaml file: The header_template is used for displaying the header sak card The divider_template is used for displaying the divider line sak card The sak_button_template_nm_tpl is used for displaying the light card Excerpt of the headers and dividers in this view... 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 - type : custom:decluttering-card template : divider_template - type : custom:decluttering-card template : header_template variables : - content : 'Scenes' - type : custom:decluttering-card template : divider_template - type : custom:decluttering-card template : header_template variables : - content : 'Verlichting' - type : custom:decluttering-card template : header_template variables : - content : 'Woonkamer' - font_color : var(--secondary-text-color) - font_size : 3em And the excerpt of the lights on second and third row... 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 - type : horizontal-stack cards : - type : custom:decluttering-card template : sak_light_button_template_nm_tpl variables : - entity : light.livingroom_light_gasheater_light - area : Woonkamer - name : Rode Lamp - icon : 'mdi:floor-lamp' - type : custom:decluttering-card template : sak_light_button_template_nm_tpl variables : - entity : light.livingroom_light_cupboard_light - area : Woonkamer - name : Boekenkast - icon : 'mdi:book-open-outline' Excerpt of the decluttering_templates.yaml file... 1 2 3 4 5 6 7 header_template : !include sak-header-template-mw.yaml divider_template : !include sak-divider-template-mw.yaml sak_light_button_template_nm_tpl : !include sak-light-button-nm-tpl.yaml","title":"Decluttering templates"},{"location":"examples/example-2/#sak-templates","text":"The following templates are defined in the /lovelace/sak_templates/sak-templates.yaml file: The toolset_light_button_nm is the template used for the standard lights (second and third row of cards). The toolset_light_button_slider_nm for the first card on the first row. The toolset_light_button_slider3_nm for the second card on the first row. The toolset_light_button_slider2_nm for the third card on the first row. Excerpt of the sak-templates.yaml file... 1 2 3 4 5 6 7 8 9 10 11 toolset_light_button_nm : !include toolset-light-button-nm-template.yaml toolset_light_button_slider_nm : !include toolset-light-button-slider-nm-template.yaml toolset_light_button_slider2_nm : !include toolset-light-button-slider2-nm-template.yaml toolset_light_button_slider3_nm : !include toolset-light-button-slider3-nm-template.yaml","title":"SAK templates"},{"location":"examples/example-2/#remarks","text":"Home Assistant sends a brightness value between 0..255. A little piece of javascript in the card converts this to 0..100% as a derived state, including a unit of measurement setting of \"%\". This means that the value and the uom can be styled as if it is an existing state.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Remarks"},{"location":"examples/example-3/","tags":["Examples"],"text":"Example 3: Environment sensors with history \u00b6 Visualization of some environment sensors. Visualization \u00b6 The card is build using the following tools: A rectangle with a large top-right corner radius with a circle on top of that. The Neumorphic shadow filter 'morphs' them as looking as a single object State and unit of measurement The name of the entity A barchart showing the trend over de last 24 hours using a light to dark orange gradient setting as colorstop Interactions \u00b6 All tools support by default the \"more-info\" dialog once clicked. Used Home Assistant Integrations \u00b6 Aqara Zigbee sensors with temperature, humidity and pressure data I use [zigbee2mqtt][zigbee2mqtt-url] for the Zigbee sensors and lights. Zigbee2mqtt can be used either as docker container or [Home Assistant Add-on][zigbee2mqtt-addon-url] combined with the MQTT integration How to make it work in your own installation \u00b6 All cards \u00b6 Required Home Assistant Integrations The visualization is build on temperature , humidity and lux entities. It does not depend on any specific integration. Required Home Assistant Entity Changes You can replace the existing temperature , humidity and lux entities with any sensor entity. View and Card Configuration \u00b6 Lovelace view \u00b6 file location included from view-sake3.yml /lovelace/views sak-examples-dashboard.yaml This example uses decluttering and SAK templates for the card Both SAK templates and Decluttering templates are used to display the cards. This view is therefore as compact and easy to read as possible and is a good example of re-use. Decluttering templates \u00b6 Excerpt of the header configuration... The header_template is used for displaying the header sak card From: view-sake3.yaml 1 2 3 4 5 6 - type : custom:decluttering-card template : header_template variables : - content : 'Luchtdruk' - font_color : var(--secondary-text-color) - font_size : 3em Excerpt of the cards configuration... The sak_sensor_history_template_nm_tpl is used for displaying the sensor cards From: view-sake3.yaml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 - type : horizontal-stack cards : - type : custom:decluttering-card template : sak_sensor_history_template_nm_tpl variables : - entity : sensor.livingroom_iaq_humidity - name : Woonkamer - icon : mdi:water-percent - type : custom:decluttering-card template : sak_sensor_history_template_nm_tpl variables : - entity : sensor.kitchen_iaq_humidity - name : Keuken - icon : mdi:water-percent - type : custom:decluttering-card template : sak_sensor_history_template_nm_tpl variables : - entity : sensor.hall_gf_iaq_humidity - name : Hal - icon : mdi:water-percent Excerpt of the decluttering_templates.yaml file... 1 2 3 4 5 header_template : !include sak-header-template-mw.yaml sak_sensor_history_template_nm_tpl : !include sak-sensor-history-nm-tpl.yaml SAK templates \u00b6 The following templates are defined in the /lovelace/sak_templates/sak-templates.yaml file: The header is the template used for the header texts The toolset_sensor_history is used for the sensor cards. Remarks \u00b6 This view is an excellent example of how to pass variables from a decluttering to a SAK template The sak_sensor_history_template_nm_tpl decluttering template and toolset_sensor_history SAK template show how these templates can work together in passing variables from one template to the other. Excerpt of decluttering template for passing variables from a decluttering to a SAK template The variables passed to the decluttering template are passed directly to the SAK template. In this case it is the color range for the barchart. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 default : - cx : 50 - cy : 50 - decimals : 1 - variables : - bar_color_min : var(--cs-orange-lighten-40) - bar_color_max : var(--cs-orange-darken-20) card : type : 'custom:swiss-army-knife-card' entities : - entity : '[[entity]]' name : '[[name]]' icon : '[[icon]]' decimals : '[[decimals]]' - entity : weather.zoefdehaas aspectratio : 1/1 layout : styles : toolsets : filter : url(#nm-1) toolsets : - toolset : sensor-history template : name : toolset_sensor_history variables : '[[variables]]' position : cx : '[[cx]]' cy : '[[cy]]'","title":"3. Sensors"},{"location":"examples/example-3/#example-3-environment-sensors-with-history","text":"Visualization of some environment sensors.","title":"Example 3: Environment sensors with history"},{"location":"examples/example-3/#visualization","text":"The card is build using the following tools: A rectangle with a large top-right corner radius with a circle on top of that. The Neumorphic shadow filter 'morphs' them as looking as a single object State and unit of measurement The name of the entity A barchart showing the trend over de last 24 hours using a light to dark orange gradient setting as colorstop","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Visualization"},{"location":"examples/example-3/#interactions","text":"All tools support by default the \"more-info\" dialog once clicked.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Interactions"},{"location":"examples/example-3/#used-home-assistant-integrations","text":"Aqara Zigbee sensors with temperature, humidity and pressure data I use [zigbee2mqtt][zigbee2mqtt-url] for the Zigbee sensors and lights. Zigbee2mqtt can be used either as docker container or [Home Assistant Add-on][zigbee2mqtt-addon-url] combined with the MQTT integration","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Used Home Assistant Integrations"},{"location":"examples/example-3/#how-to-make-it-work-in-your-own-installation","text":"","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n How to make it work in your own installation"},{"location":"examples/example-3/#all-cards","text":"Required Home Assistant Integrations The visualization is build on temperature , humidity and lux entities. It does not depend on any specific integration. Required Home Assistant Entity Changes You can replace the existing temperature , humidity and lux entities with any sensor entity.","title":"All cards"},{"location":"examples/example-3/#view-and-card-configuration","text":"","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n View and Card Configuration"},{"location":"examples/example-3/#lovelace-view","text":"file location included from view-sake3.yml /lovelace/views sak-examples-dashboard.yaml This example uses decluttering and SAK templates for the card Both SAK templates and Decluttering templates are used to display the cards. This view is therefore as compact and easy to read as possible and is a good example of re-use.","title":"Lovelace view"},{"location":"examples/example-3/#decluttering-templates","text":"Excerpt of the header configuration... The header_template is used for displaying the header sak card From: view-sake3.yaml 1 2 3 4 5 6 - type : custom:decluttering-card template : header_template variables : - content : 'Luchtdruk' - font_color : var(--secondary-text-color) - font_size : 3em Excerpt of the cards configuration... The sak_sensor_history_template_nm_tpl is used for displaying the sensor cards From: view-sake3.yaml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 - type : horizontal-stack cards : - type : custom:decluttering-card template : sak_sensor_history_template_nm_tpl variables : - entity : sensor.livingroom_iaq_humidity - name : Woonkamer - icon : mdi:water-percent - type : custom:decluttering-card template : sak_sensor_history_template_nm_tpl variables : - entity : sensor.kitchen_iaq_humidity - name : Keuken - icon : mdi:water-percent - type : custom:decluttering-card template : sak_sensor_history_template_nm_tpl variables : - entity : sensor.hall_gf_iaq_humidity - name : Hal - icon : mdi:water-percent Excerpt of the decluttering_templates.yaml file... 1 2 3 4 5 header_template : !include sak-header-template-mw.yaml sak_sensor_history_template_nm_tpl : !include sak-sensor-history-nm-tpl.yaml","title":"Decluttering templates"},{"location":"examples/example-3/#sak-templates","text":"The following templates are defined in the /lovelace/sak_templates/sak-templates.yaml file: The header is the template used for the header texts The toolset_sensor_history is used for the sensor cards.","title":"SAK templates"},{"location":"examples/example-3/#remarks","text":"This view is an excellent example of how to pass variables from a decluttering to a SAK template The sak_sensor_history_template_nm_tpl decluttering template and toolset_sensor_history SAK template show how these templates can work together in passing variables from one template to the other. Excerpt of decluttering template for passing variables from a decluttering to a SAK template The variables passed to the decluttering template are passed directly to the SAK template. In this case it is the color range for the barchart. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 default : - cx : 50 - cy : 50 - decimals : 1 - variables : - bar_color_min : var(--cs-orange-lighten-40) - bar_color_max : var(--cs-orange-darken-20) card : type : 'custom:swiss-army-knife-card' entities : - entity : '[[entity]]' name : '[[name]]' icon : '[[icon]]' decimals : '[[decimals]]' - entity : weather.zoefdehaas aspectratio : 1/1 layout : styles : toolsets : filter : url(#nm-1) toolsets : - toolset : sensor-history template : name : toolset_sensor_history variables : '[[variables]]' position : cx : '[[cx]]' cy : '[[cy]]'","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Remarks"},{"location":"examples/example-4/","tags":["Examples"],"text":"Example 4: More Environment sensor cards \u00b6 How to \u00b6 The lux card on the second row is available as tutorial #3 . In this tutorial you learn how to recreate that specific card. Visualization \u00b6 Once again a visualization of sensors values using two completely different card designs. The first row is a Neumorphic design, and the second implements a very simple and clean Flat design with a few colored blocks as the background of the card. Interactions \u00b6 All tools support by default the \"more-info\" dialog once clicked. Used Home Assistant Integrations \u00b6 Aqara Zigbee sensors with temperature, humidity and pressure data using zigbee2mqtt, ie the MQTT integration How to make it work in your own installation \u00b6 All cards \u00b6 Required Home Assistant Integrations The visualization is build on temperature , humidity and lux entities. It does not depend on any specific integration. Required Home Assistant Entity Changes You can replace the existing temperature , humidity and lux entities with any sensor entity. View and Card Configuration \u00b6 Lovelace view \u00b6 file location included from view-sake4.yml /lovelace/views sak-examples-dashboard.yaml First row of cards The first row shows cards with a Neumorphic design with: Icon in the top-left corner Segmented Arc with humidity template colorstop and scale State with unit of measurement Name of the entity State history over the last 24 hours Second row of cards The first row shows cards with a simple Flat design with: 4 rectangles forming the background of card State with unit of measurement A vertical line as a divider Icon of the entity Name of the entity State history over the last 24 hours Decluttering templates \u00b6 The first row of cards uses a decluttering template... The sak_arc180_sparklinebar24_template_tpl is used for displaying these cards From: view-sake4.yaml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 - type : horizontal-stack cards : - type : custom:decluttering-card template : sak_arc180_sparklinebar24_template_tpl variables : - entity : studym_iaq_humidity - name : 11Ta Study Back - decimals : 0 - scale_min : 0 - scale_max : 100 - type : custom:decluttering-card template : sak_arc180_sparklinebar24_template_tpl variables : - entity : hall_gf_iaq_humidity - name : 11Tb Hall - decimals : 0 - scale_min : 0 - scale_max : 100 - type : custom:decluttering-card template : sak_arc180_sparklinebar24_template_tpl variables : - entity : bedroom_iaq_humidity - name : 11Tc Bedroom - decimals : 0 - scale_min : 0 - scale_max : 100 SAK templates \u00b6 The following templates are defined in the /lovelace/sak_templates/sak-templates.yaml file: The toolset_arc180_sparklinebar24 is the template used for the first row of cards Remarks \u00b6 None. \u2190 Internal References \u2192","title":"4. More sensors"},{"location":"examples/example-4/#example-4-more-environment-sensor-cards","text":"","title":"Example 4: More Environment sensor cards"},{"location":"examples/example-4/#how-to","text":"The lux card on the second row is available as tutorial #3 . In this tutorial you learn how to recreate that specific card.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n How to"},{"location":"examples/example-4/#visualization","text":"Once again a visualization of sensors values using two completely different card designs. The first row is a Neumorphic design, and the second implements a very simple and clean Flat design with a few colored blocks as the background of the card.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Visualization"},{"location":"examples/example-4/#interactions","text":"All tools support by default the \"more-info\" dialog once clicked.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Interactions"},{"location":"examples/example-4/#used-home-assistant-integrations","text":"Aqara Zigbee sensors with temperature, humidity and pressure data using zigbee2mqtt, ie the MQTT integration","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Used Home Assistant Integrations"},{"location":"examples/example-4/#how-to-make-it-work-in-your-own-installation","text":"","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n How to make it work in your own installation"},{"location":"examples/example-4/#all-cards","text":"Required Home Assistant Integrations The visualization is build on temperature , humidity and lux entities. It does not depend on any specific integration. Required Home Assistant Entity Changes You can replace the existing temperature , humidity and lux entities with any sensor entity.","title":"All cards"},{"location":"examples/example-4/#view-and-card-configuration","text":"","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n View and Card Configuration"},{"location":"examples/example-4/#lovelace-view","text":"file location included from view-sake4.yml /lovelace/views sak-examples-dashboard.yaml First row of cards The first row shows cards with a Neumorphic design with: Icon in the top-left corner Segmented Arc with humidity template colorstop and scale State with unit of measurement Name of the entity State history over the last 24 hours Second row of cards The first row shows cards with a simple Flat design with: 4 rectangles forming the background of card State with unit of measurement A vertical line as a divider Icon of the entity Name of the entity State history over the last 24 hours","title":"Lovelace view"},{"location":"examples/example-4/#decluttering-templates","text":"The first row of cards uses a decluttering template... The sak_arc180_sparklinebar24_template_tpl is used for displaying these cards From: view-sake4.yaml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 - type : horizontal-stack cards : - type : custom:decluttering-card template : sak_arc180_sparklinebar24_template_tpl variables : - entity : studym_iaq_humidity - name : 11Ta Study Back - decimals : 0 - scale_min : 0 - scale_max : 100 - type : custom:decluttering-card template : sak_arc180_sparklinebar24_template_tpl variables : - entity : hall_gf_iaq_humidity - name : 11Tb Hall - decimals : 0 - scale_min : 0 - scale_max : 100 - type : custom:decluttering-card template : sak_arc180_sparklinebar24_template_tpl variables : - entity : bedroom_iaq_humidity - name : 11Tc Bedroom - decimals : 0 - scale_min : 0 - scale_max : 100","title":"Decluttering templates"},{"location":"examples/example-4/#sak-templates","text":"The following templates are defined in the /lovelace/sak_templates/sak-templates.yaml file: The toolset_arc180_sparklinebar24 is the template used for the first row of cards","title":"SAK templates"},{"location":"examples/example-4/#remarks","text":"None. \u2190 Internal References \u2192","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Remarks"},{"location":"examples/example-5/","tags":["Examples"],"text":"Example 5: Car dashboard alike cards \u00b6 Visualization \u00b6 This visualization is inspired by a car dashboard. The first uses a Flat design, the second a Neumorphic design. Both designs use the same tools, but look different. Interactions \u00b6 All tools support by default the \"more-info\" dialog once clicked. Used Home Assistant Integrations \u00b6 Met.no Weather integration How to make it work in your own installation \u00b6 Required Home Assistant integrations \u00b6 Both cards \u00b6 Required Home Assistant Integrations The visualization is build on the Met.no, so you need the Met.no Weather integration Other weather integrations won't work, as they create different states and attributes Required Home Assistant Entity Changes The Met.no integration creates the weather.changeme entity. Adapt the changeme part to your own installation! Alternative entities You can also replace the humidity , temperature and pressure weather entities with other humidity , temperature and pressure entities from other integrations. An Aqara Zigbee device could be used for instance as the source. View and Card Configuration \u00b6 Both views use 3 segmented arc s with scale, an entity state and unit of measurement and icon. Lovelace view \u00b6 file location included from view-sake5.yml /lovelace/views sak-examples-dashboard.yaml Decluttering templates \u00b6 None used. All inline YAML! SAK templates \u00b6 None used. All inline YAML! Remarks \u00b6 None.","title":"5. Car dashboard alike"},{"location":"examples/example-5/#example-5-car-dashboard-alike-cards","text":"","title":"Example 5: Car dashboard alike cards"},{"location":"examples/example-5/#visualization","text":"This visualization is inspired by a car dashboard. The first uses a Flat design, the second a Neumorphic design. Both designs use the same tools, but look different.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Visualization"},{"location":"examples/example-5/#interactions","text":"All tools support by default the \"more-info\" dialog once clicked.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Interactions"},{"location":"examples/example-5/#used-home-assistant-integrations","text":"Met.no Weather integration","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Used Home Assistant Integrations"},{"location":"examples/example-5/#how-to-make-it-work-in-your-own-installation","text":"","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n How to make it work in your own installation"},{"location":"examples/example-5/#required-home-assistant-integrations","text":"","title":"Required Home Assistant integrations"},{"location":"examples/example-5/#both-cards","text":"Required Home Assistant Integrations The visualization is build on the Met.no, so you need the Met.no Weather integration Other weather integrations won't work, as they create different states and attributes Required Home Assistant Entity Changes The Met.no integration creates the weather.changeme entity. Adapt the changeme part to your own installation! Alternative entities You can also replace the humidity , temperature and pressure weather entities with other humidity , temperature and pressure entities from other integrations. An Aqara Zigbee device could be used for instance as the source.","title":"Both cards"},{"location":"examples/example-5/#view-and-card-configuration","text":"Both views use 3 segmented arc s with scale, an entity state and unit of measurement and icon.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n View and Card Configuration"},{"location":"examples/example-5/#lovelace-view","text":"file location included from view-sake5.yml /lovelace/views sak-examples-dashboard.yaml","title":"Lovelace view"},{"location":"examples/example-5/#decluttering-templates","text":"None used. All inline YAML!","title":"Decluttering templates"},{"location":"examples/example-5/#sak-templates","text":"None used. All inline YAML!","title":"SAK templates"},{"location":"examples/example-5/#remarks","text":"None.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Remarks"},{"location":"examples/example-6/","tags":["Examples"],"text":"Example 6: Weather on SVG background \u00b6 : Visualization \u00b6 There is also a variant with '-m3' in the filename. This one uses a Material 3 theme for its colors Let's do something different and use the weather for a nice view This view is made with the aid of Affinity Designer. The 'balls' background is created with this tool and exported as an SVG file. On top of those circles the weather and Airvisual data is displayed. Interactions \u00b6 All tools support by default the \"more-info\" dialog once clicked. Used Home Assistant Integrations \u00b6 Met.no Weather integration Airvisual integration How to make it work in your own installation \u00b6 Card Required Home Assistant Integrations The visualization is build on the Met.no and Airvisual entities, so you need these integrations: Met.no Weather integration Airvisual integration Required Home Assistant Entity Changes The Airvisual entities should be the same for any installation, so no changes required on that part. The Met.no integration creates the weather.changeme entity. Adapt the changeme part to your own installation! Other weather integrations won't work, as they create different states and attributes View and Card Configuration \u00b6 Background as external SVG, loaded with the usersvg tool Upper left the title The weather (temperature, humidity, pressure) in three circles. The weather type as a state dependent external, animated SVG Airvisual data showing the state dependent icon and the AQI value. Lovelace view \u00b6 file location included from view-sake6.yml /lovelace/views sak-examples-dashboard.yaml File assets \u00b6 This view uses the following external file assets: The background is a separate SVG file located in /local/images/backgrounds/balls-background-1.svg To display the weather type, you need the external animated SVG's which are located in the /local/images/weather folder Decluttering templates \u00b6 None used. SAK templates \u00b6 None used. Remarks \u00b6 None.","title":"6. Weather on SVG background"},{"location":"examples/example-6/#example-6-weather-on-svg-background","text":":","title":"Example 6: Weather on SVG background"},{"location":"examples/example-6/#visualization","text":"There is also a variant with '-m3' in the filename. This one uses a Material 3 theme for its colors Let's do something different and use the weather for a nice view This view is made with the aid of Affinity Designer. The 'balls' background is created with this tool and exported as an SVG file. On top of those circles the weather and Airvisual data is displayed.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Visualization"},{"location":"examples/example-6/#interactions","text":"All tools support by default the \"more-info\" dialog once clicked.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Interactions"},{"location":"examples/example-6/#used-home-assistant-integrations","text":"Met.no Weather integration Airvisual integration","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Used Home Assistant Integrations"},{"location":"examples/example-6/#how-to-make-it-work-in-your-own-installation","text":"Card Required Home Assistant Integrations The visualization is build on the Met.no and Airvisual entities, so you need these integrations: Met.no Weather integration Airvisual integration Required Home Assistant Entity Changes The Airvisual entities should be the same for any installation, so no changes required on that part. The Met.no integration creates the weather.changeme entity. Adapt the changeme part to your own installation! Other weather integrations won't work, as they create different states and attributes","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n How to make it work in your own installation"},{"location":"examples/example-6/#view-and-card-configuration","text":"Background as external SVG, loaded with the usersvg tool Upper left the title The weather (temperature, humidity, pressure) in three circles. The weather type as a state dependent external, animated SVG Airvisual data showing the state dependent icon and the AQI value.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n View and Card Configuration"},{"location":"examples/example-6/#lovelace-view","text":"file location included from view-sake6.yml /lovelace/views sak-examples-dashboard.yaml","title":"Lovelace view"},{"location":"examples/example-6/#file-assets","text":"This view uses the following external file assets: The background is a separate SVG file located in /local/images/backgrounds/balls-background-1.svg To display the weather type, you need the external animated SVG's which are located in the /local/images/weather folder","title":"File assets"},{"location":"examples/example-6/#decluttering-templates","text":"None used.","title":"Decluttering templates"},{"location":"examples/example-6/#sak-templates","text":"None used.","title":"SAK templates"},{"location":"examples/example-6/#remarks","text":"None.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Remarks"},{"location":"examples/example-7/","tags":["Examples"],"text":"Example 7: Server statistics \u00b6 Visualization \u00b6 Visualization of the basic data of two servers. My basic NUC (J3455 CPU) running Home Assistant and another bunch of containers and a second server as a frontend for the ugly internet. This one is also running a bunch of docker containers. Both systems were 'loaded' before the screenshot was taken to show the different colorstops The default load of the NUC is around 3% and the frontend around 11%. Interactions \u00b6 All tools support by default the \"more-info\" dialog once clicked. Used Home Assistant Integrations \u00b6 The System Monitor integration The Glances integration The RESTful sensor integration to get extra sensors from Glances, as the default Glances integration does not give you all the 'load' sensors. Below the sensor: configuration for the System Monitor and extra Glances RESTful sensors: System Monitor sensors 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 # System Monitor # ============== # - https://www.home-assistant.io/integrations/systemmonitor/ - platform : systemmonitor resources : - type : disk_use_percent arg : / - type : disk_use arg : / - type : disk_free arg : / - type : memory_free - type : memory_use - type : memory_use_percent - type : load_1m - type : load_5m - type : load_15m - type : processor_use - type : last_boot Extra Glances sensors 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 # REStful stuff, Glances for instance # =================================== # - https://www.home-assistant.io/integrations/rest/ # - https://www.home-assistant.io/integrations/sensor.rest/ # # Get Load sensors from Glances directly. The integration does not give them... - platform : rest resource : http://poseidon.srv.home:61208/api/3/load scan_interval : 60 name : glances_poseidon_load value_template : \"{{ value_json}}\" json_attributes : - min1 - min5 - min15 - cpucore - platform : template sensors : glances_poseidon_load_min1 : value_template : \"{{ state_attr('sensor.glances_poseidon_load', 'min1') }}\" friendly_name : \"Glances-Poseidon Load 1min\" unit_of_measurement : \"1m\" glances_poseidon_load_min5 : value_template : \"{{ state_attr('sensor.glances_poseidon_load', 'min5') }}\" friendly_name : \"Glances-Poseidon Load 5min\" unit_of_measurement : \"5m\" glances_poseidon_load_min15 : value_template : \"{{ state_attr('sensor.glances_poseidon_load', 'min15') }}\" friendly_name : \"Glances-Poseidon Load 15min\" unit_of_measurement : \"15m\" The top card uses the system monitor integration, the bottom card the Glances and RESTful sensor integration How to make it work in your own installation \u00b6 The Hestia server card \u00b6 Required Home Assistant Integrations The visualization is build on the system monitor, so you need the The System Monitor integration Required Home Assistant Entity Changes The System Monitor entities should be the same for any installation, so no changes required on that part. The Poseidon server card \u00b6 Required Home Assistant Integrations The Glances integration The RESTful sensor integration to get extra sensors from Glances, as the default Glances integration does not give you all the 'load' sensors. Required Home Assistant Entity Changes The Glances integration creates environment dependent entities: the server name is usually added to the integration, and thus entity id's. My integration is called Glances-Poseidon and thus the entities for instance sensor.glances_poseidon_cpu_load . You have to change the entities to your own entity id's. If you have only 1 server, remove the second server... View and Card Configuration \u00b6 The upper-left shows the DISC usage values as text in a rectangle and in a segmented arc for the percentage. The scale is green upto 70% and then changes to yellow, orange (80%) and red (90%). In the lower-left, the same for RAM usage. The central part shows the CPU usage And finally the three system load toolsets (1m, 5m and 15m) nicely wrapped alongside the CPU display. Lovelace view \u00b6 file location included from view-sake7.yml /lovelace/views sak-examples-dashboard.yaml Decluttering templates \u00b6 None. SAK templates \u00b6 Re-use of toolsets and toolset scaling From: view-sake7 1 2 3 4 5 6 7 8 9 10 11 12 13 - toolset : memory # Use pre-defined template for this part. # Template has variables. template : name : tools_segarc_icon_state variables : - entity : 0 - show_scale : false position : cx : 72.5 cy : 74 # Scale to 80% of toolset template. scale : .8 Remarks \u00b6 This view is a nice example of the use of toolset scaling!","title":"7. Servers"},{"location":"examples/example-7/#example-7-server-statistics","text":"","title":"Example 7: Server statistics"},{"location":"examples/example-7/#visualization","text":"Visualization of the basic data of two servers. My basic NUC (J3455 CPU) running Home Assistant and another bunch of containers and a second server as a frontend for the ugly internet. This one is also running a bunch of docker containers. Both systems were 'loaded' before the screenshot was taken to show the different colorstops The default load of the NUC is around 3% and the frontend around 11%.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Visualization"},{"location":"examples/example-7/#interactions","text":"All tools support by default the \"more-info\" dialog once clicked.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Interactions"},{"location":"examples/example-7/#used-home-assistant-integrations","text":"The System Monitor integration The Glances integration The RESTful sensor integration to get extra sensors from Glances, as the default Glances integration does not give you all the 'load' sensors. Below the sensor: configuration for the System Monitor and extra Glances RESTful sensors: System Monitor sensors 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 # System Monitor # ============== # - https://www.home-assistant.io/integrations/systemmonitor/ - platform : systemmonitor resources : - type : disk_use_percent arg : / - type : disk_use arg : / - type : disk_free arg : / - type : memory_free - type : memory_use - type : memory_use_percent - type : load_1m - type : load_5m - type : load_15m - type : processor_use - type : last_boot Extra Glances sensors 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 # REStful stuff, Glances for instance # =================================== # - https://www.home-assistant.io/integrations/rest/ # - https://www.home-assistant.io/integrations/sensor.rest/ # # Get Load sensors from Glances directly. The integration does not give them... - platform : rest resource : http://poseidon.srv.home:61208/api/3/load scan_interval : 60 name : glances_poseidon_load value_template : \"{{ value_json}}\" json_attributes : - min1 - min5 - min15 - cpucore - platform : template sensors : glances_poseidon_load_min1 : value_template : \"{{ state_attr('sensor.glances_poseidon_load', 'min1') }}\" friendly_name : \"Glances-Poseidon Load 1min\" unit_of_measurement : \"1m\" glances_poseidon_load_min5 : value_template : \"{{ state_attr('sensor.glances_poseidon_load', 'min5') }}\" friendly_name : \"Glances-Poseidon Load 5min\" unit_of_measurement : \"5m\" glances_poseidon_load_min15 : value_template : \"{{ state_attr('sensor.glances_poseidon_load', 'min15') }}\" friendly_name : \"Glances-Poseidon Load 15min\" unit_of_measurement : \"15m\" The top card uses the system monitor integration, the bottom card the Glances and RESTful sensor integration","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Used Home Assistant Integrations"},{"location":"examples/example-7/#how-to-make-it-work-in-your-own-installation","text":"","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n How to make it work in your own installation"},{"location":"examples/example-7/#the-hestia-server-card","text":"Required Home Assistant Integrations The visualization is build on the system monitor, so you need the The System Monitor integration Required Home Assistant Entity Changes The System Monitor entities should be the same for any installation, so no changes required on that part.","title":"The Hestia server card"},{"location":"examples/example-7/#the-poseidon-server-card","text":"Required Home Assistant Integrations The Glances integration The RESTful sensor integration to get extra sensors from Glances, as the default Glances integration does not give you all the 'load' sensors. Required Home Assistant Entity Changes The Glances integration creates environment dependent entities: the server name is usually added to the integration, and thus entity id's. My integration is called Glances-Poseidon and thus the entities for instance sensor.glances_poseidon_cpu_load . You have to change the entities to your own entity id's. If you have only 1 server, remove the second server...","title":"The Poseidon server card"},{"location":"examples/example-7/#view-and-card-configuration","text":"The upper-left shows the DISC usage values as text in a rectangle and in a segmented arc for the percentage. The scale is green upto 70% and then changes to yellow, orange (80%) and red (90%). In the lower-left, the same for RAM usage. The central part shows the CPU usage And finally the three system load toolsets (1m, 5m and 15m) nicely wrapped alongside the CPU display.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n View and Card Configuration"},{"location":"examples/example-7/#lovelace-view","text":"file location included from view-sake7.yml /lovelace/views sak-examples-dashboard.yaml","title":"Lovelace view"},{"location":"examples/example-7/#decluttering-templates","text":"None.","title":"Decluttering templates"},{"location":"examples/example-7/#sak-templates","text":"Re-use of toolsets and toolset scaling From: view-sake7 1 2 3 4 5 6 7 8 9 10 11 12 13 - toolset : memory # Use pre-defined template for this part. # Template has variables. template : name : tools_segarc_icon_state variables : - entity : 0 - show_scale : false position : cx : 72.5 cy : 74 # Scale to 80% of toolset template. scale : .8","title":"SAK templates"},{"location":"examples/example-7/#remarks","text":"This view is a nice example of the use of toolset scaling!","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Remarks"},{"location":"examples/example-8/","tags":["Examples"],"text":"Example 8: Homekit alike cards \u00b6 Visualization \u00b6 Weather, Airvisual cards and one occupancy sensor card using Homekit alike cards with icon and card animations. Cards 2, 3 and 5 share the same design, the others are different Used Home Assistant Integrations \u00b6 Met.no Weather integration Airvisual integration Aqara Occupancy sensor using zigbee2mqtt, ie the MQTT integration How to make it work in your own installation \u00b6 Outside environment sensors \u00b6 Required Home Assistant Integrations The visualization is build on the Met.no generated entities, so you need the Met.no Weather integration Required Home Assistant Entity Changes The Met.no integration creates the weather.changeme entity. Adapt the changeme part to your own installation! Other weather integrations won't work, as they create different states and attributes Airvisual sensors \u00b6 Required Home Assistant Integrations The only integration you need are the Airvisual entities, so you need the Airvisual integration Movement/occupancy sensor \u00b6 Required Home Assistant Entity Changes Last but not least: an occupancy sensor is used. If you don't have any occupancy sensor, replace it with any on/off sensor and the card should at least work! Interactions \u00b6 All tools support by default the \"more-info\" dialog once clicked. View and Card Configuration \u00b6 Lovelace view \u00b6 file location included from view-sake8.yml /lovelace/views sak-examples-dashboard.yaml The 1 st card on the 2 nd row shows the use of some of the built-in CSS animations... 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 # Background used for animations & state - type : rectex position : cx : 50 cy : 50 width : 100 height : 100 radius : top : 2 bottom : 2 entity_index : 0 # Let background go to white with 70% opacity when movement detected # Use animation to 'flash' the background for a few seconds to get # the attention of the user, if anyone is watching ;-) animations : - state : 'on' styles : rectex : fill : 'white' opacity : 0.7 animation : flash 2s ease-in-out both - state : 'off' styles : rectex : opacity : 0 fill : none styles : rectex : opacity : 0 fill : none - type : icon position : cx : 22.5 cy : 22.5 align : center icon_size : 30 entity_index : 0 # Define colors for the icon depending on the state animations : - state : 'on' styles : icon : fill : 'darkorange' color : 'darkorange' animation : jello 2s ease-in-out both - state : 'off' styles : icon : fill : var(--primary-text-color) color : var(--primary-text-color) styles : icon : fill : var(--primary-text-color) color : var(--primary-text-color) Decluttering templates \u00b6 None. SAK templates \u00b6 None. Remarks \u00b6 Due to rendering differences for icons, Safari based systems show the icon animation, and other/Chrome based browsers not. This should be fixed in the future...","title":"8. Homekit alike"},{"location":"examples/example-8/#example-8-homekit-alike-cards","text":"","title":"Example 8: Homekit alike cards"},{"location":"examples/example-8/#visualization","text":"Weather, Airvisual cards and one occupancy sensor card using Homekit alike cards with icon and card animations. Cards 2, 3 and 5 share the same design, the others are different","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Visualization"},{"location":"examples/example-8/#used-home-assistant-integrations","text":"Met.no Weather integration Airvisual integration Aqara Occupancy sensor using zigbee2mqtt, ie the MQTT integration","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Used Home Assistant Integrations"},{"location":"examples/example-8/#how-to-make-it-work-in-your-own-installation","text":"","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n How to make it work in your own installation"},{"location":"examples/example-8/#outside-environment-sensors","text":"Required Home Assistant Integrations The visualization is build on the Met.no generated entities, so you need the Met.no Weather integration Required Home Assistant Entity Changes The Met.no integration creates the weather.changeme entity. Adapt the changeme part to your own installation! Other weather integrations won't work, as they create different states and attributes","title":"Outside environment sensors"},{"location":"examples/example-8/#airvisual-sensors","text":"Required Home Assistant Integrations The only integration you need are the Airvisual entities, so you need the Airvisual integration","title":"Airvisual sensors"},{"location":"examples/example-8/#movementoccupancy-sensor","text":"Required Home Assistant Entity Changes Last but not least: an occupancy sensor is used. If you don't have any occupancy sensor, replace it with any on/off sensor and the card should at least work!","title":"Movement/occupancy sensor"},{"location":"examples/example-8/#interactions","text":"All tools support by default the \"more-info\" dialog once clicked.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Interactions"},{"location":"examples/example-8/#view-and-card-configuration","text":"","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n View and Card Configuration"},{"location":"examples/example-8/#lovelace-view","text":"file location included from view-sake8.yml /lovelace/views sak-examples-dashboard.yaml The 1 st card on the 2 nd row shows the use of some of the built-in CSS animations... 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 # Background used for animations & state - type : rectex position : cx : 50 cy : 50 width : 100 height : 100 radius : top : 2 bottom : 2 entity_index : 0 # Let background go to white with 70% opacity when movement detected # Use animation to 'flash' the background for a few seconds to get # the attention of the user, if anyone is watching ;-) animations : - state : 'on' styles : rectex : fill : 'white' opacity : 0.7 animation : flash 2s ease-in-out both - state : 'off' styles : rectex : opacity : 0 fill : none styles : rectex : opacity : 0 fill : none - type : icon position : cx : 22.5 cy : 22.5 align : center icon_size : 30 entity_index : 0 # Define colors for the icon depending on the state animations : - state : 'on' styles : icon : fill : 'darkorange' color : 'darkorange' animation : jello 2s ease-in-out both - state : 'off' styles : icon : fill : var(--primary-text-color) color : var(--primary-text-color) styles : icon : fill : var(--primary-text-color) color : var(--primary-text-color)","title":"Lovelace view"},{"location":"examples/example-8/#decluttering-templates","text":"None.","title":"Decluttering templates"},{"location":"examples/example-8/#sak-templates","text":"None.","title":"SAK templates"},{"location":"examples/example-8/#remarks","text":"Due to rendering differences for icons, Safari based systems show the icon animation, and other/Chrome based browsers not. This should be fixed in the future...","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Remarks"},{"location":"examples/example-9/","tags":["Examples"],"text":"Example 9: High Contrast \u00b6 And a short GIF to give you an idea of the CSS animations : Actions: I moved I switched the \"Duo Rechts\" light to on. I changed the brightness using the slider of the bottom card. In this configuration, updating while dragging the slider is disabled, so you only see the other card changing the brightness if the slider of the bottom card is released! And finally, I switched the \"Duo Rechts\" light to off. Visualization \u00b6 This visualization shows some high-contrast examples. A lot of black and white with contrasting colors to show states! It uses indoor environment, occupancy, airvisual AQI data, and some square light cards with status, icon, history, segmented arc and map animations. Interactions \u00b6 All tools support by default the \"more-info\" dialog once clicked. The lights can be switched on/off by clicking/tapping the rectangle area where the icon is positioned. Both lights only have a tap_action defined, so the sliders only update the brightness once released. Used Home Assistant Integrations \u00b6 First row: Aqara temperature, humidity and pressure Zigbee sensors Second row: Aqara Occupancy Zigbee sensor Second row: Airvisual integration Second row: Ikea Tradfri Zigbee Lights Third row: Same as second row, but with different layout. I use zigbee2mqtt for the Zigbee sensors and lights. Zigbee2mqtt can be used either as docker container or Home Assistant Add-on combined with the MQTT integration How to make it work in your own installation \u00b6 Except for the Air Visual integration, the others are generic temperature, humidity and pressure sensors, occupancy switch and light switches, so you can replace them with your own entities. Environment sensors (First row) \u00b6 Required Home Assistant Entity Changes Replace the sensor entities with your own entities. As long as the entities do not use an attribute for the value, the history tool will work. Movement/occupancy sensor (Second + Third row) \u00b6 Required Home Assistant Entity Changes Replace the occupancy entity with your own entity. If you don't have a presence sensor, replace it with an on/off sensor and the card should at least work! AirVisual (Second + Third row) \u00b6 Required Home Assistant Integrations The only integration you need are the Airvisual entities, so you need the Airvisual integration Required Home Assistant Entity Changes The Airvisual entities should be the same for every installation, so no changes are needed on that part. Lights (Second + Third row) \u00b6 Required Home Assistant Entity Changes Replace the light entities with your light entities that have a brightness attribute. View and Card Configuration \u00b6 Lovelace view \u00b6 file location included from view-sake9.yml /lovelace/views sak-examples-dashboard.yaml Decluttering templates \u00b6 None. SAK templates \u00b6 None. Remarks \u00b6 None.","title":"9. High Contrast"},{"location":"examples/example-9/#example-9-high-contrast","text":"And a short GIF to give you an idea of the CSS animations : Actions: I moved I switched the \"Duo Rechts\" light to on. I changed the brightness using the slider of the bottom card. In this configuration, updating while dragging the slider is disabled, so you only see the other card changing the brightness if the slider of the bottom card is released! And finally, I switched the \"Duo Rechts\" light to off.","title":"Example 9: High Contrast"},{"location":"examples/example-9/#visualization","text":"This visualization shows some high-contrast examples. A lot of black and white with contrasting colors to show states! It uses indoor environment, occupancy, airvisual AQI data, and some square light cards with status, icon, history, segmented arc and map animations.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Visualization"},{"location":"examples/example-9/#interactions","text":"All tools support by default the \"more-info\" dialog once clicked. The lights can be switched on/off by clicking/tapping the rectangle area where the icon is positioned. Both lights only have a tap_action defined, so the sliders only update the brightness once released.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Interactions"},{"location":"examples/example-9/#used-home-assistant-integrations","text":"First row: Aqara temperature, humidity and pressure Zigbee sensors Second row: Aqara Occupancy Zigbee sensor Second row: Airvisual integration Second row: Ikea Tradfri Zigbee Lights Third row: Same as second row, but with different layout. I use zigbee2mqtt for the Zigbee sensors and lights. Zigbee2mqtt can be used either as docker container or Home Assistant Add-on combined with the MQTT integration","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Used Home Assistant Integrations"},{"location":"examples/example-9/#how-to-make-it-work-in-your-own-installation","text":"Except for the Air Visual integration, the others are generic temperature, humidity and pressure sensors, occupancy switch and light switches, so you can replace them with your own entities.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n How to make it work in your own installation"},{"location":"examples/example-9/#environment-sensors-first-row","text":"Required Home Assistant Entity Changes Replace the sensor entities with your own entities. As long as the entities do not use an attribute for the value, the history tool will work.","title":"Environment sensors (First row)"},{"location":"examples/example-9/#movementoccupancy-sensor-second-third-row","text":"Required Home Assistant Entity Changes Replace the occupancy entity with your own entity. If you don't have a presence sensor, replace it with an on/off sensor and the card should at least work!","title":"Movement/occupancy sensor (Second + Third row)"},{"location":"examples/example-9/#airvisual-second-third-row","text":"Required Home Assistant Integrations The only integration you need are the Airvisual entities, so you need the Airvisual integration Required Home Assistant Entity Changes The Airvisual entities should be the same for every installation, so no changes are needed on that part.","title":"AirVisual (Second + Third row)"},{"location":"examples/example-9/#lights-second-third-row","text":"Required Home Assistant Entity Changes Replace the light entities with your light entities that have a brightness attribute.","title":"Lights (Second + Third row)"},{"location":"examples/example-9/#view-and-card-configuration","text":"","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n View and Card Configuration"},{"location":"examples/example-9/#lovelace-view","text":"file location included from view-sake9.yml /lovelace/views sak-examples-dashboard.yaml","title":"Lovelace view"},{"location":"examples/example-9/#decluttering-templates","text":"None.","title":"Decluttering templates"},{"location":"examples/example-9/#sak-templates","text":"None.","title":"SAK templates"},{"location":"examples/example-9/#remarks","text":"None.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Remarks"},{"location":"examples/example-99/","tags":["Examples"],"text":"Example 99: Material 3 Theme converter and viewer \u00b6 This view requires one of the Home Assistant Material 3 Themes The example uses the dynamic Material 3 D07, DarkOliveGreen theme. The pallette The surfaces The Light Mode The Dark Mode Visualization \u00b6 This visualization shows the currently active Material 3 theme. It mimics the display created by the Figma Material 3 builder plugin. Check the Material 3 themes manual for more info. How to make it work in your own installation \u00b6 In general \u00b6 View and Card Configuration \u00b6 Lovelace view \u00b6 file location included from view-sake99-m3.yml /lovelace/views sak-examples-dashboard.yaml Decluttering templates \u00b6 TBD SAK templates \u00b6 TBD name file tbd tbd.yaml","title":"99. Material 3 converter and theme viewer (m3)"},{"location":"examples/example-99/#example-99-material-3-theme-converter-and-viewer","text":"This view requires one of the Home Assistant Material 3 Themes The example uses the dynamic Material 3 D07, DarkOliveGreen theme. The pallette The surfaces The Light Mode The Dark Mode","title":"Example 99: Material 3 Theme converter and viewer"},{"location":"examples/example-99/#visualization","text":"This visualization shows the currently active Material 3 theme. It mimics the display created by the Figma Material 3 builder plugin. Check the Material 3 themes manual for more info.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Visualization"},{"location":"examples/example-99/#how-to-make-it-work-in-your-own-installation","text":"","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n How to make it work in your own installation"},{"location":"examples/example-99/#in-general","text":"","title":"In general"},{"location":"examples/example-99/#view-and-card-configuration","text":"","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n View and Card Configuration"},{"location":"examples/example-99/#lovelace-view","text":"file location included from view-sake99-m3.yml /lovelace/views sak-examples-dashboard.yaml","title":"Lovelace view"},{"location":"examples/example-99/#decluttering-templates","text":"TBD","title":"Decluttering templates"},{"location":"examples/example-99/#sak-templates","text":"TBD name file tbd tbd.yaml","title":"SAK templates"},{"location":"examples/introduction/","tags":["Examples"],"text":"Introducing 12 examples \u00b6 I have placed twelve examples in their own Swiss Army Knife custom card Example view for easy reference. In most cases, the examples show more than one map or more than one visualization. Some use SAK templates, some use decluttering templates, some use both and some don't: they contain the entire configuration in the view itself. All examples except 11 and 12 use their own theme defined in the view-sake*.yaml. Themes are on Github. Aside from the box shading for the cards, themes also define some of the color schemes used by the cards. Other themes may display black colors where theme colors are used. Example 11 and 12 use a Home Assistant Material 3 theme Example 12 is used as the example view to create the Material 3 themes . Check the examples section . Real world examples from my own installation \u00b6 All samples are actual screenshots of my iPhone, which are then added to an iPhone mockup in Affinity Designer, exported, and processed into an Instagram-compatible 1080x1080 pixel crop. Many examples use the Met.no weather and Airvisual integrations. Each example also describes what you need to change in order for the examples to work in your installation. The above integrations are necessary in most cases to make things work. An overview of all the examples Example 1 - Airvisual and Weather forecast : Example 2 - Lights : Example 3 - Sensors : Example 4 - More sensors : Example 5 - Car dashboard alike : Example 6 - Weather on SVG background : Example 7 - Servers : Example 8 - Homekit alike : Example 9 - High Contrast : Example 10 - Colorful mix : Example 11 - Boiler and Electricity : Example 12 - Wide cards : And some gifs to show the CSS animations Example 2 : Example 6 : Example 9 : Example 10 : Platforms tested \u00b6 I have tested SAK - and thus the examples - on the following platforms: Safari (mobile and desktop view) on iOS/iPadOS 14 & 15, iPhone & iPad Google Chrome > 90.x on Windows 10, on my 10 year old Desktop By testing Chrome, I assume I validated all the Chromium-based browsers (Chrome, Edge, Opera, Vivaldi, Brave, Blisk, etc). That should also cover Android devices using Chromium-based browsers which I could not test as I don't have any Android devices. A quick view on a friend's Samsung showed no problems, but that is no 100% guarantee of course. Due to the browser differences and long-standing bugs in Safari, some parts of SAK have different rendering paths for Safari and Chromium. One notable difference between the two is the SVG filter implementation of Safari. It works but takes a small performance hit compared to Chromium, which has a better and faster filter implementation. Safari users will therefore see a difference between a switch to a view with filters (like a Neumorphic design) and a Flat design: the latter is faster with the initial loading of the view. I update Home Assistant Container every few months, and try to keep up with changes in Home Assistant to adapt this card to these changes.","title":"Introduction"},{"location":"examples/introduction/#introducing-12-examples","text":"I have placed twelve examples in their own Swiss Army Knife custom card Example view for easy reference. In most cases, the examples show more than one map or more than one visualization. Some use SAK templates, some use decluttering templates, some use both and some don't: they contain the entire configuration in the view itself. All examples except 11 and 12 use their own theme defined in the view-sake*.yaml. Themes are on Github. Aside from the box shading for the cards, themes also define some of the color schemes used by the cards. Other themes may display black colors where theme colors are used. Example 11 and 12 use a Home Assistant Material 3 theme Example 12 is used as the example view to create the Material 3 themes . Check the examples section .","title":"Introducing 12 examples"},{"location":"examples/introduction/#real-world-examples-from-my-own-installation","text":"All samples are actual screenshots of my iPhone, which are then added to an iPhone mockup in Affinity Designer, exported, and processed into an Instagram-compatible 1080x1080 pixel crop. Many examples use the Met.no weather and Airvisual integrations. Each example also describes what you need to change in order for the examples to work in your installation. The above integrations are necessary in most cases to make things work. An overview of all the examples Example 1 - Airvisual and Weather forecast : Example 2 - Lights : Example 3 - Sensors : Example 4 - More sensors : Example 5 - Car dashboard alike : Example 6 - Weather on SVG background : Example 7 - Servers : Example 8 - Homekit alike : Example 9 - High Contrast : Example 10 - Colorful mix : Example 11 - Boiler and Electricity : Example 12 - Wide cards : And some gifs to show the CSS animations Example 2 : Example 6 : Example 9 : Example 10 :","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Real world examples from my own installation"},{"location":"examples/introduction/#platforms-tested","text":"I have tested SAK - and thus the examples - on the following platforms: Safari (mobile and desktop view) on iOS/iPadOS 14 & 15, iPhone & iPad Google Chrome > 90.x on Windows 10, on my 10 year old Desktop By testing Chrome, I assume I validated all the Chromium-based browsers (Chrome, Edge, Opera, Vivaldi, Brave, Blisk, etc). That should also cover Android devices using Chromium-based browsers which I could not test as I don't have any Android devices. A quick view on a friend's Samsung showed no problems, but that is no 100% guarantee of course. Due to the browser differences and long-standing bugs in Safari, some parts of SAK have different rendering paths for Safari and Chromium. One notable difference between the two is the SVG filter implementation of Safari. It works but takes a small performance hit compared to Chromium, which has a better and faster filter implementation. Safari users will therefore see a difference between a switch to a view with filters (like a Neumorphic design) and a Flat design: the latter is faster with the initial loading of the view. I update Home Assistant Container every few months, and try to keep up with changes in Home Assistant to adapt this card to these changes.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Platforms tested"},{"location":"helpers/gradient-generator-converter/","tags":["Helpers","Converters","Gradient","SVG"],"text":"CSS Gradient Generator \u00b6 If you're looking for gradients, look no further! This website can create gradients for you, but also has a large library of example gradients. URL: https://cssgradient.io/ CSS3 Gradient \u2192 SVG Image Converter \u00b6 SVG has its own gradient definitions in the <defs> section of an SVG, so you need to convert the CSS gradient to SVG language. Preliminary: there is no support yet for user defined SVG definitions Step 1: Convert \u00b6 This gradient converter does all the work for you. Only lineair gradients are supported for conversion No worries: the resulting definition is the same for linear and radial gradients: its just the type of gradient that differs URL: https://www.kmhcreative.com/downloads/CSS2SVG.htm This example uses the light color temperature gradient definition from Home Assistant. I copied that one using the Chrome Inspector Step 2: Add to SAK template \u00b6 We need the part between the <defs></defs> , ie de definition of the gradient itself and put this in the user-svg-definitions.yaml file. Make sure to give it a logical name (the \"id\" part) for use as the fill: url(#gradient-id) property. Convert all single quotes to double quotes! The linear gradient result we need would be: - descr linair-gradient content : | <linearGradient id=\"linair-gradient\" x1=\"1\" x2=\"0\"> <stop stop-color=\"#ffa000\"/> <stop offset=\".5\" stop-color=\"#fff\"/> <stop offset=\"1\" stop-color=\"#a6d1ff\"/> </linearGradient> And the radial gradient result we need would be: - descr radial-gradient content : | <radialGradient id=\"radial-gradient\" x1=\"1\" x2=\"0\"> <stop stop-color=\"#ffa000\"/> <stop offset=\".5\" stop-color=\"#fff\"/> <stop offset=\"1\" stop-color=\"#a6d1ff\"/> </radialGradient>","title":"Gradient generator / converter"},{"location":"helpers/gradient-generator-converter/#css-gradient-generator","text":"If you're looking for gradients, look no further! This website can create gradients for you, but also has a large library of example gradients. URL: https://cssgradient.io/","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n CSS Gradient Generator"},{"location":"helpers/gradient-generator-converter/#css3-gradient-svg-image-converter","text":"SVG has its own gradient definitions in the <defs> section of an SVG, so you need to convert the CSS gradient to SVG language. Preliminary: there is no support yet for user defined SVG definitions","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n CSS3 Gradient --&gt; SVG Image Converter"},{"location":"helpers/gradient-generator-converter/#step-1-convert","text":"This gradient converter does all the work for you. Only lineair gradients are supported for conversion No worries: the resulting definition is the same for linear and radial gradients: its just the type of gradient that differs URL: https://www.kmhcreative.com/downloads/CSS2SVG.htm This example uses the light color temperature gradient definition from Home Assistant. I copied that one using the Chrome Inspector","title":"Step 1: Convert"},{"location":"helpers/gradient-generator-converter/#step-2-add-to-sak-template","text":"We need the part between the <defs></defs> , ie de definition of the gradient itself and put this in the user-svg-definitions.yaml file. Make sure to give it a logical name (the \"id\" part) for use as the fill: url(#gradient-id) property. Convert all single quotes to double quotes! The linear gradient result we need would be: - descr linair-gradient content : | <linearGradient id=\"linair-gradient\" x1=\"1\" x2=\"0\"> <stop stop-color=\"#ffa000\"/> <stop offset=\".5\" stop-color=\"#fff\"/> <stop offset=\"1\" stop-color=\"#a6d1ff\"/> </linearGradient> And the radial gradient result we need would be: - descr radial-gradient content : | <radialGradient id=\"radial-gradient\" x1=\"1\" x2=\"0\"> <stop stop-color=\"#ffa000\"/> <stop offset=\".5\" stop-color=\"#fff\"/> <stop offset=\"1\" stop-color=\"#a6d1ff\"/> </radialGradient>","title":"Step 2: Add to SAK template"},{"location":"helpers/palette-generators/","text":"Color Palette generators \u00b6 Use these color palette generators to create colors for the Swiss Army Knife custom card that match the lightness and WCAG contrast guidelines to make your card stand out! Accessible Palette Color System Generator \u00b6 With the Accessible palette website, you can create Material Design color systems with consistent lightness and contrast. Nice for your custom colors to create matching pairs! You can use a single color with varying lightness for displaying steps in the segmented arc for instance. Also a great tool if you are using the Material 3 themes for Home Assistant! URL: https://accessiblepalette.com/ Color Designer to Create Tints and Shades \u00b6 Color Designer is great for creating tints and shades, among a few other color combinations. These tints and shades use the HSL (Hue, Saturation, Lightness) representation of the RGB color model. These are not fully accurate compared to the human perception of lightness. Use the previous one, the accessible palette generator for a better match! URL: https://colordesigner.io/ Paletton Color Palette Generator \u00b6 Paletton is one of the nice color palette generators around. URL: https://paletton.com/ Material Design Color Palette Generator \u00b6 Another one is the MCG generator. It is build on the Material Design color scheme, and can generate any swatch based on the central color. URL: http://mcg.mbitson.com/#!?mcgpalette0=%233f51b5&mcgpalette1=%2326a69a","title":"Pallette generators"},{"location":"helpers/palette-generators/#color-palette-generators","text":"Use these color palette generators to create colors for the Swiss Army Knife custom card that match the lightness and WCAG contrast guidelines to make your card stand out!","title":"Color Palette generators"},{"location":"helpers/palette-generators/#accessible-palette-color-system-generator","text":"With the Accessible palette website, you can create Material Design color systems with consistent lightness and contrast. Nice for your custom colors to create matching pairs! You can use a single color with varying lightness for displaying steps in the segmented arc for instance. Also a great tool if you are using the Material 3 themes for Home Assistant! URL: https://accessiblepalette.com/","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Accessible Palette Color System Generator"},{"location":"helpers/palette-generators/#color-designer-to-create-tints-and-shades","text":"Color Designer is great for creating tints and shades, among a few other color combinations. These tints and shades use the HSL (Hue, Saturation, Lightness) representation of the RGB color model. These are not fully accurate compared to the human perception of lightness. Use the previous one, the accessible palette generator for a better match! URL: https://colordesigner.io/","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Color Designer to Create Tints and Shades"},{"location":"helpers/palette-generators/#paletton-color-palette-generator","text":"Paletton is one of the nice color palette generators around. URL: https://paletton.com/","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Paletton Color Palette Generator"},{"location":"helpers/palette-generators/#material-design-color-palette-generator","text":"Another one is the MCG generator. It is build on the Material Design color scheme, and can generate any swatch based on the central color. URL: http://mcg.mbitson.com/#!?mcgpalette0=%233f51b5&mcgpalette1=%2326a69a","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Material Design Color Palette Generator"},{"location":"start/installation-0.9.0-b1/","tags":["Install"],"text":"The installation can be done in two ways: automatic install using HACS manual install On top of that you can install the examples using an extra dashboard. Automatic install using HACS \u00b6 By the time this card is released, it will become available in HACS. Manual install (for Beta 0.9.0-b1, December 2021) \u00b6 This is an OLD version!! The beta version expects the files to be using the following directory structure with their files. If your structure differs, put the files into YOUR location, and don't forget to adjust the !include statements. My Folder Structure \u00b6 I use separate folders for many things in Home Assistant Read and adapt to your own config and structure. Below, as reference the folder structure I use Home Assistant Lovelace folder www folder Themes folder homeassistant-data/ . \u251c\u2500 lovelace/ \u251c\u2500 themes/ \u251c\u2500 www/ \u2502 \u2514\u2500 configuration.yaml \u2514\u2500 ui-lovelace.yaml \u2514\u2500 sak-examples-dashboard.yaml My Lovelace folder contains the following folders: lovelace/ . \u251c\u2500 decluttering_templates \u2502 \u2514\u2500 decluttering_templates.yaml \u2502 \u2514\u2500 (etc) \u2502 \u251c\u2500 sak_templates/ \u2502 \u2514\u2500 sak_templates.yaml \u2502 \u2514\u2500 sak-css-definitions.yaml \u2502 \u2514\u2500 user-css-definitions.yaml \u2502 \u2514\u2500 (etc) \u2502 \u251c\u2500 resources \u2502 \u2514\u2500 resources.yaml \u2502 \u251c\u2500 views/ \u2502 \u2514\u2500 view-sake1.yaml \u2502 \u2514\u2500 (...) \u2502 \u2514\u2500 view-sake8.yaml !!! Warning \"The location of the sak_templates folder in the lovelace folder is MANDATORY!\" This location is hard-coded into the SAK card. SAK needs the templates to function! www/ . \u251c\u2500 community/ \u2502 \u2514\u2500 wip-swiss-army-knife-card/ \u2502 \u2514\u2500 dev-swiss-army-knife-card.js \u2502 \u251c\u2500 images/ \u251c\u2500 backgrounds/ \u2502 \u2514\u2500 balls-background-1.svg # Used by view-sake6.yaml \u2502 \u251c\u2500 weather/ # Used by all weather-type usersvg tools \u2502 \u2514\u2500 *-day.svg \u2502 \u2514\u2500 *-night.svg \u2502 \u2514\u2500 ic-face-1.svg # Used by Airvisual face display usersvg tools \u2514\u2500 (...) \u2514\u2500 ic-face-6.svg themes/ . \u2514\u2500 themes.yaml \u2514\u2500 nm-01-gonsboro.yaml \u2514\u2500 nm-03-dark-steelblue.yaml Step 1: Add Swiss Army Knife Card to your installation \u00b6 The folder has a wip prefix and the card itself a dev prefix. These will be removed in the official release. This way they can't overwrite each other... Step 1a: Put the card into the community ( HACS ) folder. www/ . \u251c\u2500 community/ \u2502 \u2514\u2500 wip-swiss-army-knife-card/ \u2502 \u2514\u2500 dev-swiss-army-knife-card.js Step 1b: Add the card to the resources.yaml file. resources.yaml - url : /hacsfiles/wip-swiss-army-knife-card/dev-swiss-army-knife-card.js type : module The resources.yaml file should be included in your configuration.yaml config. I assume that that is already in place if you're using custom cards. configuration.yaml lovelace : mode : yaml resources : !include lovelace/resources/resources.yaml I have a YAML only config. Pleas adjust to your own configuration Step 2: Add Swiss Army Knife templates \u00b6 The second step is to add the sak_templates . These are mandatory. Step 2a: Add the SAK templates to the sak_templates folder. Create the sak_templates folder in the lovelace folder and add all the files. lovelace/ . \u251c\u2500 sak_templates/ \u2502 \u2514\u2500 sak_templates.yaml \u2502 \u2514\u2500 sak-css-definitions.yaml \u2502 \u2514\u2500 user-css-definitions.yaml \u2502 \u2514\u2500 (etc) Step 2b: Include sak_templates to ui-lovelace.yaml ui-lovelace.yaml # Swiss Army Knife Templates sak_templates : !include lovelace/sak_templates/sak_templates.yaml The supplied sak_templates.yaml file contains the templates for SAK. You don't have to change this file! You made it! \u00b6 If this is all you want, you're ready to use the Swiss Army Knife card. If not, continue with the next paragraph for the example dashboard install. Examples dashboard install \u00b6 If you want to use the examples, you need the full install that includes the example views, decluttering templates, backgrounds and weather and Airvisual images. And last but not least: the used gonsboro and dark steelblue themes in the examples. Check my folder structure to understand my setup So you can adapt it to yours if different. Step 1: Add decluttering templates \u00b6 Step 1a: Install the decluttering card first, if you haven't installed it yet Use HACS to install the decluttering card. Then you should have the following in your ui-lovelace.yaml file: ui-lovelace.yaml # Decluttering Templates decluttering_templates : !include lovelace/decluttering_templates/decluttering_templates.yaml Step 1b: Add the decluttering templates for SAK to your installation. The supplied decluttering_templates.yaml file contains the templates for SAK. If you already use the decluttering card, merge the files. Step 2: Add themes \u00b6 Both themes are used by the examples, so include the themes into your themes.yaml file in the themes folder: themes.yaml NM - Gonsboro : !include nm-01-gonsboro.yaml NM - Dark Steelblue : !include nm-03-dark-steelblue.yaml And the themes.yaml file should (already) be included into your Home Assistant config: configuration.yaml # frontend # ======== # Enables the frontend to define themes # - https://www.home-assistant.io/integrations/frontend/#defining-themes frontend : themes : !include themes/themes.yaml Step 3: Add SAK examples dashboard \u00b6 The Swiss Army Knife examples have their own dashboard. This way using them doesn't interfere with you running installation. You can access the examples from the side panel. Step 3a: Add the external images used by the views to your configuration www/ . \u2514\u2500 images/ \u251c\u2500 backgrounds/ \u2502 \u2514\u2500 balls-background-1.svg # Used by view-sake6.yaml \u2502 \u251c\u2500 weather/ # Used by all weather-type usersvg tools \u2502 \u2514\u2500 *-day.svg \u2502 \u2514\u2500 *-night.svg \u2502 \u2514\u2500 ic-face-1.svg # Used by Airvisual face display usersvg tools \u2514\u2500 (...) \u2514\u2500 ic-face-6.svg Step 3b: Add sak-examples-dashboard.yaml in the root folder and include it into your configuration.yaml : configuration.yaml lovelace : mode : yaml resources : !include lovelace/resources/resources.yaml dashboards : sak-examples : mode : yaml filename : sak-examples-dashboard.yaml title : Swiss Army Knife Examples icon : mdi:hospital-box show_in_sidebar : true The dashboard contains the 8 example views: sak-examples-dashboard.yaml # Decluttering Templates decluttering_templates : !include lovelace/decluttering_templates/decluttering_templates.yaml # Swiss Army Knife Templates sak_templates : !include lovelace/sak_templates/sak_templates.yaml title : Swiss Army Knife Examples views : # Swiss Army Knife example views... - !include lovelace/views/view-sake1.yaml - !include lovelace/views/view-sake2.yaml - !include lovelace/views/view-sake3.yaml - !include lovelace/views/view-sake4.yaml - !include lovelace/views/view-sake5.yaml - !include lovelace/views/view-sake6.yaml - !include lovelace/views/view-sake7.yaml - !include lovelace/views/view-sake8.yaml The views themselves reference the gonsboro and dark steelblue themes, you can keep your existing theme You don't have to switch to the gonsboro or dark steelblue theme for your installation to see the examples \"as the creator meant them to be seen\", so your existing views stay the same. Step 3c: Restart Home Assistant to have the dashboard installed Make sure to validate your config before you restart Home Assistant You made it again! \u00b6 Now enjoy the examples and don't forget that you have to replace my entities with yours to see the cards as intended! You see example 8 with its gonsboro theme, while the rest of the installation uses the default Home Assistant theme.","title":"Version 0.9.0-b1"},{"location":"start/installation-0.9.0-b1/#automatic-install-using-hacs","text":"By the time this card is released, it will become available in HACS.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Automatic install using HACS"},{"location":"start/installation-0.9.0-b1/#manual-install-for-beta-090-b1-december-2021","text":"This is an OLD version!! The beta version expects the files to be using the following directory structure with their files. If your structure differs, put the files into YOUR location, and don't forget to adjust the !include statements.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Manual install (for Beta 0.9.0-b1, December 2021)"},{"location":"start/installation-0.9.0-b1/#my-folder-structure","text":"I use separate folders for many things in Home Assistant Read and adapt to your own config and structure. Below, as reference the folder structure I use Home Assistant Lovelace folder www folder Themes folder homeassistant-data/ . \u251c\u2500 lovelace/ \u251c\u2500 themes/ \u251c\u2500 www/ \u2502 \u2514\u2500 configuration.yaml \u2514\u2500 ui-lovelace.yaml \u2514\u2500 sak-examples-dashboard.yaml My Lovelace folder contains the following folders: lovelace/ . \u251c\u2500 decluttering_templates \u2502 \u2514\u2500 decluttering_templates.yaml \u2502 \u2514\u2500 (etc) \u2502 \u251c\u2500 sak_templates/ \u2502 \u2514\u2500 sak_templates.yaml \u2502 \u2514\u2500 sak-css-definitions.yaml \u2502 \u2514\u2500 user-css-definitions.yaml \u2502 \u2514\u2500 (etc) \u2502 \u251c\u2500 resources \u2502 \u2514\u2500 resources.yaml \u2502 \u251c\u2500 views/ \u2502 \u2514\u2500 view-sake1.yaml \u2502 \u2514\u2500 (...) \u2502 \u2514\u2500 view-sake8.yaml !!! Warning \"The location of the sak_templates folder in the lovelace folder is MANDATORY!\" This location is hard-coded into the SAK card. SAK needs the templates to function! www/ . \u251c\u2500 community/ \u2502 \u2514\u2500 wip-swiss-army-knife-card/ \u2502 \u2514\u2500 dev-swiss-army-knife-card.js \u2502 \u251c\u2500 images/ \u251c\u2500 backgrounds/ \u2502 \u2514\u2500 balls-background-1.svg # Used by view-sake6.yaml \u2502 \u251c\u2500 weather/ # Used by all weather-type usersvg tools \u2502 \u2514\u2500 *-day.svg \u2502 \u2514\u2500 *-night.svg \u2502 \u2514\u2500 ic-face-1.svg # Used by Airvisual face display usersvg tools \u2514\u2500 (...) \u2514\u2500 ic-face-6.svg themes/ . \u2514\u2500 themes.yaml \u2514\u2500 nm-01-gonsboro.yaml \u2514\u2500 nm-03-dark-steelblue.yaml","title":"My Folder Structure"},{"location":"start/installation-0.9.0-b1/#step-1-add-swiss-army-knife-card-to-your-installation","text":"The folder has a wip prefix and the card itself a dev prefix. These will be removed in the official release. This way they can't overwrite each other... Step 1a: Put the card into the community ( HACS ) folder. www/ . \u251c\u2500 community/ \u2502 \u2514\u2500 wip-swiss-army-knife-card/ \u2502 \u2514\u2500 dev-swiss-army-knife-card.js Step 1b: Add the card to the resources.yaml file. resources.yaml - url : /hacsfiles/wip-swiss-army-knife-card/dev-swiss-army-knife-card.js type : module The resources.yaml file should be included in your configuration.yaml config. I assume that that is already in place if you're using custom cards. configuration.yaml lovelace : mode : yaml resources : !include lovelace/resources/resources.yaml I have a YAML only config. Pleas adjust to your own configuration","title":" Step 1: Add Swiss Army Knife Card to your installation"},{"location":"start/installation-0.9.0-b1/#step-2-add-swiss-army-knife-templates","text":"The second step is to add the sak_templates . These are mandatory. Step 2a: Add the SAK templates to the sak_templates folder. Create the sak_templates folder in the lovelace folder and add all the files. lovelace/ . \u251c\u2500 sak_templates/ \u2502 \u2514\u2500 sak_templates.yaml \u2502 \u2514\u2500 sak-css-definitions.yaml \u2502 \u2514\u2500 user-css-definitions.yaml \u2502 \u2514\u2500 (etc) Step 2b: Include sak_templates to ui-lovelace.yaml ui-lovelace.yaml # Swiss Army Knife Templates sak_templates : !include lovelace/sak_templates/sak_templates.yaml The supplied sak_templates.yaml file contains the templates for SAK. You don't have to change this file!","title":" Step 2: Add Swiss Army Knife templates"},{"location":"start/installation-0.9.0-b1/#you-made-it","text":"If this is all you want, you're ready to use the Swiss Army Knife card. If not, continue with the next paragraph for the example dashboard install.","title":" You made it!"},{"location":"start/installation-0.9.0-b1/#examples-dashboard-install","text":"If you want to use the examples, you need the full install that includes the example views, decluttering templates, backgrounds and weather and Airvisual images. And last but not least: the used gonsboro and dark steelblue themes in the examples. Check my folder structure to understand my setup So you can adapt it to yours if different.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Examples dashboard install"},{"location":"start/installation-0.9.0-b1/#step-1-add-decluttering-templates","text":"Step 1a: Install the decluttering card first, if you haven't installed it yet Use HACS to install the decluttering card. Then you should have the following in your ui-lovelace.yaml file: ui-lovelace.yaml # Decluttering Templates decluttering_templates : !include lovelace/decluttering_templates/decluttering_templates.yaml Step 1b: Add the decluttering templates for SAK to your installation. The supplied decluttering_templates.yaml file contains the templates for SAK. If you already use the decluttering card, merge the files.","title":" Step 1: Add decluttering templates"},{"location":"start/installation-0.9.0-b1/#step-2-add-themes","text":"Both themes are used by the examples, so include the themes into your themes.yaml file in the themes folder: themes.yaml NM - Gonsboro : !include nm-01-gonsboro.yaml NM - Dark Steelblue : !include nm-03-dark-steelblue.yaml And the themes.yaml file should (already) be included into your Home Assistant config: configuration.yaml # frontend # ======== # Enables the frontend to define themes # - https://www.home-assistant.io/integrations/frontend/#defining-themes frontend : themes : !include themes/themes.yaml","title":" Step 2: Add themes"},{"location":"start/installation-0.9.0-b1/#step-3-add-sak-examples-dashboard","text":"The Swiss Army Knife examples have their own dashboard. This way using them doesn't interfere with you running installation. You can access the examples from the side panel. Step 3a: Add the external images used by the views to your configuration www/ . \u2514\u2500 images/ \u251c\u2500 backgrounds/ \u2502 \u2514\u2500 balls-background-1.svg # Used by view-sake6.yaml \u2502 \u251c\u2500 weather/ # Used by all weather-type usersvg tools \u2502 \u2514\u2500 *-day.svg \u2502 \u2514\u2500 *-night.svg \u2502 \u2514\u2500 ic-face-1.svg # Used by Airvisual face display usersvg tools \u2514\u2500 (...) \u2514\u2500 ic-face-6.svg Step 3b: Add sak-examples-dashboard.yaml in the root folder and include it into your configuration.yaml : configuration.yaml lovelace : mode : yaml resources : !include lovelace/resources/resources.yaml dashboards : sak-examples : mode : yaml filename : sak-examples-dashboard.yaml title : Swiss Army Knife Examples icon : mdi:hospital-box show_in_sidebar : true The dashboard contains the 8 example views: sak-examples-dashboard.yaml # Decluttering Templates decluttering_templates : !include lovelace/decluttering_templates/decluttering_templates.yaml # Swiss Army Knife Templates sak_templates : !include lovelace/sak_templates/sak_templates.yaml title : Swiss Army Knife Examples views : # Swiss Army Knife example views... - !include lovelace/views/view-sake1.yaml - !include lovelace/views/view-sake2.yaml - !include lovelace/views/view-sake3.yaml - !include lovelace/views/view-sake4.yaml - !include lovelace/views/view-sake5.yaml - !include lovelace/views/view-sake6.yaml - !include lovelace/views/view-sake7.yaml - !include lovelace/views/view-sake8.yaml The views themselves reference the gonsboro and dark steelblue themes, you can keep your existing theme You don't have to switch to the gonsboro or dark steelblue theme for your installation to see the examples \"as the creator meant them to be seen\", so your existing views stay the same. Step 3c: Restart Home Assistant to have the dashboard installed Make sure to validate your config before you restart Home Assistant","title":" Step 3: Add SAK examples dashboard"},{"location":"start/installation-0.9.0-b1/#you-made-it-again","text":"Now enjoy the examples and don't forget that you have to replace my entities with yours to see the cards as intended! You see example 8 with its gonsboro theme, while the rest of the installation uses the default Home Assistant theme.","title":" You made it again!"},{"location":"start/installation-0.9.0-b2/","tags":["Install"],"text":"The installation can be done in two ways: automatic install using HACS manual install On top of that you can install the examples using an extra dashboard. Automatic install using HACS \u00b6 By the time this card is released, it will become available in HACS. NTS: As SAK needs template files, I guess installation can't be fully automated... Manual install (for Beta 0.9.0-b2, January 2022) \u00b6 This is an OLD version!! This second beta contains some changes in the layout and !includes to make it more up-to-date with current Home Assistant possibilities and requires less manual work. The first beta was still based on an very old config of mine. This version uses the possibilities described in Splitting up the configuration . This beta version expects the files to be using the following directory structure with their files. If your structure differs, put the files into YOUR location, and don't forget to adjust the !include statements. My Folder Structure \u00b6 I use separate folders for many things in Home Assistant Read and adapt to your own config and structure. Below, as reference the folder structure I use Home Assistant Lovelace folder www folder Themes folder homeassistant-data/ . \u251c\u2500 lovelace/ \u251c\u2500 themes/ \u251c\u2500 www/ \u2502 \u251c\u2500 configuration.yaml \u251c\u2500 ui-lovelace.yaml \u2514\u2500 sak-examples-dashboard.yaml My Lovelace folder contains the following folders: lovelace/ . \u251c\u2500 decluttering_templates \u2502 \u251c\u2500 decluttering_templates.yaml \u2502 \u2514\u2500 (etc) \u2502 \u251c\u2500 sak_templates/ \u2502 \u251c\u2500 sak_templates.yaml \u2502 \u251c\u2500 definitions/ \u2502 \u2502 \u251c\u2500 sak-css-definitions.yaml \u2502 \u2502 \u251c\u2500 user-css-definitions.yaml \u2502 \u2502 \u2514\u2500 sak-svg-definitions.yaml \u2502 \u2514\u2500 templates/ \u2502 \u2514\u2500<templates>.yaml \u2502 \u251c\u2500 resources \u2502 \u2514\u2500 resources.yaml \u2502 \u251c\u2500 views/ \u2502 \u251c\u2500 view-sake1.yml \u2502 \u251c\u2500 (...) \u2502 \u2514\u2500 view-sake11.yml The location of the sak_templates folder in the lovelace folder is MANDATORY! This location is hard-coded into the SAK card. SAK needs the templates to function! www/ . \u251c\u2500 community/ \u2502 \u2514\u2500 wip-swiss-army-knife-card/ \u2502 \u2514\u2500 dev-swiss-army-knife-card.js \u2502 \u251c\u2500 images/ \u251c\u2500 backgrounds/ \u2502 \u2514\u2500 balls-background-1.svg # Used by view-sake6.yaml \u2502 \u251c\u2500 weather/ # Used by all weather-type usersvg tools \u2502 \u251c\u2500 *-day.svg \u2502 \u2514\u2500 *-night.svg \u2502 \u251c\u2500 ic-face-1.svg # Used by Airvisual face display usersvg tools \u251c\u2500 (...) \u2514\u2500 ic-face-6.svg themes/ . \u251c\u2500 nm-01-gonsboro.yaml \u2514\u2500 nm-03-dark-steelblue.yaml Step 1: Add Swiss Army Knife Card to your installation \u00b6 The folder has a wip prefix and the card itself a dev prefix. These will be removed in the official release. This way they can't overwrite each other... Step 1a: Put the card into the community ( HACS ) folder. www/ . \u251c\u2500 community/ \u2502 \u2514\u2500 wip-swiss-army-knife-card/ \u2502 \u2514\u2500 dev-swiss-army-knife-card.js Step 1b: Add the card to the resources.yaml file. resources.yaml - url : /hacsfiles/wip-swiss-army-knife-card/dev-swiss-army-knife-card.min.js type : module The resources.yaml file should be included in your configuration.yaml config. I assume that that is already in place if you're using custom cards. configuration.yaml lovelace : mode : yaml resources : !include lovelace/resources/resources.yaml I have a YAML only config. Pleas adjust to your own configuration Step 2: Add Swiss Army Knife templates \u00b6 The second step is to add the sak_templates . These are mandatory. Step 2a: Add the SAK templates to the sak_templates folder. Create the sak_templates folder in the lovelace folder and add all the folders and files. lovelace/ . \u251c\u2500 sak_templates/ \u2502 \u251c\u2500 sak_templates.yaml \u2502 \u251c\u2500 definitions/ \u2502 \u2502 \u251c\u2500 sak-css-definitions.yaml \u2502 \u2502 \u2514\u2500 user-css-definitions.yaml \u2502 \u2514\u2500 templates/ \u2502 \u2514\u2500<templates>.yaml``` Step 2b: Include sak_templates to ui-lovelace.yaml ui-lovelace.yaml # Swiss Army Knife Templates sak_templates : !include lovelace/sak_templates/sak_templates.yaml The supplied sak_templates.yaml file contains a wildcard include for the templates folder. So ANY template you add in that folder will be automatically included. You don't have to change this file! You made it! \u00b6 If this is all you want, you're ready to use the Swiss Army Knife card. If not, continue with the next paragraph for the example dashboard install. Examples dashboard install \u00b6 If you want to use the examples, you need the full install that includes the example views, decluttering templates, backgrounds and weather and Airvisual images. And last but not least: the used gonsboro and dark steelblue themes in the examples. Check my folder structure to understand my setup So you can adapt it to yours if different. Step 1: Add decluttering templates \u00b6 Step 1a: Install the decluttering card first, if you haven't installed it yet Use HACS to install the decluttering card. Then you should have the following in your ui-lovelace.yaml file: ui-lovelace.yaml # Decluttering Templates decluttering_templates : !include lovelace/decluttering_templates/decluttering_templates.yaml Step 1b: Add the decluttering templates for SAK to your installation. The supplied decluttering_templates.yaml file contains the templates for SAK. If you already use the decluttering card, merge the files. Step 2: Add themes \u00b6 Place the two themes into your themes folder. If you use a wildcard include in your configuration.yaml , then you don't have to do anything anymore: configuration.yaml frontend : themes : !include_dir_merge_named themes/ If you use explicit includes, include the themes manually: !include nm-01-gonsboro.yaml !include nm-03-dark-steelblue.yaml Step 3: Add SAK examples dashboard \u00b6 The Swiss Army Knife examples have their own dashboard. This way using them doesn't interfere with you running installation. You can access the examples from the side panel. Step 3a: Add the external images used by the views to your configuration www/ . \u2514\u2500 images/ \u251c\u2500 backgrounds/ \u2502 \u2514\u2500 balls-background-1.svg # Used by view-sake6.yaml \u2502 \u251c\u2500 weather/ # Used by all weather-type usersvg tools \u2502 \u251c\u2500 *-day.svg \u2502 \u2514\u2500 *-night.svg \u2502 \u251c\u2500 ic-face-1.svg # Used by Airvisual face display usersvg tools \u251c\u2500 (...) \u2514\u2500 ic-face-6.svg Step 3b: Add sak-examples-dashboard.yaml in the root folder and include it into your configuration.yaml : configuration.yaml lovelace : mode : yaml resources : !include lovelace/resources/resources.yaml dashboards : sak-examples : mode : yaml filename : sak-examples-dashboard.yaml title : Swiss Army Knife Examples icon : mdi:hospital-box show_in_sidebar : true The dashboard contains the 11 example views: sak-examples-dashboard.yaml # Decluttering Templates decluttering_templates : !include lovelace/decluttering_templates/decluttering_templates.yaml # Swiss Army Knife Templates sak_templates : !include lovelace/sak_templates/sak_templates.yaml title : Swiss Army Knife Examples views : # Swiss Army Knife example views... - !include lovelace/views/view-sake1.yml - !include lovelace/views/view-sake2.yml - !include lovelace/views/view-sake3.yml - !include lovelace/views/view-sake4.yml - !include lovelace/views/view-sake5.yml - !include lovelace/views/view-sake6.yml - !include lovelace/views/view-sake7.yml - !include lovelace/views/view-sake8.yml - !include lovelace/views/view-sake9.yml - !include lovelace/views/view-sake10.yml - !include lovelace/views/view-sake11.yml The views themselves reference the gonsboro and dark steelblue themes, you can keep your existing theme You don't have to switch to the gonsboro or dark steelblue theme for your installation to see the examples \"as the creator meant them to be seen\", so your existing views stay the same. Step 3c: Restart Home Assistant to have the dashboard installed Make sure to validate your config before you restart Home Assistant You made it again! \u00b6 Now enjoy the examples and don't forget that you have to replace my entities with yours to see the cards as intended!","title":"Version 0.9.0-b2"},{"location":"start/installation-0.9.0-b2/#automatic-install-using-hacs","text":"By the time this card is released, it will become available in HACS. NTS: As SAK needs template files, I guess installation can't be fully automated...","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Automatic install using HACS"},{"location":"start/installation-0.9.0-b2/#manual-install-for-beta-090-b2-january-2022","text":"This is an OLD version!! This second beta contains some changes in the layout and !includes to make it more up-to-date with current Home Assistant possibilities and requires less manual work. The first beta was still based on an very old config of mine. This version uses the possibilities described in Splitting up the configuration . This beta version expects the files to be using the following directory structure with their files. If your structure differs, put the files into YOUR location, and don't forget to adjust the !include statements.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Manual install (for Beta 0.9.0-b2, January 2022)"},{"location":"start/installation-0.9.0-b2/#my-folder-structure","text":"I use separate folders for many things in Home Assistant Read and adapt to your own config and structure. Below, as reference the folder structure I use Home Assistant Lovelace folder www folder Themes folder homeassistant-data/ . \u251c\u2500 lovelace/ \u251c\u2500 themes/ \u251c\u2500 www/ \u2502 \u251c\u2500 configuration.yaml \u251c\u2500 ui-lovelace.yaml \u2514\u2500 sak-examples-dashboard.yaml My Lovelace folder contains the following folders: lovelace/ . \u251c\u2500 decluttering_templates \u2502 \u251c\u2500 decluttering_templates.yaml \u2502 \u2514\u2500 (etc) \u2502 \u251c\u2500 sak_templates/ \u2502 \u251c\u2500 sak_templates.yaml \u2502 \u251c\u2500 definitions/ \u2502 \u2502 \u251c\u2500 sak-css-definitions.yaml \u2502 \u2502 \u251c\u2500 user-css-definitions.yaml \u2502 \u2502 \u2514\u2500 sak-svg-definitions.yaml \u2502 \u2514\u2500 templates/ \u2502 \u2514\u2500<templates>.yaml \u2502 \u251c\u2500 resources \u2502 \u2514\u2500 resources.yaml \u2502 \u251c\u2500 views/ \u2502 \u251c\u2500 view-sake1.yml \u2502 \u251c\u2500 (...) \u2502 \u2514\u2500 view-sake11.yml The location of the sak_templates folder in the lovelace folder is MANDATORY! This location is hard-coded into the SAK card. SAK needs the templates to function! www/ . \u251c\u2500 community/ \u2502 \u2514\u2500 wip-swiss-army-knife-card/ \u2502 \u2514\u2500 dev-swiss-army-knife-card.js \u2502 \u251c\u2500 images/ \u251c\u2500 backgrounds/ \u2502 \u2514\u2500 balls-background-1.svg # Used by view-sake6.yaml \u2502 \u251c\u2500 weather/ # Used by all weather-type usersvg tools \u2502 \u251c\u2500 *-day.svg \u2502 \u2514\u2500 *-night.svg \u2502 \u251c\u2500 ic-face-1.svg # Used by Airvisual face display usersvg tools \u251c\u2500 (...) \u2514\u2500 ic-face-6.svg themes/ . \u251c\u2500 nm-01-gonsboro.yaml \u2514\u2500 nm-03-dark-steelblue.yaml","title":"My Folder Structure"},{"location":"start/installation-0.9.0-b2/#step-1-add-swiss-army-knife-card-to-your-installation","text":"The folder has a wip prefix and the card itself a dev prefix. These will be removed in the official release. This way they can't overwrite each other... Step 1a: Put the card into the community ( HACS ) folder. www/ . \u251c\u2500 community/ \u2502 \u2514\u2500 wip-swiss-army-knife-card/ \u2502 \u2514\u2500 dev-swiss-army-knife-card.js Step 1b: Add the card to the resources.yaml file. resources.yaml - url : /hacsfiles/wip-swiss-army-knife-card/dev-swiss-army-knife-card.min.js type : module The resources.yaml file should be included in your configuration.yaml config. I assume that that is already in place if you're using custom cards. configuration.yaml lovelace : mode : yaml resources : !include lovelace/resources/resources.yaml I have a YAML only config. Pleas adjust to your own configuration","title":" Step 1: Add Swiss Army Knife Card to your installation"},{"location":"start/installation-0.9.0-b2/#step-2-add-swiss-army-knife-templates","text":"The second step is to add the sak_templates . These are mandatory. Step 2a: Add the SAK templates to the sak_templates folder. Create the sak_templates folder in the lovelace folder and add all the folders and files. lovelace/ . \u251c\u2500 sak_templates/ \u2502 \u251c\u2500 sak_templates.yaml \u2502 \u251c\u2500 definitions/ \u2502 \u2502 \u251c\u2500 sak-css-definitions.yaml \u2502 \u2502 \u2514\u2500 user-css-definitions.yaml \u2502 \u2514\u2500 templates/ \u2502 \u2514\u2500<templates>.yaml``` Step 2b: Include sak_templates to ui-lovelace.yaml ui-lovelace.yaml # Swiss Army Knife Templates sak_templates : !include lovelace/sak_templates/sak_templates.yaml The supplied sak_templates.yaml file contains a wildcard include for the templates folder. So ANY template you add in that folder will be automatically included. You don't have to change this file!","title":" Step 2: Add Swiss Army Knife templates"},{"location":"start/installation-0.9.0-b2/#you-made-it","text":"If this is all you want, you're ready to use the Swiss Army Knife card. If not, continue with the next paragraph for the example dashboard install.","title":" You made it!"},{"location":"start/installation-0.9.0-b2/#examples-dashboard-install","text":"If you want to use the examples, you need the full install that includes the example views, decluttering templates, backgrounds and weather and Airvisual images. And last but not least: the used gonsboro and dark steelblue themes in the examples. Check my folder structure to understand my setup So you can adapt it to yours if different.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Examples dashboard install"},{"location":"start/installation-0.9.0-b2/#step-1-add-decluttering-templates","text":"Step 1a: Install the decluttering card first, if you haven't installed it yet Use HACS to install the decluttering card. Then you should have the following in your ui-lovelace.yaml file: ui-lovelace.yaml # Decluttering Templates decluttering_templates : !include lovelace/decluttering_templates/decluttering_templates.yaml Step 1b: Add the decluttering templates for SAK to your installation. The supplied decluttering_templates.yaml file contains the templates for SAK. If you already use the decluttering card, merge the files.","title":" Step 1: Add decluttering templates"},{"location":"start/installation-0.9.0-b2/#step-2-add-themes","text":"Place the two themes into your themes folder. If you use a wildcard include in your configuration.yaml , then you don't have to do anything anymore: configuration.yaml frontend : themes : !include_dir_merge_named themes/ If you use explicit includes, include the themes manually: !include nm-01-gonsboro.yaml !include nm-03-dark-steelblue.yaml","title":" Step 2: Add themes"},{"location":"start/installation-0.9.0-b2/#step-3-add-sak-examples-dashboard","text":"The Swiss Army Knife examples have their own dashboard. This way using them doesn't interfere with you running installation. You can access the examples from the side panel. Step 3a: Add the external images used by the views to your configuration www/ . \u2514\u2500 images/ \u251c\u2500 backgrounds/ \u2502 \u2514\u2500 balls-background-1.svg # Used by view-sake6.yaml \u2502 \u251c\u2500 weather/ # Used by all weather-type usersvg tools \u2502 \u251c\u2500 *-day.svg \u2502 \u2514\u2500 *-night.svg \u2502 \u251c\u2500 ic-face-1.svg # Used by Airvisual face display usersvg tools \u251c\u2500 (...) \u2514\u2500 ic-face-6.svg Step 3b: Add sak-examples-dashboard.yaml in the root folder and include it into your configuration.yaml : configuration.yaml lovelace : mode : yaml resources : !include lovelace/resources/resources.yaml dashboards : sak-examples : mode : yaml filename : sak-examples-dashboard.yaml title : Swiss Army Knife Examples icon : mdi:hospital-box show_in_sidebar : true The dashboard contains the 11 example views: sak-examples-dashboard.yaml # Decluttering Templates decluttering_templates : !include lovelace/decluttering_templates/decluttering_templates.yaml # Swiss Army Knife Templates sak_templates : !include lovelace/sak_templates/sak_templates.yaml title : Swiss Army Knife Examples views : # Swiss Army Knife example views... - !include lovelace/views/view-sake1.yml - !include lovelace/views/view-sake2.yml - !include lovelace/views/view-sake3.yml - !include lovelace/views/view-sake4.yml - !include lovelace/views/view-sake5.yml - !include lovelace/views/view-sake6.yml - !include lovelace/views/view-sake7.yml - !include lovelace/views/view-sake8.yml - !include lovelace/views/view-sake9.yml - !include lovelace/views/view-sake10.yml - !include lovelace/views/view-sake11.yml The views themselves reference the gonsboro and dark steelblue themes, you can keep your existing theme You don't have to switch to the gonsboro or dark steelblue theme for your installation to see the examples \"as the creator meant them to be seen\", so your existing views stay the same. Step 3c: Restart Home Assistant to have the dashboard installed Make sure to validate your config before you restart Home Assistant","title":" Step 3: Add SAK examples dashboard"},{"location":"start/installation-0.9.0-b2/#you-made-it-again","text":"Now enjoy the examples and don't forget that you have to replace my entities with yours to see the cards as intended!","title":" You made it again!"},{"location":"start/installation/","tags":["Install"],"text":"Installation \u00b6 If you think the installation steps and description can be made better or simplified, please let me know! It may benefit other users. Welcome to the installation manual for the versatile Swiss Army Knife custom card for Home Assistant. The installation can be done in two ways: hybrid install using HACS and manual steps full manual install On top of that you can install the examples using an extra dashboard. I'm using a full YAML configuration, so there might be some flaws in the installation for storage based configurations Check Home Assistant - Multiple Dashboards ( https://www.home-assistant.io/dashboards/dashboards/ ) for more info about mixing storage mode and YAML mode dashboards. This public release candidate contains some fixes from the beta's, some breaking changes (configuration), extra examples, and - for some of the examples - the introduction / integration with HAM3: The Material 3 themes for Home Assistant! Hybrid install using HACS Default \u00b6 This card is merged in HACS as of June 19 th , 2022. But it might not be directly available! According to https://hacs-repositories.web.app/ , the merged repository is not yet available! But you can use the HACS custom install. See next paragraph. HACS takes care of manual step 1. So if you installed using HACS, continue with manual step 2. The installation of the Examples Dashboard, which requires example views and SAK templates along some decluttering templates can't be automated using HACS. It requires some manual steps. Follow the HACS messages to install the card and add this card to your resources.yaml file if not using storage but YAML mode! As the Swiss Army Knife custom card needs its own folders and template files, the installation can't be fully automated... Hybrid install using HACS Custom \u00b6 You can install this card using the add custom repository option in HACS while the plugin is not yet available. Add https://github.com/AmoebeLabs/swiss-army-knife-card as a plugin, and you should be able to install the card using HACS! Follow the HACS messages to install the card and add this card to your resources.yaml file if not using storage but YAML mode! As the Swiss Army Knife custom card needs its own folders and template files, the installation can't be fully automated... Full Manual install (for v1.0.0-rc.1, June 19 th , 2022) \u00b6 This release candidate version expects the files to be using the following directory structure with their files. If your structure differs, put the files into YOUR location, and don't forget to adjust the !include statements. My Folder Structure \u00b6 I use separate folders for many things in Home Assistant Read and adapt to your own configuration and structure. Below, as reference the folder structure I use. This one shows the files for the full install, including the example dashboard and views. Home Assistant Lovelace folder www folder Themes folder homeassistant-data/ . \u251c\u2500 lovelace/ \u251c\u2500 themes/ \u251c\u2500 www/ \u2502 \u251c\u2500 configuration.yaml \u251c\u2500 ui-lovelace.yaml \u2514\u2500 sak-examples-dashboard.yaml My Lovelace folder contains the following folders: lovelace/ . \u251c\u2500 decluttering_templates \u2502 \u251c\u2500 decluttering_templates.yaml \u2502 \u2514\u2500 (etc) \u2502 \u251c\u2500 resources \u2502 \u2514\u2500 resources.yaml \u2502 \u251c\u2500 sak_templates/ \u2502 \u251c\u2500 definitions/ \u2502 \u2502 \u2514\u2500 user-css-definitions.yaml \u2502 \u251c\u2500 sak_templates.yaml \u2502 \u2514\u2500 templates/ \u2502 \u2514\u2500<templates>.yaml \u2502 \u251c\u2500 views/ \u2502 \u2514\u2500sak-example-views/ \u2502 \u251c\u2500 view-sake1.yml \u2502 \u251c\u2500 (...) \u2502 \u2514\u2500 view-sake12-m3.yml As you can see, I use separate folders for my configuration. The sak_templates folder is included from the ui-lovelace.yaml file. www/ . \u251c\u2500 community/ \u2502 \u2514\u2500 swiss-army-knife-card/ \u2502 \u251c\u2500 sak_templates.yaml # System templates with.. \u2502 \u251c\u2500 sak-css-definitions.yml # ..SAK defined CSS definitions for each tool \u2502 \u251c\u2500 sak-svg-definitions.yml # ..SAK defined SVG definitions like filters \u2502 \u251c\u2500 SVGInjector.min.js # Modified SVGInjector \u2502 \u251c\u2500 SVGInjector.min.js.gz # Zipped version (done by HACS) \u2502 \u251c\u2500 swiss-army-knife-card.js # SAK card (minified) \u2502 \u2514\u2500 swiss-army-knife-card.js.gz # Zipped version (done by HACS) \u2502 \u251c\u2500 images/ \u251c\u2500 airvisual/ # Used by Airvisual face display usersvg tools \u2502 \u251c\u2500 ic-face-1.svg \u2502 \u251c\u2500 (...) \u2502 \u2514\u2500 ic-face-6.svg \u2502 \u251c\u2500 backgrounds/ \u2502 \u2514\u2500 balls-background-1.svg # Used by view-sake6.yaml \u2502 \u251c\u2500 weather/ # Used by all weather-type usersvg tools \u2502 \u251c\u2500 *-day.svg \u2502 \u2514\u2500 *-night.svg \u2502 themes/ . \u251c\u2500 <Material 3 theme> # Required for example 11 and 12 \u251c\u2500 nm-01-gonsboro.yaml # Used theme for the Neumorphic examples \u2514\u2500 nm-03-dark-steelblue.yaml # Used theme for the Neumorphic examples Step 1: Add Swiss Army Knife Card to your installation \u00b6 Step 1a: Download the zip release file onto your computer and unzip! Step 1b: Create the swiss-army-knife-card folder in the www/community folder. Put the contents of the /dist folder of the card into that folder. www/ . \u251c\u2500 community/ \u2502 \u2514\u2500 swiss-army-knife-card/ \u2502 \u251c\u2500 sak_templates.yaml # System templates with.. \u2502 \u251c\u2500 sak-css-definitions.yml # ..SAK defined CSS definitions for each tool \u2502 \u251c\u2500 sak-svg-definitions.yml # ..SAK defined SVG definitions like filters \u2502 \u251c\u2500 SVGInjector.min.js # Modified SVGInjector \u2502 \u2514\u2500 swiss-army-knife-card.js Step 1c: Add the card to the resources.yaml file. resources.yaml - url : /hacsfiles/swiss-army-knife-card/swiss-army-knife-card.js type : module The resources.yaml file should be included in your configuration.yaml file. I assume that that is already in place if you're using custom cards. configuration.yaml lovelace : mode : yaml resources : !include lovelace/resources/resources.yaml I have a YAML only configuration. Pleas adjust to your own configuration If you use storage mode, add the resource using the UI. Step 2: Create folders for templates and definitions \u00b6 Step 2a: Copy the sak_templates folder from the ha-config\\lovelace\\ folder into your lovelace folder. After that you should have the following folders and files (the user-svg-definitions.yaml might be absent, as this one is empty!): lovelace/ . \u251c\u2500 sak_templates/ \u2502 \u251c\u2500 definitions/ \u2502 \u2502 \u251c\u2500 user-svg-definitions.yaml \u2502 \u2502 \u2514\u2500 user-css-definitions.yaml \u2502 \u251c\u2500 sak_templates.yaml \u2502 \u2514\u2500 templates/ \u2502 \u2514\u2500<templates>.yaml Step 2b: Include sak_templates to ui-lovelace.yaml ui-lovelace.yaml # Swiss Army Knife Templates # # The system templates come with the HACS install and can be updated # with a new release. That part is automatic! sak_sys_templates : !include www/community/swiss-army-knife-card/sak_templates.yaml # The user templates are created by the user, and won't be updated # with a new release. If changes are required, then the user has to # upate the template configuration files. sak_user_templates : !include lovelace/sak_templates/sak_templates.yaml The supplied sak_templates.yaml file contains a wildcard include for the templates folder. So ANY template you add in that folder will be automatically included. You don't have to change this file! You made it! \u00b6 If this is all you want, you're ready to use the Swiss Army Knife card. If not, continue with the next paragraph for the example dashboard install. Examples dashboard install \u00b6 If you want to use the examples, you need the full install that includes the example views, decluttering templates, backgrounds and weather, and Airvisual images. And last but not least: the used gonsboro , dark steelblue and HAM3 themes in the examples. Check my folder structure to understand my setup So you can adapt it to yours if different. Step 1: Add decluttering templates \u00b6 Step 1a: Install the decluttering card first, if you haven't installed it yet Use HACS to install the decluttering card. Then you should have the following in your ui-lovelace.yaml file: ui-lovelace.yaml # Decluttering Templates decluttering_templates : !include lovelace/decluttering_templates/decluttering_templates.yaml Step 1b: Add the decluttering templates for SAK to your installation. The supplied decluttering_templates.yaml file contains the templates for SAK. If you already use the decluttering card, merge the files. Step 2: Add themes \u00b6 Place the supplied themes ( ha-config/lovelace/themes folder) into your themes folder. If you use a wildcard include in your configuration.yaml , then you don't have to do anything anymore: configuration.yaml frontend : themes : !include_dir_merge_named themes/ If you use explicit includes, include the themes manually: !include nm-01-gonsboro.yaml !include nm-03-dark-steelblue.yaml !include ... Step 3: Add SAK examples dashboard \u00b6 The Swiss Army Knife examples have their own dashboard. This way using them doesn't interfere with you running installation. The YAML dashboard can be used both in YAML and Storage mode. You can access the examples from the side panel. Step 3a: Add the external images used by the views to your configuration www/ . \u2514\u2500 images/ \u251c\u2500 airvisual/ # Used by Airvisual face display usersvg tools \u2502 \u251c\u2500 ic-face-1.svg \u2502 \u251c\u2500 (...) \u2502 \u2514\u2500 ic-face-6.svg \u2502 \u251c\u2500 backgrounds/ \u2502 \u2514\u2500 balls-background-1.svg # Used by view-sake6.yaml \u2502 \u251c\u2500 weather/ # Used by all weather-type usersvg tools \u2502 \u251c\u2500 *-day.svg \u2502 \u2514\u2500 *-night.svg \u2502 Step 3b: Add sak-examples-dashboard.yaml in the root folder and include it into your configuration.yaml : YAML Mode Storage Mode configuration.yaml lovelace : mode : yaml resources : !include lovelace/resources/resources.yaml dashboards : sak-examples : mode : yaml filename : sak-examples-dashboard.yaml title : Swiss Army Knife Examples icon : mdi:hospital-box show_in_sidebar : true If you are using storage mode, your configuration should look like this according to Home Assistant documentation about \"Multiple Dashboards\" . Adding more dashboards with YAML lovelace : mode : storage # Add yaml dashboards dashboards : sak-examples : mode : yaml filename : sak-examples-dashboard.yaml title : Swiss Army Knife Examples icon : mdi:hospital-box show_in_sidebar : true The sak-example-dashboard contains the 12 example views and one view (sake99) for showing the definition of a Material 3 theme: sak-examples-dashboard.yaml ################################################################# # # # Swiss Army Knife examples dashboard (RC) # # # # Created: 2021.12.05 (up to Beta 3) # # Created: 2022.06.05 (from RC 1 onwards) # # # ################################################################# # Decluttering Templates decluttering_templates : !include lovelace/decluttering_templates/decluttering_templates.yaml # Swiss Army Knife Templates # # The system templates come with the HACS install and can be updated # with a new release. That part is automatic! sak_sys_templates : !include www/community/swiss-army-knife-card/sak_templates.yaml # The user templates are created by the user, and won't be updated # with a new release. If changes are required, then the user has to # update the template configuration files. sak_user_templates : !include lovelace/sak_templates/sak_templates.yaml title : Swiss Army Knife Examples views : # Swiss Army Knife example views... # # Each example is manually included, so you can select just a # few for testing and integration... - !include lovelace/views/sak-example-views/view-sake1.yml - !include lovelace/views/sak-example-views/view-sake1-m3.yml - !include lovelace/views/sak-example-views/view-sake2.yml - !include lovelace/views/sak-example-views/view-sake3.yml - !include lovelace/views/sak-example-views/view-sake4.yml - !include lovelace/views/sak-example-views/view-sake5.yml - !include lovelace/views/sak-example-views/view-sake6.yml - !include lovelace/views/sak-example-views/view-sake6-m3.yml - !include lovelace/views/sak-example-views/view-sake7.yml - !include lovelace/views/sak-example-views/view-sake8.yml - !include lovelace/views/sak-example-views/view-sake9.yml - !include lovelace/views/sak-example-views/view-sake10.yml - !include lovelace/views/sak-example-views/view-sake11-m3.yml - !include lovelace/views/sak-example-views/view-sake12-m3.yml - !include lovelace/views/sak-example-views/view-sake99-m3.yml The views themselves reference the gonsboro and dark steelblue themes, you can keep your existing theme You don't have to switch to the gonsboro or dark steelblue theme for your installation to see the examples \"as the creator meant them to be seen\", so your existing views stay the same. The views with '-m3' suffix in their name require a Material 3 Theme to be selected for Home Assistant All the Material 3 themes are included in the ha-config folder on Github! Step 3c: Restart Home Assistant to have the dashboard installed Make sure to validate your config before you restart Home Assistant You made it again! \u00b6 Now enjoy the examples and don't forget that you have to replace my entities with yours to see the cards as intended! Needing inspiration on how to design your own card? Read how I designed all the example cards. If you want to start building right away, head over to the tools and toolsets section! Check the interactions page for user interactions with the tools and toolsets, and last but not least the extensive CSS class and element styling options, CSS animations , colorstops and state operators .","title":"Installation"},{"location":"start/installation/#installation","text":"If you think the installation steps and description can be made better or simplified, please let me know! It may benefit other users. Welcome to the installation manual for the versatile Swiss Army Knife custom card for Home Assistant. The installation can be done in two ways: hybrid install using HACS and manual steps full manual install On top of that you can install the examples using an extra dashboard. I'm using a full YAML configuration, so there might be some flaws in the installation for storage based configurations Check Home Assistant - Multiple Dashboards ( https://www.home-assistant.io/dashboards/dashboards/ ) for more info about mixing storage mode and YAML mode dashboards. This public release candidate contains some fixes from the beta's, some breaking changes (configuration), extra examples, and - for some of the examples - the introduction / integration with HAM3: The Material 3 themes for Home Assistant!","title":"Installation"},{"location":"start/installation/#hybrid-install-using-hacs-default","text":"This card is merged in HACS as of June 19 th , 2022. But it might not be directly available! According to https://hacs-repositories.web.app/ , the merged repository is not yet available! But you can use the HACS custom install. See next paragraph. HACS takes care of manual step 1. So if you installed using HACS, continue with manual step 2. The installation of the Examples Dashboard, which requires example views and SAK templates along some decluttering templates can't be automated using HACS. It requires some manual steps. Follow the HACS messages to install the card and add this card to your resources.yaml file if not using storage but YAML mode! As the Swiss Army Knife custom card needs its own folders and template files, the installation can't be fully automated...","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Hybrid install using HACS Default"},{"location":"start/installation/#hybrid-install-using-hacs-custom","text":"You can install this card using the add custom repository option in HACS while the plugin is not yet available. Add https://github.com/AmoebeLabs/swiss-army-knife-card as a plugin, and you should be able to install the card using HACS! Follow the HACS messages to install the card and add this card to your resources.yaml file if not using storage but YAML mode! As the Swiss Army Knife custom card needs its own folders and template files, the installation can't be fully automated...","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Hybrid install using HACS Custom"},{"location":"start/installation/#full-manual-install-for-v100-rc1-june-19th-2022","text":"This release candidate version expects the files to be using the following directory structure with their files. If your structure differs, put the files into YOUR location, and don't forget to adjust the !include statements.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Full Manual install (for v1.0.0-rc.1, June 19th, 2022)"},{"location":"start/installation/#my-folder-structure","text":"I use separate folders for many things in Home Assistant Read and adapt to your own configuration and structure. Below, as reference the folder structure I use. This one shows the files for the full install, including the example dashboard and views. Home Assistant Lovelace folder www folder Themes folder homeassistant-data/ . \u251c\u2500 lovelace/ \u251c\u2500 themes/ \u251c\u2500 www/ \u2502 \u251c\u2500 configuration.yaml \u251c\u2500 ui-lovelace.yaml \u2514\u2500 sak-examples-dashboard.yaml My Lovelace folder contains the following folders: lovelace/ . \u251c\u2500 decluttering_templates \u2502 \u251c\u2500 decluttering_templates.yaml \u2502 \u2514\u2500 (etc) \u2502 \u251c\u2500 resources \u2502 \u2514\u2500 resources.yaml \u2502 \u251c\u2500 sak_templates/ \u2502 \u251c\u2500 definitions/ \u2502 \u2502 \u2514\u2500 user-css-definitions.yaml \u2502 \u251c\u2500 sak_templates.yaml \u2502 \u2514\u2500 templates/ \u2502 \u2514\u2500<templates>.yaml \u2502 \u251c\u2500 views/ \u2502 \u2514\u2500sak-example-views/ \u2502 \u251c\u2500 view-sake1.yml \u2502 \u251c\u2500 (...) \u2502 \u2514\u2500 view-sake12-m3.yml As you can see, I use separate folders for my configuration. The sak_templates folder is included from the ui-lovelace.yaml file. www/ . \u251c\u2500 community/ \u2502 \u2514\u2500 swiss-army-knife-card/ \u2502 \u251c\u2500 sak_templates.yaml # System templates with.. \u2502 \u251c\u2500 sak-css-definitions.yml # ..SAK defined CSS definitions for each tool \u2502 \u251c\u2500 sak-svg-definitions.yml # ..SAK defined SVG definitions like filters \u2502 \u251c\u2500 SVGInjector.min.js # Modified SVGInjector \u2502 \u251c\u2500 SVGInjector.min.js.gz # Zipped version (done by HACS) \u2502 \u251c\u2500 swiss-army-knife-card.js # SAK card (minified) \u2502 \u2514\u2500 swiss-army-knife-card.js.gz # Zipped version (done by HACS) \u2502 \u251c\u2500 images/ \u251c\u2500 airvisual/ # Used by Airvisual face display usersvg tools \u2502 \u251c\u2500 ic-face-1.svg \u2502 \u251c\u2500 (...) \u2502 \u2514\u2500 ic-face-6.svg \u2502 \u251c\u2500 backgrounds/ \u2502 \u2514\u2500 balls-background-1.svg # Used by view-sake6.yaml \u2502 \u251c\u2500 weather/ # Used by all weather-type usersvg tools \u2502 \u251c\u2500 *-day.svg \u2502 \u2514\u2500 *-night.svg \u2502 themes/ . \u251c\u2500 <Material 3 theme> # Required for example 11 and 12 \u251c\u2500 nm-01-gonsboro.yaml # Used theme for the Neumorphic examples \u2514\u2500 nm-03-dark-steelblue.yaml # Used theme for the Neumorphic examples","title":"My Folder Structure"},{"location":"start/installation/#step-1-add-swiss-army-knife-card-to-your-installation","text":"Step 1a: Download the zip release file onto your computer and unzip! Step 1b: Create the swiss-army-knife-card folder in the www/community folder. Put the contents of the /dist folder of the card into that folder. www/ . \u251c\u2500 community/ \u2502 \u2514\u2500 swiss-army-knife-card/ \u2502 \u251c\u2500 sak_templates.yaml # System templates with.. \u2502 \u251c\u2500 sak-css-definitions.yml # ..SAK defined CSS definitions for each tool \u2502 \u251c\u2500 sak-svg-definitions.yml # ..SAK defined SVG definitions like filters \u2502 \u251c\u2500 SVGInjector.min.js # Modified SVGInjector \u2502 \u2514\u2500 swiss-army-knife-card.js Step 1c: Add the card to the resources.yaml file. resources.yaml - url : /hacsfiles/swiss-army-knife-card/swiss-army-knife-card.js type : module The resources.yaml file should be included in your configuration.yaml file. I assume that that is already in place if you're using custom cards. configuration.yaml lovelace : mode : yaml resources : !include lovelace/resources/resources.yaml I have a YAML only configuration. Pleas adjust to your own configuration If you use storage mode, add the resource using the UI.","title":" Step 1: Add Swiss Army Knife Card to your installation"},{"location":"start/installation/#step-2-create-folders-for-templates-and-definitions","text":"Step 2a: Copy the sak_templates folder from the ha-config\\lovelace\\ folder into your lovelace folder. After that you should have the following folders and files (the user-svg-definitions.yaml might be absent, as this one is empty!): lovelace/ . \u251c\u2500 sak_templates/ \u2502 \u251c\u2500 definitions/ \u2502 \u2502 \u251c\u2500 user-svg-definitions.yaml \u2502 \u2502 \u2514\u2500 user-css-definitions.yaml \u2502 \u251c\u2500 sak_templates.yaml \u2502 \u2514\u2500 templates/ \u2502 \u2514\u2500<templates>.yaml Step 2b: Include sak_templates to ui-lovelace.yaml ui-lovelace.yaml # Swiss Army Knife Templates # # The system templates come with the HACS install and can be updated # with a new release. That part is automatic! sak_sys_templates : !include www/community/swiss-army-knife-card/sak_templates.yaml # The user templates are created by the user, and won't be updated # with a new release. If changes are required, then the user has to # upate the template configuration files. sak_user_templates : !include lovelace/sak_templates/sak_templates.yaml The supplied sak_templates.yaml file contains a wildcard include for the templates folder. So ANY template you add in that folder will be automatically included. You don't have to change this file!","title":" Step 2: Create folders for templates and definitions"},{"location":"start/installation/#you-made-it","text":"If this is all you want, you're ready to use the Swiss Army Knife card. If not, continue with the next paragraph for the example dashboard install.","title":" You made it!"},{"location":"start/installation/#examples-dashboard-install","text":"If you want to use the examples, you need the full install that includes the example views, decluttering templates, backgrounds and weather, and Airvisual images. And last but not least: the used gonsboro , dark steelblue and HAM3 themes in the examples. Check my folder structure to understand my setup So you can adapt it to yours if different.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Examples dashboard install"},{"location":"start/installation/#step-1-add-decluttering-templates","text":"Step 1a: Install the decluttering card first, if you haven't installed it yet Use HACS to install the decluttering card. Then you should have the following in your ui-lovelace.yaml file: ui-lovelace.yaml # Decluttering Templates decluttering_templates : !include lovelace/decluttering_templates/decluttering_templates.yaml Step 1b: Add the decluttering templates for SAK to your installation. The supplied decluttering_templates.yaml file contains the templates for SAK. If you already use the decluttering card, merge the files.","title":" Step 1: Add decluttering templates"},{"location":"start/installation/#step-2-add-themes","text":"Place the supplied themes ( ha-config/lovelace/themes folder) into your themes folder. If you use a wildcard include in your configuration.yaml , then you don't have to do anything anymore: configuration.yaml frontend : themes : !include_dir_merge_named themes/ If you use explicit includes, include the themes manually: !include nm-01-gonsboro.yaml !include nm-03-dark-steelblue.yaml !include ...","title":" Step 2: Add themes"},{"location":"start/installation/#step-3-add-sak-examples-dashboard","text":"The Swiss Army Knife examples have their own dashboard. This way using them doesn't interfere with you running installation. The YAML dashboard can be used both in YAML and Storage mode. You can access the examples from the side panel. Step 3a: Add the external images used by the views to your configuration www/ . \u2514\u2500 images/ \u251c\u2500 airvisual/ # Used by Airvisual face display usersvg tools \u2502 \u251c\u2500 ic-face-1.svg \u2502 \u251c\u2500 (...) \u2502 \u2514\u2500 ic-face-6.svg \u2502 \u251c\u2500 backgrounds/ \u2502 \u2514\u2500 balls-background-1.svg # Used by view-sake6.yaml \u2502 \u251c\u2500 weather/ # Used by all weather-type usersvg tools \u2502 \u251c\u2500 *-day.svg \u2502 \u2514\u2500 *-night.svg \u2502 Step 3b: Add sak-examples-dashboard.yaml in the root folder and include it into your configuration.yaml : YAML Mode Storage Mode configuration.yaml lovelace : mode : yaml resources : !include lovelace/resources/resources.yaml dashboards : sak-examples : mode : yaml filename : sak-examples-dashboard.yaml title : Swiss Army Knife Examples icon : mdi:hospital-box show_in_sidebar : true If you are using storage mode, your configuration should look like this according to Home Assistant documentation about \"Multiple Dashboards\" . Adding more dashboards with YAML lovelace : mode : storage # Add yaml dashboards dashboards : sak-examples : mode : yaml filename : sak-examples-dashboard.yaml title : Swiss Army Knife Examples icon : mdi:hospital-box show_in_sidebar : true The sak-example-dashboard contains the 12 example views and one view (sake99) for showing the definition of a Material 3 theme: sak-examples-dashboard.yaml ################################################################# # # # Swiss Army Knife examples dashboard (RC) # # # # Created: 2021.12.05 (up to Beta 3) # # Created: 2022.06.05 (from RC 1 onwards) # # # ################################################################# # Decluttering Templates decluttering_templates : !include lovelace/decluttering_templates/decluttering_templates.yaml # Swiss Army Knife Templates # # The system templates come with the HACS install and can be updated # with a new release. That part is automatic! sak_sys_templates : !include www/community/swiss-army-knife-card/sak_templates.yaml # The user templates are created by the user, and won't be updated # with a new release. If changes are required, then the user has to # update the template configuration files. sak_user_templates : !include lovelace/sak_templates/sak_templates.yaml title : Swiss Army Knife Examples views : # Swiss Army Knife example views... # # Each example is manually included, so you can select just a # few for testing and integration... - !include lovelace/views/sak-example-views/view-sake1.yml - !include lovelace/views/sak-example-views/view-sake1-m3.yml - !include lovelace/views/sak-example-views/view-sake2.yml - !include lovelace/views/sak-example-views/view-sake3.yml - !include lovelace/views/sak-example-views/view-sake4.yml - !include lovelace/views/sak-example-views/view-sake5.yml - !include lovelace/views/sak-example-views/view-sake6.yml - !include lovelace/views/sak-example-views/view-sake6-m3.yml - !include lovelace/views/sak-example-views/view-sake7.yml - !include lovelace/views/sak-example-views/view-sake8.yml - !include lovelace/views/sak-example-views/view-sake9.yml - !include lovelace/views/sak-example-views/view-sake10.yml - !include lovelace/views/sak-example-views/view-sake11-m3.yml - !include lovelace/views/sak-example-views/view-sake12-m3.yml - !include lovelace/views/sak-example-views/view-sake99-m3.yml The views themselves reference the gonsboro and dark steelblue themes, you can keep your existing theme You don't have to switch to the gonsboro or dark steelblue theme for your installation to see the examples \"as the creator meant them to be seen\", so your existing views stay the same. The views with '-m3' suffix in their name require a Material 3 Theme to be selected for Home Assistant All the Material 3 themes are included in the ha-config folder on Github! Step 3c: Restart Home Assistant to have the dashboard installed Make sure to validate your config before you restart Home Assistant","title":" Step 3: Add SAK examples dashboard"},{"location":"start/installation/#you-made-it-again","text":"Now enjoy the examples and don't forget that you have to replace my entities with yours to see the cards as intended! Needing inspiration on how to design your own card? Read how I designed all the example cards. If you want to start building right away, head over to the tools and toolsets section! Check the interactions page for user interactions with the tools and toolsets, and last but not least the extensive CSS class and element styling options, CSS animations , colorstops and state operators .","title":" You made it again!"},{"location":"start/preface/","tags":["Preface","Background"],"text":"Preface \u00b6 Welcome to the preface of the versatile Swiss Army Knife custom card for Home Assistant! Introduction \u00b6 I am a longtime Home Assistant user. At the time, YAML was about the only way to configure Home Assistant. About every two weeks, you were confronted with the famous list of \"breaking changes\" that led you to change your configuration and explain to the wife that it was okay for the lights to come on during the day and not at night: it only takes me a few hours to fix it. No worries I am visually oriented. And with the introduction of Lovelace and the creation of countless custom cards, many choices were made available to visualize the sensor data. And thanks to the vibrant community, there was a built-in or custom-card for about everything you wanted. Happy, but I want more! \u00b6 Despite all those choices, I adapted these cards in many cases to get the visualization I wanted. And by doing that I learned step-by-step the inner workings of a custom card and the basis for these cards: the web-component Lit. During the adaption of another custom card, the question \"What if I would have the possibility to design my own visualization?\" came up more and more. In that case, I could design completely different cards than currently available. But: I'm not a real programmer, I learn by looking at how other people solve problems, and by understanding that, I can create my own code to solve my own problems. So, how feasible is it to create this kind of card? And then shit happened... \u00b6 The kind of shit that can't be fixed easily: my little sister got diagnosed with cancer. The first MRI scans were good though: 100% chance of survival and she got her operation. But then things turned for the worse: metastatic cancer. She died 6 months later in 2021, almost in full isolation due to the covid pandemic. At the time of that fatal message, I needed something positive to balance all the negative things and decided to take the challenge and start building this card: The versatile multi-tool custom card aka the Swiss Army Knife custom card was born! The dilemma: release or not? \u00b6 I stopped working on this custom card after my sister died: I had other things to do, and its purpose had suddenly \"disappeared\" somehow. In November 2021 I asked myself \"What to do now?\". The card is unfinished, no one but me has used it, has no documentation, and given its size, that could be quite a big undertaking. In addition, users will find bugs that need fixing. And I have to do other things too. But what if I get help? I posted a teaser of the card on the Dutch Tweakers forum : and one of them suggested a closed beta. And so it was! About 40 Home Assistant users wanted to become beta testers. That is doable for me! It got me to start creating the documentation you are reading right now! Back in 2021, I had the idea to release the custom card (as RC or BETA) around March/April 2022, but handling my sister's estate appeared to be more complex than I anticipated, so the public RC release was delayed until the end of June 2022. Nearly 2 years after I started building this card! I used Material for MkDocs to create this documentation: a great piece of software with a good navigation system, even better formatting solutions, and on top of that customization to better suit my needs. The documentation uses the \"Learn by Example\" paradigm It's a method I really like. Instead of long, very long tables of information, concrete examples are shown that are easy to understand and use in practice. The examples also show the context and relationship between options, something most tables don't have or are difficult to describe. The examples are real examples used in my own Home Assistant environment. They use (of course) my entity declarations, which you have to replace with your own sensors to make the visualization work. It is because of that reason I use the AirVisual and Met.no weather integration a lot: these ones are very easy to adapt to your own installation. Some statistics \u00b6 Last but not least: some statistics. As of June 2022 about 1.500 hours of work are put into this card, the 12 examples , the Material 3 themes and both manuals. That is with a 40 hour workweek about 9 months of work! The size of the card itself, including comments is about 7.000 lines of JavaScript. I hope, somewhere in the future, I can convert this to TypeScript. I made about 50 sketches and designs in ProCreate on my iPad for visualizations. Just to try out functionality, or to create new functionality. In total, the created Lovelace Views, SAK templates and Decluttering templates cover about 11.000 lines of YAML. File sizes vary between 170 lines for a view with perfect re-use, templates, etc. up to so-called copy/paste views containing many cards and resulting in a size of 3.500 lines of YAML. About 12 example views are created to be used as an example or inspiration for other users than me. These examples are included in the documentation (See Examples ) and in GitHub.","title":"Preface"},{"location":"start/preface/#preface","text":"Welcome to the preface of the versatile Swiss Army Knife custom card for Home Assistant!","title":"Preface"},{"location":"start/preface/#introduction","text":"I am a longtime Home Assistant user. At the time, YAML was about the only way to configure Home Assistant. About every two weeks, you were confronted with the famous list of \"breaking changes\" that led you to change your configuration and explain to the wife that it was okay for the lights to come on during the day and not at night: it only takes me a few hours to fix it. No worries I am visually oriented. And with the introduction of Lovelace and the creation of countless custom cards, many choices were made available to visualize the sensor data. And thanks to the vibrant community, there was a built-in or custom-card for about everything you wanted.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Introduction"},{"location":"start/preface/#happy-but-i-want-more","text":"Despite all those choices, I adapted these cards in many cases to get the visualization I wanted. And by doing that I learned step-by-step the inner workings of a custom card and the basis for these cards: the web-component Lit. During the adaption of another custom card, the question \"What if I would have the possibility to design my own visualization?\" came up more and more. In that case, I could design completely different cards than currently available. But: I'm not a real programmer, I learn by looking at how other people solve problems, and by understanding that, I can create my own code to solve my own problems. So, how feasible is it to create this kind of card?","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Happy, but I want more!"},{"location":"start/preface/#and-then-shit-happened","text":"The kind of shit that can't be fixed easily: my little sister got diagnosed with cancer. The first MRI scans were good though: 100% chance of survival and she got her operation. But then things turned for the worse: metastatic cancer. She died 6 months later in 2021, almost in full isolation due to the covid pandemic. At the time of that fatal message, I needed something positive to balance all the negative things and decided to take the challenge and start building this card: The versatile multi-tool custom card aka the Swiss Army Knife custom card was born!","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n And then shit happened..."},{"location":"start/preface/#the-dilemma-release-or-not","text":"I stopped working on this custom card after my sister died: I had other things to do, and its purpose had suddenly \"disappeared\" somehow. In November 2021 I asked myself \"What to do now?\". The card is unfinished, no one but me has used it, has no documentation, and given its size, that could be quite a big undertaking. In addition, users will find bugs that need fixing. And I have to do other things too. But what if I get help? I posted a teaser of the card on the Dutch Tweakers forum : and one of them suggested a closed beta. And so it was! About 40 Home Assistant users wanted to become beta testers. That is doable for me! It got me to start creating the documentation you are reading right now! Back in 2021, I had the idea to release the custom card (as RC or BETA) around March/April 2022, but handling my sister's estate appeared to be more complex than I anticipated, so the public RC release was delayed until the end of June 2022. Nearly 2 years after I started building this card! I used Material for MkDocs to create this documentation: a great piece of software with a good navigation system, even better formatting solutions, and on top of that customization to better suit my needs. The documentation uses the \"Learn by Example\" paradigm It's a method I really like. Instead of long, very long tables of information, concrete examples are shown that are easy to understand and use in practice. The examples also show the context and relationship between options, something most tables don't have or are difficult to describe. The examples are real examples used in my own Home Assistant environment. They use (of course) my entity declarations, which you have to replace with your own sensors to make the visualization work. It is because of that reason I use the AirVisual and Met.no weather integration a lot: these ones are very easy to adapt to your own installation.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n The dilemma: release or not?"},{"location":"start/preface/#some-statistics","text":"Last but not least: some statistics. As of June 2022 about 1.500 hours of work are put into this card, the 12 examples , the Material 3 themes and both manuals. That is with a 40 hour workweek about 9 months of work! The size of the card itself, including comments is about 7.000 lines of JavaScript. I hope, somewhere in the future, I can convert this to TypeScript. I made about 50 sketches and designs in ProCreate on my iPad for visualizations. Just to try out functionality, or to create new functionality. In total, the created Lovelace Views, SAK templates and Decluttering templates cover about 11.000 lines of YAML. File sizes vary between 170 lines for a view with perfect re-use, templates, etc. up to so-called copy/paste views containing many cards and resulting in a size of 3.500 lines of YAML. About 12 example views are created to be used as an example or inspiration for other users than me. These examples are included in the documentation (See Examples ) and in GitHub.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Some statistics"},{"location":"start/what-is-this-card-and-for-whom-is-it/","tags":["Introduction"],"text":"What is this card, and for whom is it? \u00b6 What is this custom card? \u00b6 Well, if you look at some of the examples below (more are in the examples section), you literally see what kind of card this is: it is a versatile custom card that can be used to create unique visualizations! To create your unique design , the Swiss Army Knife custom card has several tools for you to use which can be styled and animated in different ways. YAML to define Tools, Toolsets, CSS styling and Animations \u00b6 The designs are fully defined in YAML, and with the available 17 basic, advanced, and Home Assistant-specific SVG-based tools you can implement your visualization. Things like templates make re-use between designs possible. On top of that, several CSS styling and built-in animation options are available. You can even define your own CSS classes and animations, and use them in your designs. User interactions and haptic feedback \u00b6 You can define user interactions per tool to call the 'more info' dialog or to control lights or switches. You can even define more than 1 action per tap action. Haptic feedback can complement the click/tap action if your mobile phone supports that. Material 3 themes to have nice light/dark themes \u00b6 If you want to make the most of this card's styling, use one of the Material 3 themes for Home Assistant . This gives you fully compatible light and dark themes ! Swiss Army Knife card examples 11 and 12 use these Home Assistant Material 3 themes to implement cards that adapt to theme colors and to theme modes (dark/light). Overview of all the examples \u00b6 Example 1 - Airvisual and Weather forecast : Example 6 - Weather on SVG background : Example 3 - Sensors : Example 7 - Servers : Example 9 - High Contrast : Example 10 - Colorful mix : Example 11 - Boiler and Electricity : Example 12 - Wide cards : And for whom is it meant? \u00b6 It is not a standard card. It has no fixed design, nor fixed functionality. It doesn't do anything out-of-the-box! This card needs YOU . It needs some time to learn this card, understand its possibilities, and create a design . If that is what you want, this is your card. Let your creativity flow and enjoy the results! If that is not your thing, you should look either at a different card, adapt one of the examples from my installation, or even better: use one of the examples made by me or someone else in the community! And don't feel intimidated by the word \"design\". Most of my designs look like this: A simple sketch on my iPad that is later implemented in a YAML view using trial-and-error! You don't have to design your card if some design suits you of course! And if that card is put into a decluttering template for instance, you only have to define the entities for that card and some settings. In this way, a custom-designed card can be used as a fixed-layout card! Example 3 for instance is made that way. The view contains these definitions: From: view-sake3.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 - type : horizontal-stack cards : - type : custom:decluttering-card template : sak_sensor_history_template_nm_tpl variables : - entity : sensor.livingroom_iaq_temperature - name : Woonkamer - icon : mdi:thermometer - type : custom:decluttering-card template : sak_sensor_history_template_nm_tpl variables : - entity : sensor.kitchen_iaq_temperature - name : Keuken - icon : mdi:thermometer - type : custom:decluttering-card template : sak_sensor_history_template_nm_tpl variables : - entity : sensor.hall_gf_iaq_temperature - name : Hal - icon : mdi:thermometer The electricity card in example 11 and the several cards used in example 12 could also be used in this way! Either way, enjoy this card! Where to go from here? \u00b6 Because of the numerous possibilities of this custom card, you might wonder where to start. The answer is: it depends! It is a bit new to me! I like decluttering templates, button-card, etc. I'll take the deep dive! If this is all a bit new, take a look at the 10 Step Tutorials (I just started making them, so there aren't a lot of them yet). They will show you the basics, and some more advanced YAML configurations, and show you step-by-step how to make certain visualizations. If you understand them, take a more in-depth look at the 12 examples. Well, head over to the installation, and install the Examples Dashboard. Then integrate them using your own entities, and start learning from those examples! The examples use different strategies: A lot of copy/paste YAML Swiss Army Knife Templates Decluttering Templates","title":"What is this card, for whom is it?"},{"location":"start/what-is-this-card-and-for-whom-is-it/#what-is-this-card-and-for-whom-is-it","text":"","title":"What is this card, and for whom is it?"},{"location":"start/what-is-this-card-and-for-whom-is-it/#what-is-this-custom-card","text":"Well, if you look at some of the examples below (more are in the examples section), you literally see what kind of card this is: it is a versatile custom card that can be used to create unique visualizations! To create your unique design , the Swiss Army Knife custom card has several tools for you to use which can be styled and animated in different ways.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n What is this custom card?"},{"location":"start/what-is-this-card-and-for-whom-is-it/#yaml-to-define-tools-toolsets-css-styling-and-animations","text":"The designs are fully defined in YAML, and with the available 17 basic, advanced, and Home Assistant-specific SVG-based tools you can implement your visualization. Things like templates make re-use between designs possible. On top of that, several CSS styling and built-in animation options are available. You can even define your own CSS classes and animations, and use them in your designs.","title":"YAML to define Tools, Toolsets, CSS styling and Animations"},{"location":"start/what-is-this-card-and-for-whom-is-it/#user-interactions-and-haptic-feedback","text":"You can define user interactions per tool to call the 'more info' dialog or to control lights or switches. You can even define more than 1 action per tap action. Haptic feedback can complement the click/tap action if your mobile phone supports that.","title":"User interactions and haptic feedback"},{"location":"start/what-is-this-card-and-for-whom-is-it/#material-3-themes-to-have-nice-lightdark-themes","text":"If you want to make the most of this card's styling, use one of the Material 3 themes for Home Assistant . This gives you fully compatible light and dark themes ! Swiss Army Knife card examples 11 and 12 use these Home Assistant Material 3 themes to implement cards that adapt to theme colors and to theme modes (dark/light).","title":"Material 3 themes to have nice light/dark themes"},{"location":"start/what-is-this-card-and-for-whom-is-it/#overview-of-all-the-examples","text":"Example 1 - Airvisual and Weather forecast : Example 6 - Weather on SVG background : Example 3 - Sensors : Example 7 - Servers : Example 9 - High Contrast : Example 10 - Colorful mix : Example 11 - Boiler and Electricity : Example 12 - Wide cards :","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Overview of all the examples"},{"location":"start/what-is-this-card-and-for-whom-is-it/#and-for-whom-is-it-meant","text":"It is not a standard card. It has no fixed design, nor fixed functionality. It doesn't do anything out-of-the-box! This card needs YOU . It needs some time to learn this card, understand its possibilities, and create a design . If that is what you want, this is your card. Let your creativity flow and enjoy the results! If that is not your thing, you should look either at a different card, adapt one of the examples from my installation, or even better: use one of the examples made by me or someone else in the community! And don't feel intimidated by the word \"design\". Most of my designs look like this: A simple sketch on my iPad that is later implemented in a YAML view using trial-and-error! You don't have to design your card if some design suits you of course! And if that card is put into a decluttering template for instance, you only have to define the entities for that card and some settings. In this way, a custom-designed card can be used as a fixed-layout card! Example 3 for instance is made that way. The view contains these definitions: From: view-sake3.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 - type : horizontal-stack cards : - type : custom:decluttering-card template : sak_sensor_history_template_nm_tpl variables : - entity : sensor.livingroom_iaq_temperature - name : Woonkamer - icon : mdi:thermometer - type : custom:decluttering-card template : sak_sensor_history_template_nm_tpl variables : - entity : sensor.kitchen_iaq_temperature - name : Keuken - icon : mdi:thermometer - type : custom:decluttering-card template : sak_sensor_history_template_nm_tpl variables : - entity : sensor.hall_gf_iaq_temperature - name : Hal - icon : mdi:thermometer The electricity card in example 11 and the several cards used in example 12 could also be used in this way! Either way, enjoy this card!","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n And for whom is it meant?"},{"location":"start/what-is-this-card-and-for-whom-is-it/#where-to-go-from-here","text":"Because of the numerous possibilities of this custom card, you might wonder where to start. The answer is: it depends! It is a bit new to me! I like decluttering templates, button-card, etc. I'll take the deep dive! If this is all a bit new, take a look at the 10 Step Tutorials (I just started making them, so there aren't a lot of them yet). They will show you the basics, and some more advanced YAML configurations, and show you step-by-step how to make certain visualizations. If you understand them, take a more in-depth look at the 12 examples. Well, head over to the installation, and install the Examples Dashboard. Then integrate them using your own entities, and start learning from those examples! The examples use different strategies: A lot of copy/paste YAML Swiss Army Knife Templates Decluttering Templates","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Where to go from here?"},{"location":"tools/circle-tool/","tags":["Tools","Tool","Circle"],"text":"The Circle tool \u00b6 1.0.0 \u00b7 Output The Circle tool is based on the SVG basic <circle> element shape. Basic usage \u00b6 The Circle tool needs a center position and a radius. Standalone Connected 1 2 3 4 5 - type : 'circle' # tooltype is 'circle' position : # Position on (100x100) canvas cx : 50 # cx=50 is center position cy : 50 # cy=50 is center position radius : 25 # radius of circle. Width/height is 50 1 2 3 4 5 6 - type : 'circle' # tooltype is 'circle' position : # Position on (100x100) canvas cx : 50 # cx=50 is center position cy : 50 # cy=50 is center position radius : 25 # radius of circle. Width/height is 50 entity_index : 0 # connect to state of entity 0 Styling \u00b6 The Circle tool has support for the following forms of styling: Method Support Description classes Using SAK or User defined class definitions styles Using inline SVG and CSS styles The Circle tool is composed of a single object: \"circle\" and this is the selector for styling: 1 2 3 4 5 6 7 8 9 10 11 - type : 'circle' position : cx : 50 cy : 50 radius : 25 classes : circle : # Circle selector <...> styles : circle : # Circle selector <...> Populair properties: Property Does what? Example fill Fill color fill: red sets fill to color red stroke-width Stroke width stroke-width: 2em sets width to relative width of 2em stroke Stroke color stroke: blue sets stroke to blue opacity Opacity (stroke/fill) opacity: 0.7 sets the opacity of circle to 70% fill-opacity Opacity for fill fill-opacity: 0.5 sets the fill opacity to 50% stroke-opacity Opacity for stroke stroke-opacity: 0.5 sets the stroke opacity to 50% Reference: https://developer.mozilla.org/en-US/docs/Web/SVG/Element/circle Haptics \u00b6 See: https://companion.home-assistant.io/docs/integrations/haptics/ for devices that support haptics The tool supports haptic feedback through user_actions / tap_action definition Action Haptic Description Click haptic Uses the haptic property defined in the user_actions definition of the tool. If not specified, a default of medium is used 1 2 3 4 5 6 7 8 9 10 11 12 13 tools : - type : icon position : cx : 10 cy : 10 align : center icon_size : 15 entity_index : 0 user_actions : tap_action : haptic : success actions : - action : more-info Possible values for haptic feedback: Haptic Description success Indicates that a task or action has completed. warning Indicates that a task or action has produced a warning of some kind. failure Indicates that a task or action has failed. light Provides a physical metaphor that complements the visual experience. medium Provides a physical metaphor that complements the visual experience. heavy Provides a physical metaphor that complements the visual experience. selection Indicates that the selection is actively changing. Animations \u00b6 The Circle tool has support for the following forms of animations: Method Support Description colorstops List of state values to set the color colorlists Using a colorlist definition animations Operator state based animations with class/style styling The use of animations require the tool to be connected to an entity","title":"Circle"},{"location":"tools/circle-tool/#the-circle-tool","text":"1.0.0 \u00b7 Output The Circle tool is based on the SVG basic <circle> element shape.","title":"The Circle tool"},{"location":"tools/circle-tool/#basic-usage","text":"The Circle tool needs a center position and a radius. Standalone Connected 1 2 3 4 5 - type : 'circle' # tooltype is 'circle' position : # Position on (100x100) canvas cx : 50 # cx=50 is center position cy : 50 # cy=50 is center position radius : 25 # radius of circle. Width/height is 50 1 2 3 4 5 6 - type : 'circle' # tooltype is 'circle' position : # Position on (100x100) canvas cx : 50 # cx=50 is center position cy : 50 # cy=50 is center position radius : 25 # radius of circle. Width/height is 50 entity_index : 0 # connect to state of entity 0","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Basic usage"},{"location":"tools/circle-tool/#styling","text":"The Circle tool has support for the following forms of styling: Method Support Description classes Using SAK or User defined class definitions styles Using inline SVG and CSS styles The Circle tool is composed of a single object: \"circle\" and this is the selector for styling: 1 2 3 4 5 6 7 8 9 10 11 - type : 'circle' position : cx : 50 cy : 50 radius : 25 classes : circle : # Circle selector <...> styles : circle : # Circle selector <...> Populair properties: Property Does what? Example fill Fill color fill: red sets fill to color red stroke-width Stroke width stroke-width: 2em sets width to relative width of 2em stroke Stroke color stroke: blue sets stroke to blue opacity Opacity (stroke/fill) opacity: 0.7 sets the opacity of circle to 70% fill-opacity Opacity for fill fill-opacity: 0.5 sets the fill opacity to 50% stroke-opacity Opacity for stroke stroke-opacity: 0.5 sets the stroke opacity to 50% Reference: https://developer.mozilla.org/en-US/docs/Web/SVG/Element/circle","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Styling"},{"location":"tools/circle-tool/#haptics","text":"See: https://companion.home-assistant.io/docs/integrations/haptics/ for devices that support haptics The tool supports haptic feedback through user_actions / tap_action definition Action Haptic Description Click haptic Uses the haptic property defined in the user_actions definition of the tool. If not specified, a default of medium is used 1 2 3 4 5 6 7 8 9 10 11 12 13 tools : - type : icon position : cx : 10 cy : 10 align : center icon_size : 15 entity_index : 0 user_actions : tap_action : haptic : success actions : - action : more-info Possible values for haptic feedback: Haptic Description success Indicates that a task or action has completed. warning Indicates that a task or action has produced a warning of some kind. failure Indicates that a task or action has failed. light Provides a physical metaphor that complements the visual experience. medium Provides a physical metaphor that complements the visual experience. heavy Provides a physical metaphor that complements the visual experience. selection Indicates that the selection is actively changing.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Haptics"},{"location":"tools/circle-tool/#animations","text":"The Circle tool has support for the following forms of animations: Method Support Description colorstops List of state values to set the color colorlists Using a colorlist definition animations Operator state based animations with class/style styling The use of animations require the tool to be connected to an entity","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Animations"},{"location":"tools/default-haptics/","text":"Haptics \u00b6 See: https://companion.home-assistant.io/docs/integrations/haptics/ for devices that support haptics The tool supports haptic feedback through user_actions / tap_action definition Action Haptic Description Click haptic Uses the haptic property defined in the user_actions definition of the tool. If not specified, a default of medium is used 1 2 3 4 5 6 7 8 9 10 11 12 13 tools : - type : icon position : cx : 10 cy : 10 align : center icon_size : 15 entity_index : 0 user_actions : tap_action : haptic : success actions : - action : more-info Possible values for haptic feedback: Haptic Description success Indicates that a task or action has completed. warning Indicates that a task or action has produced a warning of some kind. failure Indicates that a task or action has failed. light Provides a physical metaphor that complements the visual experience. medium Provides a physical metaphor that complements the visual experience. heavy Provides a physical metaphor that complements the visual experience. selection Indicates that the selection is actively changing.","title":"Default haptics"},{"location":"tools/default-haptics/#haptics","text":"See: https://companion.home-assistant.io/docs/integrations/haptics/ for devices that support haptics The tool supports haptic feedback through user_actions / tap_action definition Action Haptic Description Click haptic Uses the haptic property defined in the user_actions definition of the tool. If not specified, a default of medium is used 1 2 3 4 5 6 7 8 9 10 11 12 13 tools : - type : icon position : cx : 10 cy : 10 align : center icon_size : 15 entity_index : 0 user_actions : tap_action : haptic : success actions : - action : more-info Possible values for haptic feedback: Haptic Description success Indicates that a task or action has completed. warning Indicates that a task or action has produced a warning of some kind. failure Indicates that a task or action has failed. light Provides a physical metaphor that complements the visual experience. medium Provides a physical metaphor that complements the visual experience. heavy Provides a physical metaphor that complements the visual experience. selection Indicates that the selection is actively changing.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Haptics"},{"location":"tools/ellipse-tool/","tags":["Tools","Tool","Ellipse"],"text":"The Ellipse tool \u00b6 1.0.0 \u00b7 Output The Ellipse tool is based on the SVG basic <ellipse> element shape. Basic usage \u00b6 The Ellipse tool needs a center position and a radius for both x and y directions. Standalone Connected 1 2 3 4 5 6 - type : 'ellipse' # tooltype is 'ellipse' position : # Position on (100x100) canvas cx : 50 # cx=50 is center position cy : 50 # cy=50 is center position radiusx : 50 # Width is 100 radiusy : 25 # Height is 50 1 2 3 4 5 6 7 - type : 'ellipse' # tooltype is 'ellipse' position : # Position on (100x100) canvas cx : 50 # cx=50 is center position cy : 50 # cy=50 is center position radiusx : 50 # Width is 100 radiusy : 25 # Height is 50 entity_index : 0 # connect to state of entity 0 Set the x and y radius the same to create a circle Styling \u00b6 The Ellipse tool has support for the following forms of styling: Method Support Description classes Using SAK or User defined class definitions styles Using inline SVG and CSS styles The Ellipse tool is composed of a single object: \"ellipse\" and this is the selector for styling: 1 2 3 4 5 6 7 8 9 10 11 12 - type : 'ellipse' position : cx : 50 cy : 50 radiusx : 50 radiusy : 25 classes : ellipse : # Ellipse selector <...> styles : ellipse : # Ellipse selector <...> Populair properties: Property Does what? Example fill Fill color fill: red sets fill to color red stroke-width Stroke width stroke-width: 2em sets width to relative width of 2em stroke Stroke color stroke: blue sets stroke to blue opacity Opacity (stroke/fill) opacity: 0.7 sets the opacity of ellipse to 70% fill-opacity Opacity for fill fill-opacity: 0.5 sets the fill opacity to 50% stroke-opacity Opacity for stroke stroke-opacity: 0.5 sets the stroke opacity to 50% Reference: https://developer.mozilla.org/en-US/docs/Web/SVG/Element/ellipse Haptics \u00b6 See: https://companion.home-assistant.io/docs/integrations/haptics/ for devices that support haptics The tool supports haptic feedback through user_actions / tap_action definition Action Haptic Description Click haptic Uses the haptic property defined in the user_actions definition of the tool. If not specified, a default of medium is used 1 2 3 4 5 6 7 8 9 10 11 12 13 tools : - type : icon position : cx : 10 cy : 10 align : center icon_size : 15 entity_index : 0 user_actions : tap_action : haptic : success actions : - action : more-info Possible values for haptic feedback: Haptic Description success Indicates that a task or action has completed. warning Indicates that a task or action has produced a warning of some kind. failure Indicates that a task or action has failed. light Provides a physical metaphor that complements the visual experience. medium Provides a physical metaphor that complements the visual experience. heavy Provides a physical metaphor that complements the visual experience. selection Indicates that the selection is actively changing. Animations \u00b6 The Ellipse tool has support for the following forms of animations: Method Support Description colorstops List of state values to set the color colorlists Using a colorlist definition animations Operator state based animations with class/style styling The use of animations require the tool to be connected to an entity","title":"Ellipse"},{"location":"tools/ellipse-tool/#the-ellipse-tool","text":"1.0.0 \u00b7 Output The Ellipse tool is based on the SVG basic <ellipse> element shape.","title":"The Ellipse tool"},{"location":"tools/ellipse-tool/#basic-usage","text":"The Ellipse tool needs a center position and a radius for both x and y directions. Standalone Connected 1 2 3 4 5 6 - type : 'ellipse' # tooltype is 'ellipse' position : # Position on (100x100) canvas cx : 50 # cx=50 is center position cy : 50 # cy=50 is center position radiusx : 50 # Width is 100 radiusy : 25 # Height is 50 1 2 3 4 5 6 7 - type : 'ellipse' # tooltype is 'ellipse' position : # Position on (100x100) canvas cx : 50 # cx=50 is center position cy : 50 # cy=50 is center position radiusx : 50 # Width is 100 radiusy : 25 # Height is 50 entity_index : 0 # connect to state of entity 0 Set the x and y radius the same to create a circle","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Basic usage"},{"location":"tools/ellipse-tool/#styling","text":"The Ellipse tool has support for the following forms of styling: Method Support Description classes Using SAK or User defined class definitions styles Using inline SVG and CSS styles The Ellipse tool is composed of a single object: \"ellipse\" and this is the selector for styling: 1 2 3 4 5 6 7 8 9 10 11 12 - type : 'ellipse' position : cx : 50 cy : 50 radiusx : 50 radiusy : 25 classes : ellipse : # Ellipse selector <...> styles : ellipse : # Ellipse selector <...> Populair properties: Property Does what? Example fill Fill color fill: red sets fill to color red stroke-width Stroke width stroke-width: 2em sets width to relative width of 2em stroke Stroke color stroke: blue sets stroke to blue opacity Opacity (stroke/fill) opacity: 0.7 sets the opacity of ellipse to 70% fill-opacity Opacity for fill fill-opacity: 0.5 sets the fill opacity to 50% stroke-opacity Opacity for stroke stroke-opacity: 0.5 sets the stroke opacity to 50% Reference: https://developer.mozilla.org/en-US/docs/Web/SVG/Element/ellipse","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Styling"},{"location":"tools/ellipse-tool/#haptics","text":"See: https://companion.home-assistant.io/docs/integrations/haptics/ for devices that support haptics The tool supports haptic feedback through user_actions / tap_action definition Action Haptic Description Click haptic Uses the haptic property defined in the user_actions definition of the tool. If not specified, a default of medium is used 1 2 3 4 5 6 7 8 9 10 11 12 13 tools : - type : icon position : cx : 10 cy : 10 align : center icon_size : 15 entity_index : 0 user_actions : tap_action : haptic : success actions : - action : more-info Possible values for haptic feedback: Haptic Description success Indicates that a task or action has completed. warning Indicates that a task or action has produced a warning of some kind. failure Indicates that a task or action has failed. light Provides a physical metaphor that complements the visual experience. medium Provides a physical metaphor that complements the visual experience. heavy Provides a physical metaphor that complements the visual experience. selection Indicates that the selection is actively changing.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Haptics"},{"location":"tools/ellipse-tool/#animations","text":"The Ellipse tool has support for the following forms of animations: Method Support Description colorstops List of state values to set the color colorlists Using a colorlist definition animations Operator state based animations with class/style styling The use of animations require the tool to be connected to an entity","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Animations"},{"location":"tools/entity-area-tool/","tags":["Tools","Tool","Entity Area"],"text":"The Entity Area tool \u00b6 1.0.0 \u00b7 Output The Entity Area tool displays the Home Assistant Entity Area value. Livingroom Basic usage \u00b6 The Entity Area tool needs a center position and the entity_index from which the area text is used. Connected 1 2 3 4 5 6 7 8 - type : 'area' # tooltype is 'area' position : # Position on (100x100) canvas cx : 50 # cx=50 is center position cy : 50 # cy=50 is center position entity_index : 0 # connect to state of entity 0 styles : area : font-size : 12em # set font size to 12em Always use a relative font-size: it fits well with the relative sizes used by SAK Unless you need a fixed size in pixels... Styling \u00b6 The Entity Area tool has support for the following forms of styling: Method Support Description classes Using SAK or User defined class definitions styles Using inline SVG and CSS styles The Entity Area tool is composed of a single object: \"area\" and this is the selector for styling: 1 2 3 4 5 6 7 8 9 10 11 - type : 'area' position : cx : 50 cy : 50 entity_index : 0 # connect to entity 0 classes : area : # area selector <...> styles : area : # area selector <...> Populair properties: Property Does what? Example font-size Font size font-size: 12em sets RELATIVE font size text-anchor Anchor of text text-anchor: start or middle , or end fill Fill color fill: red sets fill to color red opacity Opacity (stroke/fill) opacity: 0.7 sets the opacity of text to 70% Haptics \u00b6 See: https://companion.home-assistant.io/docs/integrations/haptics/ for devices that support haptics The tool supports haptic feedback through user_actions / tap_action definition Action Haptic Description Click haptic Uses the haptic property defined in the user_actions definition of the tool. If not specified, a default of medium is used 1 2 3 4 5 6 7 8 9 10 11 12 13 tools : - type : icon position : cx : 10 cy : 10 align : center icon_size : 15 entity_index : 0 user_actions : tap_action : haptic : success actions : - action : more-info Possible values for haptic feedback: Haptic Description success Indicates that a task or action has completed. warning Indicates that a task or action has produced a warning of some kind. failure Indicates that a task or action has failed. light Provides a physical metaphor that complements the visual experience. medium Provides a physical metaphor that complements the visual experience. heavy Provides a physical metaphor that complements the visual experience. selection Indicates that the selection is actively changing. Animations \u00b6 The Entity Area tool has support for the following forms of animations: Method Support Description colorstops List of state values to set the color colorlists Using a colorlist definition animations Operator state based animations with class/style styling","title":"Entity Area"},{"location":"tools/entity-area-tool/#the-entity-area-tool","text":"1.0.0 \u00b7 Output The Entity Area tool displays the Home Assistant Entity Area value. Livingroom","title":"The Entity Area tool"},{"location":"tools/entity-area-tool/#basic-usage","text":"The Entity Area tool needs a center position and the entity_index from which the area text is used. Connected 1 2 3 4 5 6 7 8 - type : 'area' # tooltype is 'area' position : # Position on (100x100) canvas cx : 50 # cx=50 is center position cy : 50 # cy=50 is center position entity_index : 0 # connect to state of entity 0 styles : area : font-size : 12em # set font size to 12em Always use a relative font-size: it fits well with the relative sizes used by SAK Unless you need a fixed size in pixels...","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Basic usage"},{"location":"tools/entity-area-tool/#styling","text":"The Entity Area tool has support for the following forms of styling: Method Support Description classes Using SAK or User defined class definitions styles Using inline SVG and CSS styles The Entity Area tool is composed of a single object: \"area\" and this is the selector for styling: 1 2 3 4 5 6 7 8 9 10 11 - type : 'area' position : cx : 50 cy : 50 entity_index : 0 # connect to entity 0 classes : area : # area selector <...> styles : area : # area selector <...> Populair properties: Property Does what? Example font-size Font size font-size: 12em sets RELATIVE font size text-anchor Anchor of text text-anchor: start or middle , or end fill Fill color fill: red sets fill to color red opacity Opacity (stroke/fill) opacity: 0.7 sets the opacity of text to 70%","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Styling"},{"location":"tools/entity-area-tool/#haptics","text":"See: https://companion.home-assistant.io/docs/integrations/haptics/ for devices that support haptics The tool supports haptic feedback through user_actions / tap_action definition Action Haptic Description Click haptic Uses the haptic property defined in the user_actions definition of the tool. If not specified, a default of medium is used 1 2 3 4 5 6 7 8 9 10 11 12 13 tools : - type : icon position : cx : 10 cy : 10 align : center icon_size : 15 entity_index : 0 user_actions : tap_action : haptic : success actions : - action : more-info Possible values for haptic feedback: Haptic Description success Indicates that a task or action has completed. warning Indicates that a task or action has produced a warning of some kind. failure Indicates that a task or action has failed. light Provides a physical metaphor that complements the visual experience. medium Provides a physical metaphor that complements the visual experience. heavy Provides a physical metaphor that complements the visual experience. selection Indicates that the selection is actively changing.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Haptics"},{"location":"tools/entity-area-tool/#animations","text":"The Entity Area tool has support for the following forms of animations: Method Support Description colorstops List of state values to set the color colorlists Using a colorlist definition animations Operator state based animations with class/style styling","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Animations"},{"location":"tools/entity-barchart-tool/","tags":["Tools","Tool","Entity History"],"text":"The Entity History tool \u00b6 1.0.0 \u00b7 Output The Entity History tool is a horizontal or vertical bar chart (sparkline) and displayes some history of an Home Assistant Entity. It is a basic chart, more of a sparkline with only display functionality. Basic usage \u00b6 The Entity History tool needs a center position, height, width, and margin to display the history graph. It also needs the number of hours, the number of bars per hour, and the orientation. Last but not least, it needs the entity_index from which the history is displayed Connected 1 2 3 4 5 6 7 8 9 10 11 - type : 'bar' # tooltype is 'bar' position : # Position on (100x100) canvas cx : 50 # cx=50 is center position cy : 50 # cy=50 is center position width : 180 # width of total barchart height : 55 # height margin : 1 # space between bars orientation : vertical # vertical or horizontal hours : 24 # number of hours of history barhours : 1 # each bar represents 1 hour entity_index : 0 # connect to state of entity 0 Styling \u00b6 The Entity History tool has support for the following forms of styling: Method Support Description classes Using SAK or User defined class definitions styles Using inline SVG and CSS styles The Entity History tool is composed of a single object: \"bar\" and this is the selector for styling: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 - type : 'bar' position : cx : 50 cy : 50 width : 180 # width of total barchart height : 55 # height margin : 1 # space between bars orientation : vertical # vertical or horizontal hours : 24 # number of hours of history barhours : 1 # each bar represents 1 hour entity_index : 0 classes : bar : # bar selector <...> styles : bar : # bar selector <...> Populair properties: Property Does what? Example fill Fill color fill: red sets fill to color red opacity Opacity (stroke/fill) opacity: 0.7 sets the opacity of bar to 70% stroke-linecap Format end of line stroke-linecap: round sets the endline to round. butt sets it to square Haptics \u00b6 See: https://companion.home-assistant.io/docs/integrations/haptics/ for devices that support haptics The tool supports haptic feedback through user_actions / tap_action definition Action Haptic Description Click haptic Uses the haptic property defined in the user_actions definition of the tool. If not specified, a default of medium is used 1 2 3 4 5 6 7 8 9 10 11 12 13 tools : - type : icon position : cx : 10 cy : 10 align : center icon_size : 15 entity_index : 0 user_actions : tap_action : haptic : success actions : - action : more-info Possible values for haptic feedback: Haptic Description success Indicates that a task or action has completed. warning Indicates that a task or action has produced a warning of some kind. failure Indicates that a task or action has failed. light Provides a physical metaphor that complements the visual experience. medium Provides a physical metaphor that complements the visual experience. heavy Provides a physical metaphor that complements the visual experience. selection Indicates that the selection is actively changing. Animations \u00b6 The Entity Barchart tool has support for the following forms of animations: Method Support Description colorstops List of state values to set the color for SINGLE bar colorlists Using a colorlist definition animations Operator state based animations with class/style styling","title":"Entity History"},{"location":"tools/entity-barchart-tool/#the-entity-history-tool","text":"1.0.0 \u00b7 Output The Entity History tool is a horizontal or vertical bar chart (sparkline) and displayes some history of an Home Assistant Entity. It is a basic chart, more of a sparkline with only display functionality.","title":"The Entity History tool"},{"location":"tools/entity-barchart-tool/#basic-usage","text":"The Entity History tool needs a center position, height, width, and margin to display the history graph. It also needs the number of hours, the number of bars per hour, and the orientation. Last but not least, it needs the entity_index from which the history is displayed Connected 1 2 3 4 5 6 7 8 9 10 11 - type : 'bar' # tooltype is 'bar' position : # Position on (100x100) canvas cx : 50 # cx=50 is center position cy : 50 # cy=50 is center position width : 180 # width of total barchart height : 55 # height margin : 1 # space between bars orientation : vertical # vertical or horizontal hours : 24 # number of hours of history barhours : 1 # each bar represents 1 hour entity_index : 0 # connect to state of entity 0","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Basic usage"},{"location":"tools/entity-barchart-tool/#styling","text":"The Entity History tool has support for the following forms of styling: Method Support Description classes Using SAK or User defined class definitions styles Using inline SVG and CSS styles The Entity History tool is composed of a single object: \"bar\" and this is the selector for styling: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 - type : 'bar' position : cx : 50 cy : 50 width : 180 # width of total barchart height : 55 # height margin : 1 # space between bars orientation : vertical # vertical or horizontal hours : 24 # number of hours of history barhours : 1 # each bar represents 1 hour entity_index : 0 classes : bar : # bar selector <...> styles : bar : # bar selector <...> Populair properties: Property Does what? Example fill Fill color fill: red sets fill to color red opacity Opacity (stroke/fill) opacity: 0.7 sets the opacity of bar to 70% stroke-linecap Format end of line stroke-linecap: round sets the endline to round. butt sets it to square","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Styling"},{"location":"tools/entity-barchart-tool/#haptics","text":"See: https://companion.home-assistant.io/docs/integrations/haptics/ for devices that support haptics The tool supports haptic feedback through user_actions / tap_action definition Action Haptic Description Click haptic Uses the haptic property defined in the user_actions definition of the tool. If not specified, a default of medium is used 1 2 3 4 5 6 7 8 9 10 11 12 13 tools : - type : icon position : cx : 10 cy : 10 align : center icon_size : 15 entity_index : 0 user_actions : tap_action : haptic : success actions : - action : more-info Possible values for haptic feedback: Haptic Description success Indicates that a task or action has completed. warning Indicates that a task or action has produced a warning of some kind. failure Indicates that a task or action has failed. light Provides a physical metaphor that complements the visual experience. medium Provides a physical metaphor that complements the visual experience. heavy Provides a physical metaphor that complements the visual experience. selection Indicates that the selection is actively changing.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Haptics"},{"location":"tools/entity-barchart-tool/#animations","text":"The Entity Barchart tool has support for the following forms of animations: Method Support Description colorstops List of state values to set the color for SINGLE bar colorlists Using a colorlist definition animations Operator state based animations with class/style styling","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Animations"},{"location":"tools/entity-icon-tool/","tags":["Tools","Tool","Entity Icon"],"text":"The Entity Icon tool \u00b6 1.0.0 \u00b7 Output The Entity Icon tool displays the Home Assistant Entity Icon. Basic usage \u00b6 The Entity Icon tool needs a center position, size and alignment. Standalone Connected Connected - Icon overruled 1 2 3 4 5 6 7 8 9 10 - type : 'icon' # tooltype is 'icon' position : # Position on (100x100) canvas cx : 50 # cx=50 is center position cy : 50 # cy=50 is center position icon_size : 10 # Relative size of 10 (em) align : center # Align (center, end, start) icon : mdi:dots-vertical # Specify icon in tool styles : icon : fill : var(--primary-text-color) The Entity Icon tool fetches the icon from the entity_index. 1 2 3 4 5 6 7 8 9 10 - type : 'icon' # tooltype is 'icon' position : # Position on (100x100) canvas cx : 50 # cx=50 is center position cy : 50 # cy=50 is center position icon_size : 10 # Relative size of 10 (em) align : center # Align (center, end, start) entity_index : 0 # connect to state of entity 0 styles : icon : fill : var(--primary-text-color) The Entity Icon tool can have it's entity icon overruled by the tool. From example view-sake2.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 - type : icon position : cx : 10 cy : 10 align : center icon_size : 15 entity_index : 0 icon : mdi:dots-vertical # Overwrite icon from entity: use menu icon user_actions : tap_action : haptic : success actions : - action : more-info # display more-info popup when clicked styles : capture : opacity : 0 icon : fill : var(--primary-text-color) Styling \u00b6 The Entity Icon tool has support for the following forms of styling: Method Support Description classes Using SAK or User defined class definitions styles Using inline SVG and CSS styles The Entity Icon tool is composed of a single object: \"icon\" and this is the selector for styling: 1 2 3 4 5 6 7 8 9 10 11 12 13 - type : 'icon' position : cx : 50 cy : 50 icon_size : 10 align : center entity_index : 0 classes : icon : # icon selector <...> styles : icon : # icon selector <...> Populair properties: Property Does what? Example fill Fill color fill: red sets fill to color red color Fill color color: red sets fill to color red opacity Opacity (stroke/fill) opacity: 0.7 sets the opacity of text to 70% Haptics \u00b6 See: https://companion.home-assistant.io/docs/integrations/haptics/ for devices that support haptics The tool supports haptic feedback through user_actions / tap_action definition Action Haptic Description Click haptic Uses the haptic property defined in the user_actions definition of the tool. If not specified, a default of medium is used 1 2 3 4 5 6 7 8 9 10 11 12 13 tools : - type : icon position : cx : 10 cy : 10 align : center icon_size : 15 entity_index : 0 user_actions : tap_action : haptic : success actions : - action : more-info Possible values for haptic feedback: Haptic Description success Indicates that a task or action has completed. warning Indicates that a task or action has produced a warning of some kind. failure Indicates that a task or action has failed. light Provides a physical metaphor that complements the visual experience. medium Provides a physical metaphor that complements the visual experience. heavy Provides a physical metaphor that complements the visual experience. selection Indicates that the selection is actively changing. Animations \u00b6 The Entity Icon tool has support for the following forms of animations: Method Support Description colorstops List of state values to set the color colorlists Using a colorlist definition animations Operator state based animations with class/style styling","title":"Entity Icon"},{"location":"tools/entity-icon-tool/#the-entity-icon-tool","text":"1.0.0 \u00b7 Output The Entity Icon tool displays the Home Assistant Entity Icon.","title":"The Entity Icon tool"},{"location":"tools/entity-icon-tool/#basic-usage","text":"The Entity Icon tool needs a center position, size and alignment. Standalone Connected Connected - Icon overruled 1 2 3 4 5 6 7 8 9 10 - type : 'icon' # tooltype is 'icon' position : # Position on (100x100) canvas cx : 50 # cx=50 is center position cy : 50 # cy=50 is center position icon_size : 10 # Relative size of 10 (em) align : center # Align (center, end, start) icon : mdi:dots-vertical # Specify icon in tool styles : icon : fill : var(--primary-text-color) The Entity Icon tool fetches the icon from the entity_index. 1 2 3 4 5 6 7 8 9 10 - type : 'icon' # tooltype is 'icon' position : # Position on (100x100) canvas cx : 50 # cx=50 is center position cy : 50 # cy=50 is center position icon_size : 10 # Relative size of 10 (em) align : center # Align (center, end, start) entity_index : 0 # connect to state of entity 0 styles : icon : fill : var(--primary-text-color) The Entity Icon tool can have it's entity icon overruled by the tool. From example view-sake2.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 - type : icon position : cx : 10 cy : 10 align : center icon_size : 15 entity_index : 0 icon : mdi:dots-vertical # Overwrite icon from entity: use menu icon user_actions : tap_action : haptic : success actions : - action : more-info # display more-info popup when clicked styles : capture : opacity : 0 icon : fill : var(--primary-text-color)","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Basic usage"},{"location":"tools/entity-icon-tool/#styling","text":"The Entity Icon tool has support for the following forms of styling: Method Support Description classes Using SAK or User defined class definitions styles Using inline SVG and CSS styles The Entity Icon tool is composed of a single object: \"icon\" and this is the selector for styling: 1 2 3 4 5 6 7 8 9 10 11 12 13 - type : 'icon' position : cx : 50 cy : 50 icon_size : 10 align : center entity_index : 0 classes : icon : # icon selector <...> styles : icon : # icon selector <...> Populair properties: Property Does what? Example fill Fill color fill: red sets fill to color red color Fill color color: red sets fill to color red opacity Opacity (stroke/fill) opacity: 0.7 sets the opacity of text to 70%","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Styling"},{"location":"tools/entity-icon-tool/#haptics","text":"See: https://companion.home-assistant.io/docs/integrations/haptics/ for devices that support haptics The tool supports haptic feedback through user_actions / tap_action definition Action Haptic Description Click haptic Uses the haptic property defined in the user_actions definition of the tool. If not specified, a default of medium is used 1 2 3 4 5 6 7 8 9 10 11 12 13 tools : - type : icon position : cx : 10 cy : 10 align : center icon_size : 15 entity_index : 0 user_actions : tap_action : haptic : success actions : - action : more-info Possible values for haptic feedback: Haptic Description success Indicates that a task or action has completed. warning Indicates that a task or action has produced a warning of some kind. failure Indicates that a task or action has failed. light Provides a physical metaphor that complements the visual experience. medium Provides a physical metaphor that complements the visual experience. heavy Provides a physical metaphor that complements the visual experience. selection Indicates that the selection is actively changing.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Haptics"},{"location":"tools/entity-icon-tool/#animations","text":"The Entity Icon tool has support for the following forms of animations: Method Support Description colorstops List of state values to set the color colorlists Using a colorlist definition animations Operator state based animations with class/style styling","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Animations"},{"location":"tools/entity-name-tool/","tags":["Tools","Tool","Entity Name"],"text":"The Entity Name tool \u00b6 1.0.0 \u00b7 Output The Entity Name tool displays the Home Assistant Entity Name text. Outside Humidity Basic usage \u00b6 The Entity Name tool needs a center position and the entity_index from which the name text is used. Connected 1 2 3 4 5 6 7 8 - type : 'name' # tooltype is 'name' position : # Position on (100x100) canvas cx : 50 # cx=50 is center position cy : 50 # cy=50 is center position entity_index : 0 # connect to state of entity 0 styles : name : font-size : 12em # set font size to 12em Always use a relative font-size: it fits well with the relative sizes used by SAK Unless you need a fixed size in pixels... Styling \u00b6 The Entity Name tool has support for the following forms of styling: Method Support Description classes Using SAK or User defined class definitions styles Using inline SVG and CSS styles The Entity Name tool is composed of a single object: \"text\" and this is the selector for styling: 1 2 3 4 5 6 7 8 9 10 11 - type : 'name' position : cx : 50 cy : 50 entity_index : 0 # connect to entity 0 classes : name : # name selector <...> styles : name : # name selector <...> Populair properties: Property Does what? Example font-size Font size font-size: 12em sets RELATIVE font size text-anchor Anchor of text text-anchor: start or middle , or end fill Fill color fill: red sets fill to color red opacity Opacity (stroke/fill) opacity: 0.7 sets the opacity of text to 70% Haptics \u00b6 See: https://companion.home-assistant.io/docs/integrations/haptics/ for devices that support haptics The tool supports haptic feedback through user_actions / tap_action definition Action Haptic Description Click haptic Uses the haptic property defined in the user_actions definition of the tool. If not specified, a default of medium is used 1 2 3 4 5 6 7 8 9 10 11 12 13 tools : - type : icon position : cx : 10 cy : 10 align : center icon_size : 15 entity_index : 0 user_actions : tap_action : haptic : success actions : - action : more-info Possible values for haptic feedback: Haptic Description success Indicates that a task or action has completed. warning Indicates that a task or action has produced a warning of some kind. failure Indicates that a task or action has failed. light Provides a physical metaphor that complements the visual experience. medium Provides a physical metaphor that complements the visual experience. heavy Provides a physical metaphor that complements the visual experience. selection Indicates that the selection is actively changing. Animations \u00b6 The Entity Name tool has support for the following forms of animations: Method Support Description colorstops List of state values to set the color colorlists Using a colorlist definition animations Operator state based animations with class/style styling","title":"Entity Name"},{"location":"tools/entity-name-tool/#the-entity-name-tool","text":"1.0.0 \u00b7 Output The Entity Name tool displays the Home Assistant Entity Name text. Outside Humidity","title":"The Entity Name tool"},{"location":"tools/entity-name-tool/#basic-usage","text":"The Entity Name tool needs a center position and the entity_index from which the name text is used. Connected 1 2 3 4 5 6 7 8 - type : 'name' # tooltype is 'name' position : # Position on (100x100) canvas cx : 50 # cx=50 is center position cy : 50 # cy=50 is center position entity_index : 0 # connect to state of entity 0 styles : name : font-size : 12em # set font size to 12em Always use a relative font-size: it fits well with the relative sizes used by SAK Unless you need a fixed size in pixels...","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Basic usage"},{"location":"tools/entity-name-tool/#styling","text":"The Entity Name tool has support for the following forms of styling: Method Support Description classes Using SAK or User defined class definitions styles Using inline SVG and CSS styles The Entity Name tool is composed of a single object: \"text\" and this is the selector for styling: 1 2 3 4 5 6 7 8 9 10 11 - type : 'name' position : cx : 50 cy : 50 entity_index : 0 # connect to entity 0 classes : name : # name selector <...> styles : name : # name selector <...> Populair properties: Property Does what? Example font-size Font size font-size: 12em sets RELATIVE font size text-anchor Anchor of text text-anchor: start or middle , or end fill Fill color fill: red sets fill to color red opacity Opacity (stroke/fill) opacity: 0.7 sets the opacity of text to 70%","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Styling"},{"location":"tools/entity-name-tool/#haptics","text":"See: https://companion.home-assistant.io/docs/integrations/haptics/ for devices that support haptics The tool supports haptic feedback through user_actions / tap_action definition Action Haptic Description Click haptic Uses the haptic property defined in the user_actions definition of the tool. If not specified, a default of medium is used 1 2 3 4 5 6 7 8 9 10 11 12 13 tools : - type : icon position : cx : 10 cy : 10 align : center icon_size : 15 entity_index : 0 user_actions : tap_action : haptic : success actions : - action : more-info Possible values for haptic feedback: Haptic Description success Indicates that a task or action has completed. warning Indicates that a task or action has produced a warning of some kind. failure Indicates that a task or action has failed. light Provides a physical metaphor that complements the visual experience. medium Provides a physical metaphor that complements the visual experience. heavy Provides a physical metaphor that complements the visual experience. selection Indicates that the selection is actively changing.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Haptics"},{"location":"tools/entity-name-tool/#animations","text":"The Entity Name tool has support for the following forms of animations: Method Support Description colorstops List of state values to set the color colorlists Using a colorlist definition animations Operator state based animations with class/style styling","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Animations"},{"location":"tools/entity-state-tool/","tags":["Tools","Tool","Entity State"],"text":"The Entity State tool \u00b6 1.0.0 \u00b7 Output The Entity State tool displays the Home Assistant Entity State value and unit of measurement. 88 % 88 % 88 % 88 % Basic usage \u00b6 The Entity State tool needs a center position and the entity_index from which the state value is used. Connected 1 2 3 4 5 6 7 8 9 10 - type : 'state' # tooltype is 'state' position : # Position on (100x100) canvas cx : 50 # cx=50 is center position cy : 50 # cy=50 is center position entity_index : 0 # connect to state of entity 0 styles : state : font-size : 6em uom : opacity : 0.8 Advanced usage \u00b6 The unit of measurement can be placed at the end (default), above (top), under (bottom) or not (none) alongside the state value. Connected 1 2 3 4 5 6 7 8 9 10 11 12 - type : 'state' # tooltype is 'state' position : cx : 50 cy : 50 entity_index : 0 show : uom : bottom # default = end. Other top/bottom/none styles : state : font-size : 6em uom : opacity : 0.8 State, Attribute, Attribute lists and Secondary Info \u00b6 The state tool can do more than just display the state value of an entity. An attribute, or attribute from an attribute list and secondary info can also be used by the state tool. Displaying attributes \u00b6 Nothing special, but of course attributes can be used for displaying the state of an entity. views/view-sake8.yaml 1 2 3 4 5 6 7 8 entities : - entity : weather.tha_moon attribute : temperature decimals : 1 unit : '\u00b0C' icon : mdi:thermometer area : 'Tha Moon' name : 'Temperature' Displaying attributes from attribute list \u00b6 In some cases, attributes are a list. This applies to the 5 day weather forecast for instance. By indexing the array, you can get the right attribute you want. views/view-sake1.yaml 1 2 3 4 5 entities : - entity : weather.zoefdehaas attribute : forecast[0].temperature decimals : 1 unit : '\u00b0C' Displaying secondary info \u00b6 Experimental Any entity can have secondary info. There is experimental support for some of these attributes and formatting. views/view-sake8.yaml 1 2 3 4 entities : - entity : weather.tha_moon secondary_info : last_updated # last_updated, last_changed format : relative # relative, date, time, datetime Styling \u00b6 The Entity State tool has support for the following forms of styling: Method Support Description classes Using SAK or User defined class definitions styles Using inline SVG and CSS styles The Entity State tool is composed of a two objects: \"state\" and \"uom\" as the selectors for styling: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 - type : 'state' position : cx : 50 cy : 50 entity_index : 0 classes : state : # state value selector <...> uom : # state uom selector <...> styles : state : # state value selector <...> uom : # state uom selector <...> Populair properties: Property Does what? Example font-size Font size font-size: 12em sets RELATIVE font size text-anchor Anchor of text text-anchor: start or middle , or end fill Fill color fill: red sets fill to color red opacity Opacity (stroke/fill) opacity: 0.7 sets the opacity of text to 70% Haptics \u00b6 See: https://companion.home-assistant.io/docs/integrations/haptics/ for devices that support haptics The tool supports haptic feedback through user_actions / tap_action definition Action Haptic Description Click haptic Uses the haptic property defined in the user_actions definition of the tool. If not specified, a default of medium is used 1 2 3 4 5 6 7 8 9 10 11 12 13 tools : - type : icon position : cx : 10 cy : 10 align : center icon_size : 15 entity_index : 0 user_actions : tap_action : haptic : success actions : - action : more-info Possible values for haptic feedback: Haptic Description success Indicates that a task or action has completed. warning Indicates that a task or action has produced a warning of some kind. failure Indicates that a task or action has failed. light Provides a physical metaphor that complements the visual experience. medium Provides a physical metaphor that complements the visual experience. heavy Provides a physical metaphor that complements the visual experience. selection Indicates that the selection is actively changing. Animations \u00b6 The Entity State tool has support for the following forms of animations: Method Support Description colorstops List of state values to set the color colorlists Using a colorlist definition animations Operator state based animations with class/style styling","title":"Entity State"},{"location":"tools/entity-state-tool/#the-entity-state-tool","text":"1.0.0 \u00b7 Output The Entity State tool displays the Home Assistant Entity State value and unit of measurement. 88 % 88 % 88 % 88 %","title":"The Entity State tool"},{"location":"tools/entity-state-tool/#basic-usage","text":"The Entity State tool needs a center position and the entity_index from which the state value is used. Connected 1 2 3 4 5 6 7 8 9 10 - type : 'state' # tooltype is 'state' position : # Position on (100x100) canvas cx : 50 # cx=50 is center position cy : 50 # cy=50 is center position entity_index : 0 # connect to state of entity 0 styles : state : font-size : 6em uom : opacity : 0.8","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Basic usage"},{"location":"tools/entity-state-tool/#advanced-usage","text":"The unit of measurement can be placed at the end (default), above (top), under (bottom) or not (none) alongside the state value. Connected 1 2 3 4 5 6 7 8 9 10 11 12 - type : 'state' # tooltype is 'state' position : cx : 50 cy : 50 entity_index : 0 show : uom : bottom # default = end. Other top/bottom/none styles : state : font-size : 6em uom : opacity : 0.8","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Advanced usage"},{"location":"tools/entity-state-tool/#state-attribute-attribute-lists-and-secondary-info","text":"The state tool can do more than just display the state value of an entity. An attribute, or attribute from an attribute list and secondary info can also be used by the state tool.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n State, Attribute, Attribute lists and Secondary Info"},{"location":"tools/entity-state-tool/#displaying-attributes","text":"Nothing special, but of course attributes can be used for displaying the state of an entity. views/view-sake8.yaml 1 2 3 4 5 6 7 8 entities : - entity : weather.tha_moon attribute : temperature decimals : 1 unit : '\u00b0C' icon : mdi:thermometer area : 'Tha Moon' name : 'Temperature'","title":"Displaying attributes"},{"location":"tools/entity-state-tool/#displaying-attributes-from-attribute-list","text":"In some cases, attributes are a list. This applies to the 5 day weather forecast for instance. By indexing the array, you can get the right attribute you want. views/view-sake1.yaml 1 2 3 4 5 entities : - entity : weather.zoefdehaas attribute : forecast[0].temperature decimals : 1 unit : '\u00b0C'","title":"Displaying attributes from attribute list"},{"location":"tools/entity-state-tool/#displaying-secondary-info","text":"Experimental Any entity can have secondary info. There is experimental support for some of these attributes and formatting. views/view-sake8.yaml 1 2 3 4 entities : - entity : weather.tha_moon secondary_info : last_updated # last_updated, last_changed format : relative # relative, date, time, datetime","title":"Displaying secondary info"},{"location":"tools/entity-state-tool/#styling","text":"The Entity State tool has support for the following forms of styling: Method Support Description classes Using SAK or User defined class definitions styles Using inline SVG and CSS styles The Entity State tool is composed of a two objects: \"state\" and \"uom\" as the selectors for styling: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 - type : 'state' position : cx : 50 cy : 50 entity_index : 0 classes : state : # state value selector <...> uom : # state uom selector <...> styles : state : # state value selector <...> uom : # state uom selector <...> Populair properties: Property Does what? Example font-size Font size font-size: 12em sets RELATIVE font size text-anchor Anchor of text text-anchor: start or middle , or end fill Fill color fill: red sets fill to color red opacity Opacity (stroke/fill) opacity: 0.7 sets the opacity of text to 70%","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Styling"},{"location":"tools/entity-state-tool/#haptics","text":"See: https://companion.home-assistant.io/docs/integrations/haptics/ for devices that support haptics The tool supports haptic feedback through user_actions / tap_action definition Action Haptic Description Click haptic Uses the haptic property defined in the user_actions definition of the tool. If not specified, a default of medium is used 1 2 3 4 5 6 7 8 9 10 11 12 13 tools : - type : icon position : cx : 10 cy : 10 align : center icon_size : 15 entity_index : 0 user_actions : tap_action : haptic : success actions : - action : more-info Possible values for haptic feedback: Haptic Description success Indicates that a task or action has completed. warning Indicates that a task or action has produced a warning of some kind. failure Indicates that a task or action has failed. light Provides a physical metaphor that complements the visual experience. medium Provides a physical metaphor that complements the visual experience. heavy Provides a physical metaphor that complements the visual experience. selection Indicates that the selection is actively changing.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Haptics"},{"location":"tools/entity-state-tool/#animations","text":"The Entity State tool has support for the following forms of animations: Method Support Description colorstops List of state values to set the color colorlists Using a colorlist definition animations Operator state based animations with class/style styling","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Animations"},{"location":"tools/horseshoe-tool/","tags":["Tools","Tool","Horseshoe"],"text":"The Horse Shoe tool \u00b6 1.0.0 \u00b7 Output TBD! Basic usage \u00b6 Standalone Connected 1 - type : 'horseshoe' # tooltype is 'horseshoe' 1 2 - type : 'horseshoe' # tooltype is 'horseshoe' entity_index : 0 # connect to state of entity 0 Styling \u00b6 The Horse Shoe tool has support for the following forms of styling: Method Support Description classes Using SAK or User defined class definitions styles Using inline SVG and CSS styles The Horse Shoe is ... 1 - type : 'horseshoe' Populair properties: Property Does what? Example fill Fill color fill: red sets fill to color red stroke-width Stroke width stroke-width: 2em sets width to relative width of 2em stroke Stroke color stroke: blue sets stroke to blue opacity Opacity (stroke/fill) opacity: 0.7 sets the opacity of rect to 70% fill-opacity Opacity for fill fill-opacity: 0.5 sets the fill opacity to 50% stroke-opacity Opacity for stroke stroke-opacity: 0.5 sets the stroke opacity to 50% Haptics \u00b6 See: https://companion.home-assistant.io/docs/integrations/haptics/ for devices that support haptics The tool supports haptic feedback through user_actions / tap_action definition Action Haptic Description Click haptic Uses the haptic property defined in the user_actions definition of the tool. If not specified, a default of medium is used 1 2 3 4 5 6 7 8 9 10 11 12 13 tools : - type : icon position : cx : 10 cy : 10 align : center icon_size : 15 entity_index : 0 user_actions : tap_action : haptic : success actions : - action : more-info Possible values for haptic feedback: Haptic Description success Indicates that a task or action has completed. warning Indicates that a task or action has produced a warning of some kind. failure Indicates that a task or action has failed. light Provides a physical metaphor that complements the visual experience. medium Provides a physical metaphor that complements the visual experience. heavy Provides a physical metaphor that complements the visual experience. selection Indicates that the selection is actively changing. Animations \u00b6 The Horse Shoe tool has support for the following forms of animations: Method Support Description colorstops List of state values to set the color colorlists Using a colorlist definition animations Operator state based animations with class/style styling The use of animations require the tool to be connected to an entity Examples \u00b6 Detailed specification \u00b6","title":"Horse Shoe"},{"location":"tools/horseshoe-tool/#the-horse-shoe-tool","text":"1.0.0 \u00b7 Output TBD!","title":"The Horse Shoe tool"},{"location":"tools/horseshoe-tool/#basic-usage","text":"Standalone Connected 1 - type : 'horseshoe' # tooltype is 'horseshoe' 1 2 - type : 'horseshoe' # tooltype is 'horseshoe' entity_index : 0 # connect to state of entity 0","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Basic usage"},{"location":"tools/horseshoe-tool/#styling","text":"The Horse Shoe tool has support for the following forms of styling: Method Support Description classes Using SAK or User defined class definitions styles Using inline SVG and CSS styles The Horse Shoe is ... 1 - type : 'horseshoe' Populair properties: Property Does what? Example fill Fill color fill: red sets fill to color red stroke-width Stroke width stroke-width: 2em sets width to relative width of 2em stroke Stroke color stroke: blue sets stroke to blue opacity Opacity (stroke/fill) opacity: 0.7 sets the opacity of rect to 70% fill-opacity Opacity for fill fill-opacity: 0.5 sets the fill opacity to 50% stroke-opacity Opacity for stroke stroke-opacity: 0.5 sets the stroke opacity to 50%","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Styling"},{"location":"tools/horseshoe-tool/#haptics","text":"See: https://companion.home-assistant.io/docs/integrations/haptics/ for devices that support haptics The tool supports haptic feedback through user_actions / tap_action definition Action Haptic Description Click haptic Uses the haptic property defined in the user_actions definition of the tool. If not specified, a default of medium is used 1 2 3 4 5 6 7 8 9 10 11 12 13 tools : - type : icon position : cx : 10 cy : 10 align : center icon_size : 15 entity_index : 0 user_actions : tap_action : haptic : success actions : - action : more-info Possible values for haptic feedback: Haptic Description success Indicates that a task or action has completed. warning Indicates that a task or action has produced a warning of some kind. failure Indicates that a task or action has failed. light Provides a physical metaphor that complements the visual experience. medium Provides a physical metaphor that complements the visual experience. heavy Provides a physical metaphor that complements the visual experience. selection Indicates that the selection is actively changing.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Haptics"},{"location":"tools/horseshoe-tool/#animations","text":"The Horse Shoe tool has support for the following forms of animations: Method Support Description colorstops List of state values to set the color colorlists Using a colorlist definition animations Operator state based animations with class/style styling The use of animations require the tool to be connected to an entity","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Animations"},{"location":"tools/horseshoe-tool/#examples","text":"","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Examples"},{"location":"tools/horseshoe-tool/#detailed-specification","text":"","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Detailed specification"},{"location":"tools/line-tool/","tags":["Tools","Tool","Line"],"text":"The Line tool \u00b6 1.0.0 \u00b7 Output The Line tool is based on the SVG basic <line> element shape Basic usage \u00b6 The Line tool needs a center position and a length, or start and endpoints. Standalone Connected Horizontal / Vertical config 1 2 3 4 5 6 7 8 9 - type : 'line' # tooltype is 'line' position : # Position on (100x100) canvas orientation : 'vertical' # Vertical, horizontal cx : 50 # cx=50 is center position cy : 50 # cy=50 is center position length : 25 # length of line. style : line : stroke-width : 2 # Set stroke width using CSS attribute FromTo config 1 2 3 4 5 6 7 8 9 10 - type : 'line' # tooltype is 'line' position : # Position on (100x100) canvas orientation : 'fromto' # fromto (x1,y1,x2,y2) x1 : 0 # from: upperleft corner y1 : 0 x2 : 100 # to: lowerright corner y2 : 100 style : line : stroke-width : 2 # Set stroke width using CSS attribute Horizontal / Vertical config 1 2 3 4 5 6 7 8 9 10 - type : 'line' # tooltype is 'line' position : # Position on (100x100) canvas orientation : 'vertical' # Vertical, horizontal or fromto cx : 50 # cx=50 is center position cy : 50 # cy=50 is center position length : 25 # length of line. entity_index : 0 # connect to state of entity 0 style : line : stroke-width : 2 # Set stroke width using CSS attribute FromTo config 1 2 3 4 5 6 7 8 9 10 11 - type : 'line' # tooltype is 'line' position : # Position on (100x100) canvas orientation : 'fromto' # fromto (x1,y1,x2,y2) x1 : 0 # from: upperleft corner y1 : 0 x2 : 100 # to: lowerright corner y2 : 100 entity_index : 0 # connect to state of entity 0 style : line : stroke-width : 2 # Set stroke width using CSS attribute Styling \u00b6 The Line tool has support for the following forms of styling: Method Support Description classes Using SAK or User defined class definitions styles Using inline SVG and CSS styles The Line tool is composed of a single object: \"line\" and this is the selector for styling: 1 2 3 4 5 6 7 8 9 10 11 12 - type : 'line' position : orientation : 'vertical' cx : 50 cy : 50 length : 25 classes : line : # Line selector <...> styles : line : # Line selector <...> Populair properties: Property Does what? Example stroke-width Line width stroke-width: 2em sets width to relative width of 2em stroke Line color stroke: red opacity Line opacity opacity: 0.7 sets the opacity of the stroke to 70% Reference: https://developer.mozilla.org/en-US/docs/Web/SVG/Element/line Haptics \u00b6 See: https://companion.home-assistant.io/docs/integrations/haptics/ for devices that support haptics The tool supports haptic feedback through user_actions / tap_action definition Action Haptic Description Click haptic Uses the haptic property defined in the user_actions definition of the tool. If not specified, a default of medium is used 1 2 3 4 5 6 7 8 9 10 11 12 13 tools : - type : icon position : cx : 10 cy : 10 align : center icon_size : 15 entity_index : 0 user_actions : tap_action : haptic : success actions : - action : more-info Possible values for haptic feedback: Haptic Description success Indicates that a task or action has completed. warning Indicates that a task or action has produced a warning of some kind. failure Indicates that a task or action has failed. light Provides a physical metaphor that complements the visual experience. medium Provides a physical metaphor that complements the visual experience. heavy Provides a physical metaphor that complements the visual experience. selection Indicates that the selection is actively changing. Animations \u00b6 The Line tool has support for the following forms of animations: Method Support Description colorstops List of state values to set the color colorlists Using a colorlist definition animations Operator state based animations with class/style styling The use of animations require the tool to be connected to an entity","title":"Line"},{"location":"tools/line-tool/#the-line-tool","text":"1.0.0 \u00b7 Output The Line tool is based on the SVG basic <line> element shape","title":"The Line tool"},{"location":"tools/line-tool/#basic-usage","text":"The Line tool needs a center position and a length, or start and endpoints. Standalone Connected Horizontal / Vertical config 1 2 3 4 5 6 7 8 9 - type : 'line' # tooltype is 'line' position : # Position on (100x100) canvas orientation : 'vertical' # Vertical, horizontal cx : 50 # cx=50 is center position cy : 50 # cy=50 is center position length : 25 # length of line. style : line : stroke-width : 2 # Set stroke width using CSS attribute FromTo config 1 2 3 4 5 6 7 8 9 10 - type : 'line' # tooltype is 'line' position : # Position on (100x100) canvas orientation : 'fromto' # fromto (x1,y1,x2,y2) x1 : 0 # from: upperleft corner y1 : 0 x2 : 100 # to: lowerright corner y2 : 100 style : line : stroke-width : 2 # Set stroke width using CSS attribute Horizontal / Vertical config 1 2 3 4 5 6 7 8 9 10 - type : 'line' # tooltype is 'line' position : # Position on (100x100) canvas orientation : 'vertical' # Vertical, horizontal or fromto cx : 50 # cx=50 is center position cy : 50 # cy=50 is center position length : 25 # length of line. entity_index : 0 # connect to state of entity 0 style : line : stroke-width : 2 # Set stroke width using CSS attribute FromTo config 1 2 3 4 5 6 7 8 9 10 11 - type : 'line' # tooltype is 'line' position : # Position on (100x100) canvas orientation : 'fromto' # fromto (x1,y1,x2,y2) x1 : 0 # from: upperleft corner y1 : 0 x2 : 100 # to: lowerright corner y2 : 100 entity_index : 0 # connect to state of entity 0 style : line : stroke-width : 2 # Set stroke width using CSS attribute","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Basic usage"},{"location":"tools/line-tool/#styling","text":"The Line tool has support for the following forms of styling: Method Support Description classes Using SAK or User defined class definitions styles Using inline SVG and CSS styles The Line tool is composed of a single object: \"line\" and this is the selector for styling: 1 2 3 4 5 6 7 8 9 10 11 12 - type : 'line' position : orientation : 'vertical' cx : 50 cy : 50 length : 25 classes : line : # Line selector <...> styles : line : # Line selector <...> Populair properties: Property Does what? Example stroke-width Line width stroke-width: 2em sets width to relative width of 2em stroke Line color stroke: red opacity Line opacity opacity: 0.7 sets the opacity of the stroke to 70% Reference: https://developer.mozilla.org/en-US/docs/Web/SVG/Element/line","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Styling"},{"location":"tools/line-tool/#haptics","text":"See: https://companion.home-assistant.io/docs/integrations/haptics/ for devices that support haptics The tool supports haptic feedback through user_actions / tap_action definition Action Haptic Description Click haptic Uses the haptic property defined in the user_actions definition of the tool. If not specified, a default of medium is used 1 2 3 4 5 6 7 8 9 10 11 12 13 tools : - type : icon position : cx : 10 cy : 10 align : center icon_size : 15 entity_index : 0 user_actions : tap_action : haptic : success actions : - action : more-info Possible values for haptic feedback: Haptic Description success Indicates that a task or action has completed. warning Indicates that a task or action has produced a warning of some kind. failure Indicates that a task or action has failed. light Provides a physical metaphor that complements the visual experience. medium Provides a physical metaphor that complements the visual experience. heavy Provides a physical metaphor that complements the visual experience. selection Indicates that the selection is actively changing.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Haptics"},{"location":"tools/line-tool/#animations","text":"The Line tool has support for the following forms of animations: Method Support Description colorstops List of state values to set the color colorlists Using a colorlist definition animations Operator state based animations with class/style styling The use of animations require the tool to be connected to an entity","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Animations"},{"location":"tools/rectangle-ex-tool/","tags":["Tools","Tool","RectangleEx"],"text":"The Rectangle Ex(tended) tool \u00b6 1.0.0 \u00b7 Output The RectEx tool is based on the SVG basic <path> element shape. The RectEx tool lets you define the radius for each corner, where the Rectangle tool lets you specify a single radius for all corners. The rectex might replace the rectangle tool in the future... Basic usage \u00b6 The RectEx tool needs a center position, height, and width. You can specify a corner radius for each corner, or pair of corners. Standalone Connected 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 - type : 'rectex' # tooltype is 'rectex' position : # Position on (100x100) canvas cx : 50 # cx=50 is center position cy : 50 # cy=50 is center position height : 75 # height of 75 width : 100 # width of 100 radius : all : 0 # corner radius: square # per side options: top : 2 left : 2 right : 2 bottom : 2 # per corner options: top_left : 2 top_right : 2 bottom_left : 2 bottom_right : 2 styles : rectex : stroke-width : 2 # width of stroke. 0 = no stroke. 1 2 3 4 5 6 7 8 9 10 11 12 - type : 'rectex' # tooltype is 'rectex' position : # Position on (100x100) canvas cx : 50 # cx=50 is center position cy : 50 # cy=50 is center position height : 75 # height of 75 width : 100 # width of 100 radius : all : 0 # corner radius: square entity_index : 0 # connect to state of entity 0 styles : rectex : stroke-width : 2 # width of stroke. 0 = no stroke. Styling \u00b6 The RectEx tool has support for the following forms of styling: Method Support Description classes Using SAK or User defined class definitions styles Using inline SVG and CSS styles The RectEx tool is composed of a single object: \"rectex\" and this is the selector for styling: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 - type : 'rectex' position : cx : 50 cy : 50 height : 75 # height of 75 width : 100 # width of 100 radius : all : 0 # corner radius: square classes : rectex : # RectEx selector <...> styles : rectex : # RectEx selector <...> Populair properties: Property Does what? Example fill Fill color fill: red sets fill to color red stroke-width Stroke width stroke-width: 2em sets width to relative width of 2em stroke Stroke color stroke: blue sets stroke to blue opacity Opacity (stroke/fill) opacity: 0.7 sets the opacity of rect to 70% fill-opacity Opacity for fill fill-opacity: 0.5 sets the fill opacity to 50% stroke-opacity Opacity for stroke stroke-opacity: 0.5 sets the stroke opacity to 50% Haptics \u00b6 See: https://companion.home-assistant.io/docs/integrations/haptics/ for devices that support haptics The tool supports haptic feedback through user_actions / tap_action definition Action Haptic Description Click haptic Uses the haptic property defined in the user_actions definition of the tool. If not specified, a default of medium is used 1 2 3 4 5 6 7 8 9 10 11 12 13 tools : - type : icon position : cx : 10 cy : 10 align : center icon_size : 15 entity_index : 0 user_actions : tap_action : haptic : success actions : - action : more-info Possible values for haptic feedback: Haptic Description success Indicates that a task or action has completed. warning Indicates that a task or action has produced a warning of some kind. failure Indicates that a task or action has failed. light Provides a physical metaphor that complements the visual experience. medium Provides a physical metaphor that complements the visual experience. heavy Provides a physical metaphor that complements the visual experience. selection Indicates that the selection is actively changing. Animations \u00b6 The RectEx tool has support for the following forms of animations: Method Support Description colorstops List of state values to set the color colorlists Using a colorlist definition animations Operator state based animations with class/style styling The use of animations require the tool to be connected to an entity","title":"RectangleEx"},{"location":"tools/rectangle-ex-tool/#the-rectangle-extended-tool","text":"1.0.0 \u00b7 Output The RectEx tool is based on the SVG basic <path> element shape. The RectEx tool lets you define the radius for each corner, where the Rectangle tool lets you specify a single radius for all corners. The rectex might replace the rectangle tool in the future...","title":"The Rectangle Ex(tended) tool"},{"location":"tools/rectangle-ex-tool/#basic-usage","text":"The RectEx tool needs a center position, height, and width. You can specify a corner radius for each corner, or pair of corners. Standalone Connected 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 - type : 'rectex' # tooltype is 'rectex' position : # Position on (100x100) canvas cx : 50 # cx=50 is center position cy : 50 # cy=50 is center position height : 75 # height of 75 width : 100 # width of 100 radius : all : 0 # corner radius: square # per side options: top : 2 left : 2 right : 2 bottom : 2 # per corner options: top_left : 2 top_right : 2 bottom_left : 2 bottom_right : 2 styles : rectex : stroke-width : 2 # width of stroke. 0 = no stroke. 1 2 3 4 5 6 7 8 9 10 11 12 - type : 'rectex' # tooltype is 'rectex' position : # Position on (100x100) canvas cx : 50 # cx=50 is center position cy : 50 # cy=50 is center position height : 75 # height of 75 width : 100 # width of 100 radius : all : 0 # corner radius: square entity_index : 0 # connect to state of entity 0 styles : rectex : stroke-width : 2 # width of stroke. 0 = no stroke.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Basic usage"},{"location":"tools/rectangle-ex-tool/#styling","text":"The RectEx tool has support for the following forms of styling: Method Support Description classes Using SAK or User defined class definitions styles Using inline SVG and CSS styles The RectEx tool is composed of a single object: \"rectex\" and this is the selector for styling: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 - type : 'rectex' position : cx : 50 cy : 50 height : 75 # height of 75 width : 100 # width of 100 radius : all : 0 # corner radius: square classes : rectex : # RectEx selector <...> styles : rectex : # RectEx selector <...> Populair properties: Property Does what? Example fill Fill color fill: red sets fill to color red stroke-width Stroke width stroke-width: 2em sets width to relative width of 2em stroke Stroke color stroke: blue sets stroke to blue opacity Opacity (stroke/fill) opacity: 0.7 sets the opacity of rect to 70% fill-opacity Opacity for fill fill-opacity: 0.5 sets the fill opacity to 50% stroke-opacity Opacity for stroke stroke-opacity: 0.5 sets the stroke opacity to 50%","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Styling"},{"location":"tools/rectangle-ex-tool/#haptics","text":"See: https://companion.home-assistant.io/docs/integrations/haptics/ for devices that support haptics The tool supports haptic feedback through user_actions / tap_action definition Action Haptic Description Click haptic Uses the haptic property defined in the user_actions definition of the tool. If not specified, a default of medium is used 1 2 3 4 5 6 7 8 9 10 11 12 13 tools : - type : icon position : cx : 10 cy : 10 align : center icon_size : 15 entity_index : 0 user_actions : tap_action : haptic : success actions : - action : more-info Possible values for haptic feedback: Haptic Description success Indicates that a task or action has completed. warning Indicates that a task or action has produced a warning of some kind. failure Indicates that a task or action has failed. light Provides a physical metaphor that complements the visual experience. medium Provides a physical metaphor that complements the visual experience. heavy Provides a physical metaphor that complements the visual experience. selection Indicates that the selection is actively changing.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Haptics"},{"location":"tools/rectangle-ex-tool/#animations","text":"The RectEx tool has support for the following forms of animations: Method Support Description colorstops List of state values to set the color colorlists Using a colorlist definition animations Operator state based animations with class/style styling The use of animations require the tool to be connected to an entity","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Animations"},{"location":"tools/rectangle-tool/","tags":["Tools","Tool","Rectangle"],"text":"The Rectangle tool \u00b6 1.0.0 \u00b7 Output The Rectangle tool is based on the SVG basic <rect> element shape. Basic usage \u00b6 The Rectangle tool needs a center position, height, width, and optional corner radius. Standalone Connected 1 2 3 4 5 6 7 8 9 10 - type : 'rectangle' # tooltype is 'rectangle' position : # Position on (100x100) canvas cx : 50 # cx=50 is center position cy : 50 # cy=50 is center position height : 75 # height of 75 width : 100 # width of 100 rx : 0 # corner radius: square styles : rectangle : stroke-width : 2 # width of stroke. 0 = no stroke. 1 2 3 4 5 6 7 8 9 10 11 - type : 'rectangle' # tooltype is 'rectangle' position : # Position on (100x100) canvas cx : 50 # cx=50 is center position cy : 50 # cy=50 is center position height : 75 # height of 75 width : 100 # width of 100 rx : 0 # corner radius: square entity_index : 0 # connect to state of entity 0 styles : rectangle : stroke-width : 2 # width of stroke. 0 = no stroke. Styling \u00b6 The Rectangle tool has support for the following forms of styling: Method Support Description classes Using SAK or User defined class definitions styles Using inline SVG and CSS styles The Rectangle tool is composed of a single object: \"rectangle\" and this is the selector for styling: 1 2 3 4 5 6 7 8 9 10 11 12 13 - type : 'rectangle' position : cx : 50 cy : 50 height : 75 # height of 75 width : 100 # width of 100 rx : 0 # corner radius: square classes : rectangle : # Rectangle selector <...> styles : rectangle : # Rectangle selector <...> Populair properties: Property Does what? Example fill Fill color fill: red sets fill to color red stroke-width Stroke width stroke-width: 2em sets width to relative width of 2em stroke Stroke color stroke: blue sets stroke to blue opacity Opacity (stroke/fill) opacity: 0.7 sets the opacity of rect to 70% fill-opacity Opacity for fill fill-opacity: 0.5 sets the fill opacity to 50% stroke-opacity Opacity for stroke stroke-opacity: 0.5 sets the stroke opacity to 50% Reference: https://developer.mozilla.org/en-US/docs/Web/SVG/Element/rect Haptics \u00b6 See: https://companion.home-assistant.io/docs/integrations/haptics/ for devices that support haptics The tool supports haptic feedback through user_actions / tap_action definition Action Haptic Description Click haptic Uses the haptic property defined in the user_actions definition of the tool. If not specified, a default of medium is used 1 2 3 4 5 6 7 8 9 10 11 12 13 tools : - type : icon position : cx : 10 cy : 10 align : center icon_size : 15 entity_index : 0 user_actions : tap_action : haptic : success actions : - action : more-info Possible values for haptic feedback: Haptic Description success Indicates that a task or action has completed. warning Indicates that a task or action has produced a warning of some kind. failure Indicates that a task or action has failed. light Provides a physical metaphor that complements the visual experience. medium Provides a physical metaphor that complements the visual experience. heavy Provides a physical metaphor that complements the visual experience. selection Indicates that the selection is actively changing. Animations \u00b6 The Rectangle tool has support for the following forms of animations: Method Support Description colorstops List of state values to set the color colorlists Using a colorlist definition animations Operator state based animations with class/style styling The use of animations require the tool to be connected to an entity","title":"Rectangle"},{"location":"tools/rectangle-tool/#the-rectangle-tool","text":"1.0.0 \u00b7 Output The Rectangle tool is based on the SVG basic <rect> element shape.","title":"The Rectangle tool"},{"location":"tools/rectangle-tool/#basic-usage","text":"The Rectangle tool needs a center position, height, width, and optional corner radius. Standalone Connected 1 2 3 4 5 6 7 8 9 10 - type : 'rectangle' # tooltype is 'rectangle' position : # Position on (100x100) canvas cx : 50 # cx=50 is center position cy : 50 # cy=50 is center position height : 75 # height of 75 width : 100 # width of 100 rx : 0 # corner radius: square styles : rectangle : stroke-width : 2 # width of stroke. 0 = no stroke. 1 2 3 4 5 6 7 8 9 10 11 - type : 'rectangle' # tooltype is 'rectangle' position : # Position on (100x100) canvas cx : 50 # cx=50 is center position cy : 50 # cy=50 is center position height : 75 # height of 75 width : 100 # width of 100 rx : 0 # corner radius: square entity_index : 0 # connect to state of entity 0 styles : rectangle : stroke-width : 2 # width of stroke. 0 = no stroke.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Basic usage"},{"location":"tools/rectangle-tool/#styling","text":"The Rectangle tool has support for the following forms of styling: Method Support Description classes Using SAK or User defined class definitions styles Using inline SVG and CSS styles The Rectangle tool is composed of a single object: \"rectangle\" and this is the selector for styling: 1 2 3 4 5 6 7 8 9 10 11 12 13 - type : 'rectangle' position : cx : 50 cy : 50 height : 75 # height of 75 width : 100 # width of 100 rx : 0 # corner radius: square classes : rectangle : # Rectangle selector <...> styles : rectangle : # Rectangle selector <...> Populair properties: Property Does what? Example fill Fill color fill: red sets fill to color red stroke-width Stroke width stroke-width: 2em sets width to relative width of 2em stroke Stroke color stroke: blue sets stroke to blue opacity Opacity (stroke/fill) opacity: 0.7 sets the opacity of rect to 70% fill-opacity Opacity for fill fill-opacity: 0.5 sets the fill opacity to 50% stroke-opacity Opacity for stroke stroke-opacity: 0.5 sets the stroke opacity to 50% Reference: https://developer.mozilla.org/en-US/docs/Web/SVG/Element/rect","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Styling"},{"location":"tools/rectangle-tool/#haptics","text":"See: https://companion.home-assistant.io/docs/integrations/haptics/ for devices that support haptics The tool supports haptic feedback through user_actions / tap_action definition Action Haptic Description Click haptic Uses the haptic property defined in the user_actions definition of the tool. If not specified, a default of medium is used 1 2 3 4 5 6 7 8 9 10 11 12 13 tools : - type : icon position : cx : 10 cy : 10 align : center icon_size : 15 entity_index : 0 user_actions : tap_action : haptic : success actions : - action : more-info Possible values for haptic feedback: Haptic Description success Indicates that a task or action has completed. warning Indicates that a task or action has produced a warning of some kind. failure Indicates that a task or action has failed. light Provides a physical metaphor that complements the visual experience. medium Provides a physical metaphor that complements the visual experience. heavy Provides a physical metaphor that complements the visual experience. selection Indicates that the selection is actively changing.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Haptics"},{"location":"tools/rectangle-tool/#animations","text":"The Rectangle tool has support for the following forms of animations: Method Support Description colorstops List of state values to set the color colorlists Using a colorlist definition animations Operator state based animations with class/style styling The use of animations require the tool to be connected to an entity","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Animations"},{"location":"tools/regular-poly-tool/","tags":["Tools","Tool","Regular Polygon"],"text":"The Regular Polygon tool \u00b6 1.0.0 \u00b7 Output The Regular Polygon tool is a tool build on the Shl\u00e4fli symbol. It can build both regular convex polygons and regular star polygons. They have a mathematical background: p is the number of vertices. They are all distributed evenly on a circle. For q = 1, you connect each point to the next one on the circle (clockwise or counterclockwise, it doesn't matter). For q = 2, you skip the first one and connect to the 2 nd . For q = 3, you skip the first two and connect to the 3 rd . And so on... as long as q < p/2. Basic usage \u00b6 The Regular Poly tool needs a center position, radius, number of sides, the number of sides to skip, and an optional angle offset to rotate the regular polygon to the desired state. Standalone Connected 1 2 3 4 5 6 7 8 9 10 11 - type : 'regpoly' # tooltype is 'regpoly' position : # Position on (100x100) canvas cx : 50 # cx=50 is center position cy : 50 # cy=50 is center position radius : 50 # Radius of the \"circle\" side_count : 6 # The \"p\" value in the Schl\u00e4fli symbol side_skip : 1 # The \"q\" value in the Schl\u00e4fli symbol angle_offset : 0 # Value to rotate the regpoly styles : regpoly : stroke-width : 2 # width of stroke. 0 = no stroke. 1 2 3 4 5 6 7 8 9 10 11 12 - type : 'regpoly' # tooltype is 'regpoly' position : # Position on (100x100) canvas cx : 50 # cx=50 is center position cy : 50 # cy=50 is center position radius : 50 # Radius of the \"circle\" side_count : 6 # The \"p\" value in the Schl\u00e4fli symbol side_skip : 1 # The \"q\" value in the Schl\u00e4fli symbol angle_offset : 0 # Value to rotate the regpoly entity_index : 0 # connect to state of entity 0 styles : regpoly : stroke-width : 2 # width of stroke. 0 = no stroke. Styling \u00b6 The Regular Polygon tool has support for the following forms of styling: Method Support Description classes Using SAK or User defined class definitions styles Using inline SVG and CSS styles The Regular Polygon tool is composed of a single object: \"regpoly\" and this is the selector for styling: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 - type : 'regpoly' position : cx : 50 cy : 50 radius : 50 # Radius of the \"circle\" side_count : 6 # The \"p\" value in the Schl\u00e4fli symbol side_skip : 1 # The \"q\" value in the Schl\u00e4fli symbol angle_offset : 0 # Value to rotate the regpoly classes : regpoly : # RegPoly selector <...> styles : regpoly : # RegPoly selector <...> Populair properties: Property Does what? Example fill Fill color fill: red sets fill to color red stroke-width Stroke width stroke-width: 2em sets width to relative width of 2em stroke Stroke color stroke: blue sets stroke to blue opacity Opacity (stroke/fill) opacity: 0.7 sets the opacity of rect to 70% fill-opacity Opacity for fill fill-opacity: 0.5 sets the fill opacity to 50% stroke-opacity Opacity for stroke stroke-opacity: 0.5 sets the stroke opacity to 50% Haptics \u00b6 See: https://companion.home-assistant.io/docs/integrations/haptics/ for devices that support haptics The tool supports haptic feedback through user_actions / tap_action definition Action Haptic Description Click haptic Uses the haptic property defined in the user_actions definition of the tool. If not specified, a default of medium is used 1 2 3 4 5 6 7 8 9 10 11 12 13 tools : - type : icon position : cx : 10 cy : 10 align : center icon_size : 15 entity_index : 0 user_actions : tap_action : haptic : success actions : - action : more-info Possible values for haptic feedback: Haptic Description success Indicates that a task or action has completed. warning Indicates that a task or action has produced a warning of some kind. failure Indicates that a task or action has failed. light Provides a physical metaphor that complements the visual experience. medium Provides a physical metaphor that complements the visual experience. heavy Provides a physical metaphor that complements the visual experience. selection Indicates that the selection is actively changing. Animations \u00b6 The RegPoly tool has support for the following forms of animations: Method Support Description colorstops List of state values to set the color colorlists Using a colorlist definition animations Operator state based animations with class/style styling The use of animations require the tool to be connected to an entity Examples \u00b6 Below some examples with varying \"p\" (side count) and \"q\" (skip number of points). The fill rule is 'evenodd' in the examples ---------------------------- ---------------------------- ---------------------------- ---------------------------- p: 3, q: 1 p: 5, q: 1 p: 5, q: 2 p: 6, q: 1 p: 6, q: 2 p: 7, q: 1 p: 7, q: 2 p: 7, q: 3 p: 8, q: 1 p: 8, q: 2 p: 8, q: 3 p: 9, q: 1 p: 9, q: 2 p: 9, q: 3 p: 9, q: 4 p: 10, q: 1 p: 10, q: 2 p: 10, q: 3 p: 10, q: 4 p: 11, q: 1 p: 11, q: 2 p: 11, q: 3 p: 11, q: 4 p: 11, q: 5 p: 12, q: 1 p: 12, q: 2 p: 12, q: 3 p: 12, q: 4 p: 12, q: 5 p: 13, q: 1 < p: 13, q: 2 p: 13, q: 3 p: 13, q: 4 p: 13, q: 5 p: 13, q: 6 p: 14, q: 1 p: 14, q: 2 p: 14, q: 3 p: 14, q: 4 p: 14, q: 5 p: 14, q: 6 p: 15, q: 1 p: 15, q: 2 p: 15, q: 3 p: 15, q: 4 p: 15, q: 5 p: 15, q: 6 p: 15, q: 7 p: 16, q: 1 p: 16, q: 2 p: 16, q: 3 p: 16, q: 4 p: 16, q: 5 p: 16, q: 6 p: 16, q: 7 p: 17, q: 1 p: 17, q: 2 p: 17, q: 4 p: 17, q: 5 p: 17, q: 6 p: 17, q: 7 p: 17, q: 8 I think you know... ...the drill by now","title":"Regular Poly"},{"location":"tools/regular-poly-tool/#the-regular-polygon-tool","text":"1.0.0 \u00b7 Output The Regular Polygon tool is a tool build on the Shl\u00e4fli symbol. It can build both regular convex polygons and regular star polygons. They have a mathematical background: p is the number of vertices. They are all distributed evenly on a circle. For q = 1, you connect each point to the next one on the circle (clockwise or counterclockwise, it doesn't matter). For q = 2, you skip the first one and connect to the 2 nd . For q = 3, you skip the first two and connect to the 3 rd . And so on... as long as q < p/2.","title":"The Regular Polygon tool"},{"location":"tools/regular-poly-tool/#basic-usage","text":"The Regular Poly tool needs a center position, radius, number of sides, the number of sides to skip, and an optional angle offset to rotate the regular polygon to the desired state. Standalone Connected 1 2 3 4 5 6 7 8 9 10 11 - type : 'regpoly' # tooltype is 'regpoly' position : # Position on (100x100) canvas cx : 50 # cx=50 is center position cy : 50 # cy=50 is center position radius : 50 # Radius of the \"circle\" side_count : 6 # The \"p\" value in the Schl\u00e4fli symbol side_skip : 1 # The \"q\" value in the Schl\u00e4fli symbol angle_offset : 0 # Value to rotate the regpoly styles : regpoly : stroke-width : 2 # width of stroke. 0 = no stroke. 1 2 3 4 5 6 7 8 9 10 11 12 - type : 'regpoly' # tooltype is 'regpoly' position : # Position on (100x100) canvas cx : 50 # cx=50 is center position cy : 50 # cy=50 is center position radius : 50 # Radius of the \"circle\" side_count : 6 # The \"p\" value in the Schl\u00e4fli symbol side_skip : 1 # The \"q\" value in the Schl\u00e4fli symbol angle_offset : 0 # Value to rotate the regpoly entity_index : 0 # connect to state of entity 0 styles : regpoly : stroke-width : 2 # width of stroke. 0 = no stroke.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Basic usage"},{"location":"tools/regular-poly-tool/#styling","text":"The Regular Polygon tool has support for the following forms of styling: Method Support Description classes Using SAK or User defined class definitions styles Using inline SVG and CSS styles The Regular Polygon tool is composed of a single object: \"regpoly\" and this is the selector for styling: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 - type : 'regpoly' position : cx : 50 cy : 50 radius : 50 # Radius of the \"circle\" side_count : 6 # The \"p\" value in the Schl\u00e4fli symbol side_skip : 1 # The \"q\" value in the Schl\u00e4fli symbol angle_offset : 0 # Value to rotate the regpoly classes : regpoly : # RegPoly selector <...> styles : regpoly : # RegPoly selector <...> Populair properties: Property Does what? Example fill Fill color fill: red sets fill to color red stroke-width Stroke width stroke-width: 2em sets width to relative width of 2em stroke Stroke color stroke: blue sets stroke to blue opacity Opacity (stroke/fill) opacity: 0.7 sets the opacity of rect to 70% fill-opacity Opacity for fill fill-opacity: 0.5 sets the fill opacity to 50% stroke-opacity Opacity for stroke stroke-opacity: 0.5 sets the stroke opacity to 50%","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Styling"},{"location":"tools/regular-poly-tool/#haptics","text":"See: https://companion.home-assistant.io/docs/integrations/haptics/ for devices that support haptics The tool supports haptic feedback through user_actions / tap_action definition Action Haptic Description Click haptic Uses the haptic property defined in the user_actions definition of the tool. If not specified, a default of medium is used 1 2 3 4 5 6 7 8 9 10 11 12 13 tools : - type : icon position : cx : 10 cy : 10 align : center icon_size : 15 entity_index : 0 user_actions : tap_action : haptic : success actions : - action : more-info Possible values for haptic feedback: Haptic Description success Indicates that a task or action has completed. warning Indicates that a task or action has produced a warning of some kind. failure Indicates that a task or action has failed. light Provides a physical metaphor that complements the visual experience. medium Provides a physical metaphor that complements the visual experience. heavy Provides a physical metaphor that complements the visual experience. selection Indicates that the selection is actively changing.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Haptics"},{"location":"tools/regular-poly-tool/#animations","text":"The RegPoly tool has support for the following forms of animations: Method Support Description colorstops List of state values to set the color colorlists Using a colorlist definition animations Operator state based animations with class/style styling The use of animations require the tool to be connected to an entity","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Animations"},{"location":"tools/regular-poly-tool/#examples","text":"Below some examples with varying \"p\" (side count) and \"q\" (skip number of points). The fill rule is 'evenodd' in the examples ---------------------------- ---------------------------- ---------------------------- ---------------------------- p: 3, q: 1 p: 5, q: 1 p: 5, q: 2 p: 6, q: 1 p: 6, q: 2 p: 7, q: 1 p: 7, q: 2 p: 7, q: 3 p: 8, q: 1 p: 8, q: 2 p: 8, q: 3 p: 9, q: 1 p: 9, q: 2 p: 9, q: 3 p: 9, q: 4 p: 10, q: 1 p: 10, q: 2 p: 10, q: 3 p: 10, q: 4 p: 11, q: 1 p: 11, q: 2 p: 11, q: 3 p: 11, q: 4 p: 11, q: 5 p: 12, q: 1 p: 12, q: 2 p: 12, q: 3 p: 12, q: 4 p: 12, q: 5 p: 13, q: 1 < p: 13, q: 2 p: 13, q: 3 p: 13, q: 4 p: 13, q: 5 p: 13, q: 6 p: 14, q: 1 p: 14, q: 2 p: 14, q: 3 p: 14, q: 4 p: 14, q: 5 p: 14, q: 6 p: 15, q: 1 p: 15, q: 2 p: 15, q: 3 p: 15, q: 4 p: 15, q: 5 p: 15, q: 6 p: 15, q: 7 p: 16, q: 1 p: 16, q: 2 p: 16, q: 3 p: 16, q: 4 p: 16, q: 5 p: 16, q: 6 p: 16, q: 7 p: 17, q: 1 p: 17, q: 2 p: 17, q: 4 p: 17, q: 5 p: 17, q: 6 p: 17, q: 7 p: 17, q: 8 I think you know... ...the drill by now","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Examples"},{"location":"tools/segarc-tool/","tags":["Tools","Tool","Segmented Arc"],"text":"The Segmented Arc tool \u00b6 1.0.0 \u00b7 Output The Segmented Arc tool is a complex, multi-part tool with a custom animation. The tool consists of multiple separate segments that 'behave' like a single, segmented object. The Arc can be between 0 and 360 degrees with configurable start and end angle. It can have an additional scale. The Arc supports colorstops and colorlists to display the state value. It is by far the most complex tool. Was fun to make, and fairly unique. The 360 degrees arc takes a prominent place in many examples. <circle %=\"\" <=\"\" circle=\"\" class=\"sak-circle__circle\" cx=\"0\" cy=\"0\" r=\"110.00000000000001\" style=\"fill: var(--md-primary-fg-color--50); stroke-width: 0;\"> 23 % Basic usage \u00b6 Connected 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 - type : 'segarc' # tooltype is 'segarc' position : # Position on (100x100) canvas cx : 50 # cx=50 is center position cy : 50 # cy=50 is center position start_angle : -130 # start angle... end_angle : 130 # .. --> Arc from left to right! width : 7 # Width of arc 'bar' radius : 45 # Size or arc radius entity_index : 0 # connect to state of entity 0 scale : min : -20 # Temperatures from -20 to +40 max : 40 offset : -4.5 # Scale on inside of arc bar show : style : colorlist # use single color colorlist scale : true # show scale too segments : colorlist : gap : 1 # gap between segments colors : - 'black' styles : background : fill : grey The default style, 'fixedcolor' is broken, therefore the basic example uses a single color colorlist. The direction of the arc is determined by the start and end angle Arc from LEFT to RIGHT: end_angle > start_angle start_angle : -90 end_angle : 0 Arc from RIGHT to LEFT: start_angle > end_angle start_angle : 90 end_angle : 0 A circle for example has a start_angle of 0 and end_angle of 360 The arc can become an ellipse by specifying radius_x and radius_y separately Extended usage \u00b6 Connected 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 - type : 'segarc' # tooltype is 'segarc' position : # Position on (100x100) canvas cx : 50 # cx=50 is center position cy : 50 # cy=50 is center position start_angle : -130 # start angle... end_angle : 130 # .. --> Arc from left to right! width : 7 radius : 45 entity_index : 0 # connect to state of entity 0 scale : min : 15 # Inside temperature max : 25 offset : -4.5 # Scale on inside of arc bar show : style : colorstops # Use a colorstop lastcolor : true # use last color to fill segments segments : colorstops : template : # Use template colorstop (re-use!) name : colorstops_temperature_inside variables : - thegap : 1 styles : background : fill : var(--primary-background-color) filter : url(#is-1) # inset shadow for background The use of show.lastcolor... This setting determines whether a segment gets its color according to its own colorstop, or that the color of the last segment determines the colors of the previous segments. Example: Say we have a colorstop blue=0/green=25/yellow=50/red=75. with the default lastcolor = false , with a state value of 60, you have filled blue and green segments, and a small part of the yellow segment is filled. with lastcolor = true setting, all segments are yellow: they all take the 'last' color as their fill color. Styling \u00b6 The Segmented Arc tool has support for the following forms of styling: Method Support Description classes Using SAK or User defined class definitions styles Using inline SVG and CSS styles The Segmented Arc tool is composed of two objects: \"foreground\" and \"background\" are the selector for styling: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 - type : 'segarc' position : cx : 50 cy : 50 start_angle : -130 # start angle... end_angle : 130 # .. --> Arc from left to right! width : 7 classes : background : # Background selector <...> foreground : # Foreground selector <...> styles : background : # Background selector <...> foreground : # Foreground selector <...> Populair properties for both 'foreground' and 'background' selectors: Property Does what? Example fill Fill color fill: red sets fill to color red stroke-width Stroke width stroke-width: 2em sets width to relative width of 2em stroke Stroke color stroke: blue sets stroke to blue opacity Opacity (stroke/fill) opacity: 0.7 sets the opacity of rect to 70% fill-opacity Opacity for fill fill-opacity: 0.5 sets the fill opacity to 50% stroke-opacity Opacity for stroke stroke-opacity: 0.5 sets the stroke opacity to 50% Haptics \u00b6 See: https://companion.home-assistant.io/docs/integrations/haptics/ for devices that support haptics The tool supports haptic feedback through user_actions / tap_action definition Action Haptic Description Click haptic Uses the haptic property defined in the user_actions definition of the tool. If not specified, a default of medium is used 1 2 3 4 5 6 7 8 9 10 11 12 13 tools : - type : icon position : cx : 10 cy : 10 align : center icon_size : 15 entity_index : 0 user_actions : tap_action : haptic : success actions : - action : more-info Possible values for haptic feedback: Haptic Description success Indicates that a task or action has completed. warning Indicates that a task or action has produced a warning of some kind. failure Indicates that a task or action has failed. light Provides a physical metaphor that complements the visual experience. medium Provides a physical metaphor that complements the visual experience. heavy Provides a physical metaphor that complements the visual experience. selection Indicates that the selection is actively changing. Animations \u00b6 The Segmented Arc tool 'foreground' part has support for the following forms of animations: Method Support Description colorstops List of state values to set the color colorlist Using a colorlist definition, creating equally sized segments animations Operator state based animations with class/style styling Detailed usage \u00b6 The segarc tool has some functionalities which haven't been explained yet in the above examples. Scale placement \u00b6 The scale, if enabled through show.scale: true can be placed inside, on or on the outside of the arc. The scale.offset value is responsible for that functionality and works together with the position.width property. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 - type : 'segarc' # tooltype is 'segarc' position : # Position on (100x100) canvas cx : 50 # cx=50 is center position cy : 50 # cy=50 is center position start_angle : -130 # start angle... end_angle : 130 # .. --> Arc from left to right! width : 7 # Width of arc 'bar' radius : 45 # Size or arc radius entity_index : 0 # connect to state of entity 0 scale : min : -20 # Temperatures from -20 to +40 max : 40 offset : -4.5 # Scale on inside of arc bar show : style : colorlist # use single color colorlist scale : true # show scale too segments : colorlist : gap : 1 # gap between segments colors : - 'black' styles : background : fill : grey The math is as follows: the arc bar width of the arc is 7 . As the math is from the center, we take 7/2 = 3.5 as the value to do the math with the scale offset is -4.5 . That is the offset from the center of the arc bar. A value of -4.5 means on the inside. As the width of the arc is 3.5 from the center, there is a 'gap' between the arc and the scale of 1 . If you want the scale to be on the outside of the arc bar, use a positive offset value. Animation duration \u00b6 The arc uses a custom animation to draw the arc. The animation duration is default 5 seconds and can be configured as follows: 1 2 3 - type : 'segarc' # tooltype is 'segarc' animation : duration : 5 # Animation in seconds Gap between segments \u00b6 The colorlist or colorstop show.style determines the number of segments the arc has. The gap between the drawn segments can be configured using the gap property. The default is 1 . Setting this to 0 removes the gap between the segments. 1 2 3 4 5 segments : colorlist : gap : 1 # gap between segments colors : - 'black' Don't make the gap larger than the size of a segment It may yield unexpected results.","title":"Segmented Arc"},{"location":"tools/segarc-tool/#the-segmented-arc-tool","text":"1.0.0 \u00b7 Output The Segmented Arc tool is a complex, multi-part tool with a custom animation. The tool consists of multiple separate segments that 'behave' like a single, segmented object. The Arc can be between 0 and 360 degrees with configurable start and end angle. It can have an additional scale. The Arc supports colorstops and colorlists to display the state value. It is by far the most complex tool. Was fun to make, and fairly unique. The 360 degrees arc takes a prominent place in many examples. <circle %=\"\" <=\"\" circle=\"\" class=\"sak-circle__circle\" cx=\"0\" cy=\"0\" r=\"110.00000000000001\" style=\"fill: var(--md-primary-fg-color--50); stroke-width: 0;\"> 23 %","title":"The Segmented Arc tool"},{"location":"tools/segarc-tool/#basic-usage","text":"Connected 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 - type : 'segarc' # tooltype is 'segarc' position : # Position on (100x100) canvas cx : 50 # cx=50 is center position cy : 50 # cy=50 is center position start_angle : -130 # start angle... end_angle : 130 # .. --> Arc from left to right! width : 7 # Width of arc 'bar' radius : 45 # Size or arc radius entity_index : 0 # connect to state of entity 0 scale : min : -20 # Temperatures from -20 to +40 max : 40 offset : -4.5 # Scale on inside of arc bar show : style : colorlist # use single color colorlist scale : true # show scale too segments : colorlist : gap : 1 # gap between segments colors : - 'black' styles : background : fill : grey The default style, 'fixedcolor' is broken, therefore the basic example uses a single color colorlist. The direction of the arc is determined by the start and end angle Arc from LEFT to RIGHT: end_angle > start_angle start_angle : -90 end_angle : 0 Arc from RIGHT to LEFT: start_angle > end_angle start_angle : 90 end_angle : 0 A circle for example has a start_angle of 0 and end_angle of 360 The arc can become an ellipse by specifying radius_x and radius_y separately","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Basic usage"},{"location":"tools/segarc-tool/#extended-usage","text":"Connected 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 - type : 'segarc' # tooltype is 'segarc' position : # Position on (100x100) canvas cx : 50 # cx=50 is center position cy : 50 # cy=50 is center position start_angle : -130 # start angle... end_angle : 130 # .. --> Arc from left to right! width : 7 radius : 45 entity_index : 0 # connect to state of entity 0 scale : min : 15 # Inside temperature max : 25 offset : -4.5 # Scale on inside of arc bar show : style : colorstops # Use a colorstop lastcolor : true # use last color to fill segments segments : colorstops : template : # Use template colorstop (re-use!) name : colorstops_temperature_inside variables : - thegap : 1 styles : background : fill : var(--primary-background-color) filter : url(#is-1) # inset shadow for background The use of show.lastcolor... This setting determines whether a segment gets its color according to its own colorstop, or that the color of the last segment determines the colors of the previous segments. Example: Say we have a colorstop blue=0/green=25/yellow=50/red=75. with the default lastcolor = false , with a state value of 60, you have filled blue and green segments, and a small part of the yellow segment is filled. with lastcolor = true setting, all segments are yellow: they all take the 'last' color as their fill color.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Extended usage"},{"location":"tools/segarc-tool/#styling","text":"The Segmented Arc tool has support for the following forms of styling: Method Support Description classes Using SAK or User defined class definitions styles Using inline SVG and CSS styles The Segmented Arc tool is composed of two objects: \"foreground\" and \"background\" are the selector for styling: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 - type : 'segarc' position : cx : 50 cy : 50 start_angle : -130 # start angle... end_angle : 130 # .. --> Arc from left to right! width : 7 classes : background : # Background selector <...> foreground : # Foreground selector <...> styles : background : # Background selector <...> foreground : # Foreground selector <...> Populair properties for both 'foreground' and 'background' selectors: Property Does what? Example fill Fill color fill: red sets fill to color red stroke-width Stroke width stroke-width: 2em sets width to relative width of 2em stroke Stroke color stroke: blue sets stroke to blue opacity Opacity (stroke/fill) opacity: 0.7 sets the opacity of rect to 70% fill-opacity Opacity for fill fill-opacity: 0.5 sets the fill opacity to 50% stroke-opacity Opacity for stroke stroke-opacity: 0.5 sets the stroke opacity to 50%","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Styling"},{"location":"tools/segarc-tool/#haptics","text":"See: https://companion.home-assistant.io/docs/integrations/haptics/ for devices that support haptics The tool supports haptic feedback through user_actions / tap_action definition Action Haptic Description Click haptic Uses the haptic property defined in the user_actions definition of the tool. If not specified, a default of medium is used 1 2 3 4 5 6 7 8 9 10 11 12 13 tools : - type : icon position : cx : 10 cy : 10 align : center icon_size : 15 entity_index : 0 user_actions : tap_action : haptic : success actions : - action : more-info Possible values for haptic feedback: Haptic Description success Indicates that a task or action has completed. warning Indicates that a task or action has produced a warning of some kind. failure Indicates that a task or action has failed. light Provides a physical metaphor that complements the visual experience. medium Provides a physical metaphor that complements the visual experience. heavy Provides a physical metaphor that complements the visual experience. selection Indicates that the selection is actively changing.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Haptics"},{"location":"tools/segarc-tool/#animations","text":"The Segmented Arc tool 'foreground' part has support for the following forms of animations: Method Support Description colorstops List of state values to set the color colorlist Using a colorlist definition, creating equally sized segments animations Operator state based animations with class/style styling","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Animations"},{"location":"tools/segarc-tool/#detailed-usage","text":"The segarc tool has some functionalities which haven't been explained yet in the above examples.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Detailed usage"},{"location":"tools/segarc-tool/#scale-placement","text":"The scale, if enabled through show.scale: true can be placed inside, on or on the outside of the arc. The scale.offset value is responsible for that functionality and works together with the position.width property. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 - type : 'segarc' # tooltype is 'segarc' position : # Position on (100x100) canvas cx : 50 # cx=50 is center position cy : 50 # cy=50 is center position start_angle : -130 # start angle... end_angle : 130 # .. --> Arc from left to right! width : 7 # Width of arc 'bar' radius : 45 # Size or arc radius entity_index : 0 # connect to state of entity 0 scale : min : -20 # Temperatures from -20 to +40 max : 40 offset : -4.5 # Scale on inside of arc bar show : style : colorlist # use single color colorlist scale : true # show scale too segments : colorlist : gap : 1 # gap between segments colors : - 'black' styles : background : fill : grey The math is as follows: the arc bar width of the arc is 7 . As the math is from the center, we take 7/2 = 3.5 as the value to do the math with the scale offset is -4.5 . That is the offset from the center of the arc bar. A value of -4.5 means on the inside. As the width of the arc is 3.5 from the center, there is a 'gap' between the arc and the scale of 1 . If you want the scale to be on the outside of the arc bar, use a positive offset value.","title":"Scale placement"},{"location":"tools/segarc-tool/#animation-duration","text":"The arc uses a custom animation to draw the arc. The animation duration is default 5 seconds and can be configured as follows: 1 2 3 - type : 'segarc' # tooltype is 'segarc' animation : duration : 5 # Animation in seconds","title":"Animation duration"},{"location":"tools/segarc-tool/#gap-between-segments","text":"The colorlist or colorstop show.style determines the number of segments the arc has. The gap between the drawn segments can be configured using the gap property. The default is 1 . Setting this to 0 removes the gap between the segments. 1 2 3 4 5 segments : colorlist : gap : 1 # gap between segments colors : - 'black' Don't make the gap larger than the size of a segment It may yield unexpected results.","title":"Gap between segments"},{"location":"tools/slider-tool/","tags":["Tools","Tool","Slider"],"text":"The slider tool \u00b6 1.0.0 \u00b7 Input \u00b7 The slider tool is an input tool with configurable track, active track, thumb and label position and styling. 58 % The slider can possibly also be configured as state value output in the future... And used as a very compact sort of \"gauge\", if you look at the second example with in this case a (for lights) color temperature gradient fill on the track. Adding colorlist or colorstop functionality would be a nice feature too! Basic usage \u00b6 Connected \u2192 TODO: find out if there is a simple, basic usage... 1 2 3 4 5 - type : 'slider' # tooltype is 'slider' position : # Position on (100x100) canvas cx : 50 # cx=50 is center position cy : 50 # cy=50 is center position entity_index : 1 Advanced usage \u00b6 Below example is the configuration of the first example above. Connected From: view-sake2 (1st row, 1st card) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 - type : slider position : cx : 40 cy : 81 capture : width : 80 height : 15 track : width : 70 height : 2 radius : 1 thumb : width : 5 height : 10 radius : 1 label : # placement can be none, thumb, position (cx,cy) placement : position cx : 95 # Place value right from slider cy : 81 orientation : horizontal # default, other is vertical entity_index : 1 # The brightness attribute # # Extra: # Convert brightness value (0..255) to 0..100% derived_entity : input : '[[[ return state ]]]' state : > [[[ if (typeof(entity) === 'undefined') return; if (typeof(state) === 'undefined') return; var bri = Math.round(state / 2.55); return (bri ? bri : '0'); ]]] unit : > [[[ if (typeof(state) === 'undefined') return undefined; return '%'; ]]] # # The action for the slider if value has changed slider_action : update_interval : 200 # Update every 200 ms while dragging service : light.turn_on parameter : brightness_pct scale : # Min/Max slider value min : 1 max : 100 step : 1 styles : label : text-anchor : end font-size : 10em font-weight : 600 # track: thumb : stroke-width : 0.5em stroke : var(--md--primary-fg-color) stroke-opacity : 0.8 Update while dragging \u00b6 The slider can update the setpoint/value while dragging. This means that the brightness of a light is adjusted while dragging. The interval is specified by the update_interval property: default value is 0 , ie NO update while dragging, only on release of the slider any other value (in milliseconds) starts a timer that checks if the slider is changed, and than calls the slider_action config. Don't specifiy a very small value, as it may overload your Zigbee/Wifi network A value of 200 (5x / second) or 250 (4x / second) works very well in my setup using Tradfri lights and zzh! stick. If you combine this with a light transition, brightness changes are nice and smooth! Display active track \u00b6 The second example shows an orange gradient for the active track. The active track must be enabled using: 1 2 show : active : true And defined at the position level: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 - type : slider position : cx : 40 cy : 81 capture : width : 80 height : 15 track : width : 70 height : 2 radius : 1 active : height : 2 radius : 1 thumb : width : 5 height : 10 radius : 1 Styling \u00b6 The slider tool has support for the following forms of styling: Method Support Description classes Using SAK or User defined class definitions styles Using inslider SVG and CSS styles The slider tool is composed of four parts: \"track\", \"active\", \"thumb\" and \"label\" + \"uom\" can be used as the selector for styling: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 - type : 'slider' position : cx : 50 cy : 50 entity_index : 1 classes : track : # Track selector <...> active : # Active track selector <...> thumb : # Thumb selector <...> label : # Label selector <...> uom : # Unit of label selector <...> styles : track : # Track selector <...> active : # Active track selector <...> thumb : # Thumb selector <...> label : # Label selector <...> uom : # Unit of label selector <...> Populair properties: Property Does what? Example Haptics \u00b6 See: https://companion.home-assistant.io/docs/integrations/haptics/ for devices that support haptics The slider supports its own fixed haptic feedback Action Haptic Description Click slider light Feedback that slider is clicked Move slider selection Feedback for every update to HA of the slider value Animations \u00b6 The slider tool has support for the following forms of animations: Method Support Description colorstops List of state values to set the color colorlists Using a colorlist definition animations Operator state based animations with class/style styling Examples \u00b6 Some examples with different settings for track and thumb.","title":"Slider"},{"location":"tools/slider-tool/#the-slider-tool","text":"1.0.0 \u00b7 Input \u00b7 The slider tool is an input tool with configurable track, active track, thumb and label position and styling. 58 % The slider can possibly also be configured as state value output in the future... And used as a very compact sort of \"gauge\", if you look at the second example with in this case a (for lights) color temperature gradient fill on the track. Adding colorlist or colorstop functionality would be a nice feature too!","title":"The slider tool"},{"location":"tools/slider-tool/#basic-usage","text":"Connected \u2192 TODO: find out if there is a simple, basic usage... 1 2 3 4 5 - type : 'slider' # tooltype is 'slider' position : # Position on (100x100) canvas cx : 50 # cx=50 is center position cy : 50 # cy=50 is center position entity_index : 1","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Basic usage"},{"location":"tools/slider-tool/#advanced-usage","text":"Below example is the configuration of the first example above. Connected From: view-sake2 (1st row, 1st card) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 - type : slider position : cx : 40 cy : 81 capture : width : 80 height : 15 track : width : 70 height : 2 radius : 1 thumb : width : 5 height : 10 radius : 1 label : # placement can be none, thumb, position (cx,cy) placement : position cx : 95 # Place value right from slider cy : 81 orientation : horizontal # default, other is vertical entity_index : 1 # The brightness attribute # # Extra: # Convert brightness value (0..255) to 0..100% derived_entity : input : '[[[ return state ]]]' state : > [[[ if (typeof(entity) === 'undefined') return; if (typeof(state) === 'undefined') return; var bri = Math.round(state / 2.55); return (bri ? bri : '0'); ]]] unit : > [[[ if (typeof(state) === 'undefined') return undefined; return '%'; ]]] # # The action for the slider if value has changed slider_action : update_interval : 200 # Update every 200 ms while dragging service : light.turn_on parameter : brightness_pct scale : # Min/Max slider value min : 1 max : 100 step : 1 styles : label : text-anchor : end font-size : 10em font-weight : 600 # track: thumb : stroke-width : 0.5em stroke : var(--md--primary-fg-color) stroke-opacity : 0.8","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Advanced usage"},{"location":"tools/slider-tool/#update-while-dragging","text":"The slider can update the setpoint/value while dragging. This means that the brightness of a light is adjusted while dragging. The interval is specified by the update_interval property: default value is 0 , ie NO update while dragging, only on release of the slider any other value (in milliseconds) starts a timer that checks if the slider is changed, and than calls the slider_action config. Don't specifiy a very small value, as it may overload your Zigbee/Wifi network A value of 200 (5x / second) or 250 (4x / second) works very well in my setup using Tradfri lights and zzh! stick. If you combine this with a light transition, brightness changes are nice and smooth!","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Update while dragging"},{"location":"tools/slider-tool/#display-active-track","text":"The second example shows an orange gradient for the active track. The active track must be enabled using: 1 2 show : active : true And defined at the position level: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 - type : slider position : cx : 40 cy : 81 capture : width : 80 height : 15 track : width : 70 height : 2 radius : 1 active : height : 2 radius : 1 thumb : width : 5 height : 10 radius : 1","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Display active track"},{"location":"tools/slider-tool/#styling","text":"The slider tool has support for the following forms of styling: Method Support Description classes Using SAK or User defined class definitions styles Using inslider SVG and CSS styles The slider tool is composed of four parts: \"track\", \"active\", \"thumb\" and \"label\" + \"uom\" can be used as the selector for styling: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 - type : 'slider' position : cx : 50 cy : 50 entity_index : 1 classes : track : # Track selector <...> active : # Active track selector <...> thumb : # Thumb selector <...> label : # Label selector <...> uom : # Unit of label selector <...> styles : track : # Track selector <...> active : # Active track selector <...> thumb : # Thumb selector <...> label : # Label selector <...> uom : # Unit of label selector <...> Populair properties: Property Does what? Example","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Styling"},{"location":"tools/slider-tool/#haptics","text":"See: https://companion.home-assistant.io/docs/integrations/haptics/ for devices that support haptics The slider supports its own fixed haptic feedback Action Haptic Description Click slider light Feedback that slider is clicked Move slider selection Feedback for every update to HA of the slider value","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Haptics"},{"location":"tools/slider-tool/#animations","text":"The slider tool has support for the following forms of animations: Method Support Description colorstops List of state values to set the color colorlists Using a colorlist definition animations Operator state based animations with class/style styling","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Animations"},{"location":"tools/slider-tool/#examples","text":"Some examples with different settings for track and thumb.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Examples"},{"location":"tools/switch-tool/","tags":["Tools","Tool","Switch"],"text":"The Switch tool \u00b6 1.0.0 \u00b7 Input The Switch tool is based on two SVG basic <rectangle> element shapes. It is a composite tool with a built-in animation to move the thumb to 'off' or 'on' position and to change the color to 'off' or 'on' color. Basic usage \u00b6 Connected 1 2 3 4 5 6 - type : 'switch' # tooltype is 'switch' position : # Position on (100x100) canvas cx : 50 # cx=50 is center position cy : 50 # cy=50 is center position orientation : 'horizontal' # Vertical or horizontal entity_index : 0 The switch tool must ALWAYS be connected to an 'on' / 'off' state entity. Lights and Switches are the most used entities for this tool. Extended usage \u00b6 The Switch tools parts can be defined/styled individually. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 - type : switch position : cx : 50 cy : 50 track : # Configure track part radius : 1 # Round corners with radius=1 thumb : # Configure thumb part width : 5 # Set width height : 5 # Set height radius : 1 # Set corner radius offset : 2.5 # offset = width/2 for on/off move orientation : 'horizontal' entity_index : 0 animations : - state : 'on' # Define thumb colors when 'on' id : 1 styles : thumb : --thumb-stroke : 'var(--primary-background-color)' fill : 'var(--switch-checked-button-color)' styles : thumb : # Overwrite thumb setting --thumb-stroke : 'var(--primary-background-color)' Style the switch to round or square By specifying both the track and the thumb sizes and corner radius, you can create completely different switches. Styling \u00b6 The Switch tool has support for the following forms of styling: Method Support Description classes Using SAK or User defined class definitions styles Using inswitch SVG and CSS styles The Switch tool is composed of two parts: \"track\" and \"thumb\" can be used as the selector for styling: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 - type : 'switch' position : cx : 50 cy : 50 orientation : 'vertical' entity_index : 0 classes : track : # Track selector <...> thumb : # Thumb selector <...> styles : track : # Track selector <...> thumb : # Thumb selector <...> Populair properties: Property Does what? Example Haptics \u00b6 See: https://companion.home-assistant.io/docs/integrations/haptics/ for devices that support haptics The tool supports haptic feedback through user_actions / tap_action definition Action Haptic Description Click haptic Uses the haptic property defined in the user_actions definition of the tool. If not specified, a default of medium is used 1 2 3 4 5 6 7 8 9 10 11 12 13 tools : - type : icon position : cx : 10 cy : 10 align : center icon_size : 15 entity_index : 0 user_actions : tap_action : haptic : success actions : - action : more-info Possible values for haptic feedback: Haptic Description success Indicates that a task or action has completed. warning Indicates that a task or action has produced a warning of some kind. failure Indicates that a task or action has failed. light Provides a physical metaphor that complements the visual experience. medium Provides a physical metaphor that complements the visual experience. heavy Provides a physical metaphor that complements the visual experience. selection Indicates that the selection is actively changing. Animations \u00b6 The Switch tool has support for the following forms of animations: Method Support Description colorstops List of state values to set the color colorlists Using a colorlist definition animations Operator state based animations with class/style styling Examples \u00b6 Some examples with different settings in 'off' and 'on' state. From left to right, the partial configuration is as follows: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 - type : switch # #1 position : cx : 60 cy : 30 orientation : 'vertical' - type : switch # #2 position : cx : 80 cy : 30 orientation : 'horizontal' - type : switch # #3 position : cx : 100 cy : 30 track : radius : 1 thumb : width : 5 height : 5 radius : 1 offset : 2.5 orientation : 'horizontal' - type : switch # #4 position : cx : 120 cy : 30 track : radius : 1 thumb : width : 5 height : 10 radius : 1 offset : 2.5 orientation : 'horizontal' - type : switch # #5 position : cx : 140 cy : 30 orientation : 'horizontal' thumb : width : 5 height : 5 radius : 2.5 offset : 2.5 Ramblings \u00b6 Just thoughts, nothing more, to extend the switch with some decorators orso: you can define extra basic SVG elements to 'decorate' the track and thumb part of the switch... 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 - type : switch position : cx : 50 cy : 50 track : # Configure track part radius : 1 # Round corners with radius=1 thumb : # Configure thumb part width : 5 # Set width height : 5 # Set height radius : 1 # Set corner radius offset : 2.5 # offset = width/2 for on/off move orientation : 'horizontal' entity_index : 0 decorators : thumb : - type : circle # Place a circle on top of the thumb name : dot # name it 'dot' used for selections position : cx : 50 # center it on the thumb cy : 50 radius : 2 # small one, its called a 'dot'... animations : - state : 'on' # Define thumb colors when 'on' id : 1 styles : thumb : --thumb-stroke : 'var(--primary-background-color)' fill : 'var(--switch-checked-button-color)' thumb.dot : stroke : red styles : thumb : # Overwrite thumb setting --thumb-stroke : 'var(--primary-background-color)'","title":"Switch"},{"location":"tools/switch-tool/#the-switch-tool","text":"1.0.0 \u00b7 Input The Switch tool is based on two SVG basic <rectangle> element shapes. It is a composite tool with a built-in animation to move the thumb to 'off' or 'on' position and to change the color to 'off' or 'on' color.","title":"The Switch tool"},{"location":"tools/switch-tool/#basic-usage","text":"Connected 1 2 3 4 5 6 - type : 'switch' # tooltype is 'switch' position : # Position on (100x100) canvas cx : 50 # cx=50 is center position cy : 50 # cy=50 is center position orientation : 'horizontal' # Vertical or horizontal entity_index : 0 The switch tool must ALWAYS be connected to an 'on' / 'off' state entity. Lights and Switches are the most used entities for this tool.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Basic usage"},{"location":"tools/switch-tool/#extended-usage","text":"The Switch tools parts can be defined/styled individually. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 - type : switch position : cx : 50 cy : 50 track : # Configure track part radius : 1 # Round corners with radius=1 thumb : # Configure thumb part width : 5 # Set width height : 5 # Set height radius : 1 # Set corner radius offset : 2.5 # offset = width/2 for on/off move orientation : 'horizontal' entity_index : 0 animations : - state : 'on' # Define thumb colors when 'on' id : 1 styles : thumb : --thumb-stroke : 'var(--primary-background-color)' fill : 'var(--switch-checked-button-color)' styles : thumb : # Overwrite thumb setting --thumb-stroke : 'var(--primary-background-color)' Style the switch to round or square By specifying both the track and the thumb sizes and corner radius, you can create completely different switches.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Extended usage"},{"location":"tools/switch-tool/#styling","text":"The Switch tool has support for the following forms of styling: Method Support Description classes Using SAK or User defined class definitions styles Using inswitch SVG and CSS styles The Switch tool is composed of two parts: \"track\" and \"thumb\" can be used as the selector for styling: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 - type : 'switch' position : cx : 50 cy : 50 orientation : 'vertical' entity_index : 0 classes : track : # Track selector <...> thumb : # Thumb selector <...> styles : track : # Track selector <...> thumb : # Thumb selector <...> Populair properties: Property Does what? Example","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Styling"},{"location":"tools/switch-tool/#haptics","text":"See: https://companion.home-assistant.io/docs/integrations/haptics/ for devices that support haptics The tool supports haptic feedback through user_actions / tap_action definition Action Haptic Description Click haptic Uses the haptic property defined in the user_actions definition of the tool. If not specified, a default of medium is used 1 2 3 4 5 6 7 8 9 10 11 12 13 tools : - type : icon position : cx : 10 cy : 10 align : center icon_size : 15 entity_index : 0 user_actions : tap_action : haptic : success actions : - action : more-info Possible values for haptic feedback: Haptic Description success Indicates that a task or action has completed. warning Indicates that a task or action has produced a warning of some kind. failure Indicates that a task or action has failed. light Provides a physical metaphor that complements the visual experience. medium Provides a physical metaphor that complements the visual experience. heavy Provides a physical metaphor that complements the visual experience. selection Indicates that the selection is actively changing.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Haptics"},{"location":"tools/switch-tool/#animations","text":"The Switch tool has support for the following forms of animations: Method Support Description colorstops List of state values to set the color colorlists Using a colorlist definition animations Operator state based animations with class/style styling","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Animations"},{"location":"tools/switch-tool/#examples","text":"Some examples with different settings in 'off' and 'on' state. From left to right, the partial configuration is as follows: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 - type : switch # #1 position : cx : 60 cy : 30 orientation : 'vertical' - type : switch # #2 position : cx : 80 cy : 30 orientation : 'horizontal' - type : switch # #3 position : cx : 100 cy : 30 track : radius : 1 thumb : width : 5 height : 5 radius : 1 offset : 2.5 orientation : 'horizontal' - type : switch # #4 position : cx : 120 cy : 30 track : radius : 1 thumb : width : 5 height : 10 radius : 1 offset : 2.5 orientation : 'horizontal' - type : switch # #5 position : cx : 140 cy : 30 orientation : 'horizontal' thumb : width : 5 height : 5 radius : 2.5 offset : 2.5","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Examples"},{"location":"tools/switch-tool/#ramblings","text":"Just thoughts, nothing more, to extend the switch with some decorators orso: you can define extra basic SVG elements to 'decorate' the track and thumb part of the switch... 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 - type : switch position : cx : 50 cy : 50 track : # Configure track part radius : 1 # Round corners with radius=1 thumb : # Configure thumb part width : 5 # Set width height : 5 # Set height radius : 1 # Set corner radius offset : 2.5 # offset = width/2 for on/off move orientation : 'horizontal' entity_index : 0 decorators : thumb : - type : circle # Place a circle on top of the thumb name : dot # name it 'dot' used for selections position : cx : 50 # center it on the thumb cy : 50 radius : 2 # small one, its called a 'dot'... animations : - state : 'on' # Define thumb colors when 'on' id : 1 styles : thumb : --thumb-stroke : 'var(--primary-background-color)' fill : 'var(--switch-checked-button-color)' thumb.dot : stroke : red styles : thumb : # Overwrite thumb setting --thumb-stroke : 'var(--primary-background-color)'","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Ramblings"},{"location":"tools/text-tool/","tags":["Tools","Tool","Text"],"text":"The Text tool \u00b6 1.0.0 \u00b7 Output \u00b7 WIP The Text tool is based on the SVG basic <text> element shape. This is some SVG drawn text Basic usage \u00b6 The Text tool needs a center position, and - of course - some text to display. Standalone 1 2 3 4 5 6 7 8 - type : 'text' # tooltype is 'text' position : # Position on (100x100) canvas cx : 50 # cx=50 is center position cy : 50 # cy=50 is center position text : 'My Text' styles : text : font-size : 12em # set font size to 12em Connected 1 2 3 4 5 6 7 8 9 - type : 'text' # tooltype is 'text' position : # Position on (100x100) canvas cx : 50 # cx=50 is center position cy : 50 # cy=50 is center position entity_index : 0 # connect to state of entity 0 text : 'My Text' styles : text : font-size : 12em # set font size to 12em Always use a relative font-size: it fits well with the relative sizes used by SAK Unless you need a fixed size in pixels... Styling \u00b6 The Text tool has support for the following forms of styling: Method Support Description classes Using SAK or User defined class definitions styles Using inline SVG and CSS styles The Text tool is composed of a single object: \"text\" and this is the selector for styling: 1 2 3 4 5 6 7 8 9 10 11 - type : 'text' position : cx : 50 cy : 50 text : 'My Text' classes : text : # Text selector <...> styles : text : # Text selector <...> Populair properties: Property Does what? Example font-size Font size font-size: 12em sets RELATIVE font size text-anchor Anchor of text text-anchor: start or middle , or end fill Fill color fill: red sets fill to color red stroke-width Stroke width stroke-width: 2em sets width to relative width of 2em stroke Stroke color stroke: blue sets stroke to blue opacity Opacity (stroke/fill) opacity: 0.7 sets the opacity of text to 70% fill-opacity Opacity for fill fill-opacity: 0.5 sets the fill opacity to 50% stroke-opacity Opacity for stroke stroke-opacity: 0.5 sets the stroke opacity to 50% Reference: https://developer.mozilla.org/en-US/docs/Web/SVG/Element/text Haptics \u00b6 See: https://companion.home-assistant.io/docs/integrations/haptics/ for devices that support haptics The tool supports haptic feedback through user_actions / tap_action definition Action Haptic Description Click haptic Uses the haptic property defined in the user_actions definition of the tool. If not specified, a default of medium is used 1 2 3 4 5 6 7 8 9 10 11 12 13 tools : - type : icon position : cx : 10 cy : 10 align : center icon_size : 15 entity_index : 0 user_actions : tap_action : haptic : success actions : - action : more-info Possible values for haptic feedback: Haptic Description success Indicates that a task or action has completed. warning Indicates that a task or action has produced a warning of some kind. failure Indicates that a task or action has failed. light Provides a physical metaphor that complements the visual experience. medium Provides a physical metaphor that complements the visual experience. heavy Provides a physical metaphor that complements the visual experience. selection Indicates that the selection is actively changing. Animations \u00b6 The Text tool has support for the following forms of animations: Method Support Description colorstops List of state values to set the color colorlists Using a colorlist definition animations Operator state based animations with class/style styling The use of animations require the tool to be connected to an entity","title":"Text"},{"location":"tools/text-tool/#the-text-tool","text":"1.0.0 \u00b7 Output \u00b7 WIP The Text tool is based on the SVG basic <text> element shape. This is some SVG drawn text","title":"The Text tool"},{"location":"tools/text-tool/#basic-usage","text":"The Text tool needs a center position, and - of course - some text to display. Standalone 1 2 3 4 5 6 7 8 - type : 'text' # tooltype is 'text' position : # Position on (100x100) canvas cx : 50 # cx=50 is center position cy : 50 # cy=50 is center position text : 'My Text' styles : text : font-size : 12em # set font size to 12em Connected 1 2 3 4 5 6 7 8 9 - type : 'text' # tooltype is 'text' position : # Position on (100x100) canvas cx : 50 # cx=50 is center position cy : 50 # cy=50 is center position entity_index : 0 # connect to state of entity 0 text : 'My Text' styles : text : font-size : 12em # set font size to 12em Always use a relative font-size: it fits well with the relative sizes used by SAK Unless you need a fixed size in pixels...","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Basic usage"},{"location":"tools/text-tool/#styling","text":"The Text tool has support for the following forms of styling: Method Support Description classes Using SAK or User defined class definitions styles Using inline SVG and CSS styles The Text tool is composed of a single object: \"text\" and this is the selector for styling: 1 2 3 4 5 6 7 8 9 10 11 - type : 'text' position : cx : 50 cy : 50 text : 'My Text' classes : text : # Text selector <...> styles : text : # Text selector <...> Populair properties: Property Does what? Example font-size Font size font-size: 12em sets RELATIVE font size text-anchor Anchor of text text-anchor: start or middle , or end fill Fill color fill: red sets fill to color red stroke-width Stroke width stroke-width: 2em sets width to relative width of 2em stroke Stroke color stroke: blue sets stroke to blue opacity Opacity (stroke/fill) opacity: 0.7 sets the opacity of text to 70% fill-opacity Opacity for fill fill-opacity: 0.5 sets the fill opacity to 50% stroke-opacity Opacity for stroke stroke-opacity: 0.5 sets the stroke opacity to 50% Reference: https://developer.mozilla.org/en-US/docs/Web/SVG/Element/text","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Styling"},{"location":"tools/text-tool/#haptics","text":"See: https://companion.home-assistant.io/docs/integrations/haptics/ for devices that support haptics The tool supports haptic feedback through user_actions / tap_action definition Action Haptic Description Click haptic Uses the haptic property defined in the user_actions definition of the tool. If not specified, a default of medium is used 1 2 3 4 5 6 7 8 9 10 11 12 13 tools : - type : icon position : cx : 10 cy : 10 align : center icon_size : 15 entity_index : 0 user_actions : tap_action : haptic : success actions : - action : more-info Possible values for haptic feedback: Haptic Description success Indicates that a task or action has completed. warning Indicates that a task or action has produced a warning of some kind. failure Indicates that a task or action has failed. light Provides a physical metaphor that complements the visual experience. medium Provides a physical metaphor that complements the visual experience. heavy Provides a physical metaphor that complements the visual experience. selection Indicates that the selection is actively changing.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Haptics"},{"location":"tools/text-tool/#animations","text":"The Text tool has support for the following forms of animations: Method Support Description colorstops List of state values to set the color colorlists Using a colorlist definition animations Operator state based animations with class/style styling The use of animations require the tool to be connected to an entity","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Animations"},{"location":"tools/usersvg-tool/","tags":["Tools","Tool","User SVG"],"text":"The User SVG tool \u00b6 1.0.0 \u00b7 Output \u00b7 WIP The User SVG tool makes it possible to add (external) SVGs to your card. Weather Weather AirVisual AirVisual Inline SVG support is foreseen in the future Basic usage \u00b6 Static file Connected From: view-sake6 1 2 3 4 5 6 7 8 9 - type : 'usersvg' # tooltype is 'usersvg' position : # Position on (100x100) canvas cx : 50 # cx=50 is center position cy : 50 # cy=50 is center position height : 100 # Image covers full heigth and... width : 100 # ...width of card. style : 'images' images : # A static image uses 'default': - default : /local/images/backgrounds/balls-background-1.svg This one is taken from example 1, the display of the 'face' used for AirVisual. From: view-sake1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 - type : 'usersvg' # tooltype is 'usersvg' position : # Position on (100x100) canvas cx : 50 # cx=50 is center position cy : 50 # cy=50 is center position entity_index : 0 # connect to state of entity 0 style : 'images' images : - face1 : /local/images/ic-face-1.svg - face2 : /local/images/ic-face-2.svg - face3 : /local/images/ic-face-3.svg - face4 : /local/images/ic-face-4.svg - face5 : /local/images/ic-face-5.svg - face6 : /local/images/ic-face-6.svg animations : # Use animation to switch faces - state : '50' operator : <= image : face1 - state : '100' operator : <= image : face2 - state : '150' operator : <= image : face3 - state : '200' operator : <= image : face4 - state : '300' operator : <= image : face5 - state : '9999' operator : <= image : face6 Styling \u00b6 The User SVG tool has support for the following forms of styling: Method Support Description classes Using SAK or User defined class definitions styles Using inline SVG and CSS styles The User SVG tool is composed of a single object: \"usersvg\" and this is the selector for styling: 1 2 3 4 5 6 7 8 9 10 - type : 'usersvg' position : cx : 50 cy : 50 classes : usersvg : # Usersvg selector <...> styles : usersvg : # Usersvg selector <...> Populair properties: Property Does what? Example TBD TBD TBD Haptics \u00b6 See: https://companion.home-assistant.io/docs/integrations/haptics/ for devices that support haptics The tool supports haptic feedback through user_actions / tap_action definition Action Haptic Description Click haptic Uses the haptic property defined in the user_actions definition of the tool. If not specified, a default of medium is used 1 2 3 4 5 6 7 8 9 10 11 12 13 tools : - type : icon position : cx : 10 cy : 10 align : center icon_size : 15 entity_index : 0 user_actions : tap_action : haptic : success actions : - action : more-info Possible values for haptic feedback: Haptic Description success Indicates that a task or action has completed. warning Indicates that a task or action has produced a warning of some kind. failure Indicates that a task or action has failed. light Provides a physical metaphor that complements the visual experience. medium Provides a physical metaphor that complements the visual experience. heavy Provides a physical metaphor that complements the visual experience. selection Indicates that the selection is actively changing. Animations \u00b6 The User SVG tool has support for the following forms of animations: Method Support Description colorstops List of state values to set the color colorlists Using a colorlist definition animations Operator state based animations with class/style styling The use of animations require the tool to be connected to an entity Detailed specification \u00b6 The basic usage shows all the functionalities of the User SVG tool.","title":"User SVG"},{"location":"tools/usersvg-tool/#the-user-svg-tool","text":"1.0.0 \u00b7 Output \u00b7 WIP The User SVG tool makes it possible to add (external) SVGs to your card. Weather Weather AirVisual AirVisual Inline SVG support is foreseen in the future","title":"The User SVG tool"},{"location":"tools/usersvg-tool/#basic-usage","text":"Static file Connected From: view-sake6 1 2 3 4 5 6 7 8 9 - type : 'usersvg' # tooltype is 'usersvg' position : # Position on (100x100) canvas cx : 50 # cx=50 is center position cy : 50 # cy=50 is center position height : 100 # Image covers full heigth and... width : 100 # ...width of card. style : 'images' images : # A static image uses 'default': - default : /local/images/backgrounds/balls-background-1.svg This one is taken from example 1, the display of the 'face' used for AirVisual. From: view-sake1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 - type : 'usersvg' # tooltype is 'usersvg' position : # Position on (100x100) canvas cx : 50 # cx=50 is center position cy : 50 # cy=50 is center position entity_index : 0 # connect to state of entity 0 style : 'images' images : - face1 : /local/images/ic-face-1.svg - face2 : /local/images/ic-face-2.svg - face3 : /local/images/ic-face-3.svg - face4 : /local/images/ic-face-4.svg - face5 : /local/images/ic-face-5.svg - face6 : /local/images/ic-face-6.svg animations : # Use animation to switch faces - state : '50' operator : <= image : face1 - state : '100' operator : <= image : face2 - state : '150' operator : <= image : face3 - state : '200' operator : <= image : face4 - state : '300' operator : <= image : face5 - state : '9999' operator : <= image : face6","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Basic usage"},{"location":"tools/usersvg-tool/#styling","text":"The User SVG tool has support for the following forms of styling: Method Support Description classes Using SAK or User defined class definitions styles Using inline SVG and CSS styles The User SVG tool is composed of a single object: \"usersvg\" and this is the selector for styling: 1 2 3 4 5 6 7 8 9 10 - type : 'usersvg' position : cx : 50 cy : 50 classes : usersvg : # Usersvg selector <...> styles : usersvg : # Usersvg selector <...> Populair properties: Property Does what? Example TBD TBD TBD","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Styling"},{"location":"tools/usersvg-tool/#haptics","text":"See: https://companion.home-assistant.io/docs/integrations/haptics/ for devices that support haptics The tool supports haptic feedback through user_actions / tap_action definition Action Haptic Description Click haptic Uses the haptic property defined in the user_actions definition of the tool. If not specified, a default of medium is used 1 2 3 4 5 6 7 8 9 10 11 12 13 tools : - type : icon position : cx : 10 cy : 10 align : center icon_size : 15 entity_index : 0 user_actions : tap_action : haptic : success actions : - action : more-info Possible values for haptic feedback: Haptic Description success Indicates that a task or action has completed. warning Indicates that a task or action has produced a warning of some kind. failure Indicates that a task or action has failed. light Provides a physical metaphor that complements the visual experience. medium Provides a physical metaphor that complements the visual experience. heavy Provides a physical metaphor that complements the visual experience. selection Indicates that the selection is actively changing.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Haptics"},{"location":"tools/usersvg-tool/#animations","text":"The User SVG tool has support for the following forms of animations: Method Support Description colorstops List of state values to set the color colorlists Using a colorlist definition animations Operator state based animations with class/style styling The use of animations require the tool to be connected to an entity","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Animations"},{"location":"tools/usersvg-tool/#detailed-specification","text":"The basic usage shows all the functionalities of the User SVG tool.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Detailed specification"},{"location":"tutorials/10-step-tutorial-01-intro/","tags":["Tutorials","10 Steps or less"],"text":"Tutorial #1 Introduction \u00b6 Skill Level / Required Knowledge \u00b6 First two parts: Last two parts: Contents \u00b6 In this tutorial series, you wil learn the following: Create a basic square card with a circle, entity icon, entity state and entity name. Extend this card to a double height card by duplicating the existing toolset Position a toolset on a card Create a toolset template with variables (re-use) Use the toolset to recreate the double height card Prerequisites \u00b6 To follow this tutorial, the following is required: All tutorials are created in the \"Swiss Army Knife Tutorials\" dashboard. You already should have included that one in your Lovelace configuration.","title":"From simple card to template"},{"location":"tutorials/10-step-tutorial-01-intro/#tutorial-1-introduction","text":"","title":"Tutorial #1 Introduction"},{"location":"tutorials/10-step-tutorial-01-intro/#skill-level-required-knowledge","text":"First two parts: Last two parts:","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Skill Level / Required Knowledge"},{"location":"tutorials/10-step-tutorial-01-intro/#contents","text":"In this tutorial series, you wil learn the following: Create a basic square card with a circle, entity icon, entity state and entity name. Extend this card to a double height card by duplicating the existing toolset Position a toolset on a card Create a toolset template with variables (re-use) Use the toolset to recreate the double height card","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Contents"},{"location":"tutorials/10-step-tutorial-01-intro/#prerequisites","text":"To follow this tutorial, the following is required: All tutorials are created in the \"Swiss Army Knife Tutorials\" dashboard. You already should have included that one in your Lovelace configuration.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Prerequisites"},{"location":"tutorials/10-step-tutorial-01-part1/","tags":["Tutorials","10 Steps or less"],"text":"Tutorial #1, Part 1 \u00b6 In this part, you will learn to make the following square card:![10-step-tutorial-01-part1-step-10] Step 1: Create the yml view file \u00b6 Create view-tutorial-basic-series01-part1.yml in the lovelace/views/sak-tutorial-views/ folder. Add it to the sak-tutorials-dashboard.yaml in your root folder. Step 2: define the view basics \u00b6 1 2 3 4 5 6 7 8 title : TUT-01-P1 path : tut-01-p1 panel : false cards : - type : vertical-stack cards : - type : horizontal-stack cards : Step 3: Define a square card with 1 entity \u00b6 You should replace the sensor.humidity with a sensor of your own. 1 2 3 4 5 6 7 8 9 10 11 12 13 title : TUT-01-P1 path : tut-01-p1 panel : false cards : - type : vertical-stack cards : - type : horizontal-stack cards : - type : 'custom:swiss-army-knife-card' aspectratio : 1/1 entities : - entity : sensor.humidity name : Study Step 4: Add the layout and toolsets part \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 title : TUT-01-P1 path : tut-01-p1 panel : false cards : - type : vertical-stack cards : - type : horizontal-stack cards : - type : 'custom:swiss-army-knife-card' aspectratio : 1/1 entities : - entity : sensor.humidity name : Study layout : toolsets : - toolset : just-a-name position : cx : 50 cy : 50 tools : Step 5: Add a circle tool \u00b6 Add a Circle tool centered on the card with a radius of 45. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 title : TUT-01-P1 path : tut-01-p1 panel : false cards : - type : vertical-stack cards : - type : horizontal-stack cards : - type : 'custom:swiss-army-knife-card' aspectratio : 1/1 entities : - entity : sensor.humidity name : Study layout : toolsets : - toolset : just-a-name position : cx : 50 cy : 50 tools : - type : circle position : cx : 50 cy : 50 radius : 45 Step 6: Make the circle a bit reddish \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 title : TUT-01-P1 path : tut-01-p1 panel : false cards : - type : vertical-stack cards : - type : horizontal-stack cards : - type : 'custom:swiss-army-knife-card' aspectratio : 1/1 entities : - entity : sensor.humidity name : Study layout : toolsets : - toolset : just-a-name position : cx : 50 cy : 50 tools : - type : circle position : cx : 50 cy : 50 radius : 45 styles : circle : stroke-width : 2em stroke : red stroke-opacity : 0.5 fill : bisque fill-opacity : 0.5 Step 7: Add an icon \u00b6 Add an Entity Icon tool horizontally centered and vertically above the center and give it a size of 25 (25% of the 100x100 grid) and center it on that position. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 title : TUT-01-P1 path : tut-01-p1 panel : false cards : - type : vertical-stack cards : - type : horizontal-stack cards : - type : 'custom:swiss-army-knife-card' aspectratio : 1/1 entities : - entity : sensor.humidity name : Study layout : toolsets : - toolset : just-a-name position : cx : 50 cy : 50 tools : - type : circle position : cx : 50 cy : 50 radius : 45 styles : circle : stroke-width : 2em stroke : red stroke-opacity : 0.5 fill : bisque fill-opacity : 0.5 - type : icon position : cx : 50 cy : 25 align : center icon_size : 25 entity_index : 0 Step 8: Add the state \u00b6 Add an Entity State tool horizontally centered and vertically below the center and give it a font size of 15em (15% of the 100x100 grid). An entity state tool MUST have a font-size! 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 title : TUT-01-P1 path : tut-01-p1 panel : false cards : - type : vertical-stack cards : - type : horizontal-stack cards : - type : 'custom:swiss-army-knife-card' aspectratio : 1/1 entities : - entity : sensor.humidity name : Study layout : toolsets : - toolset : just-a-name position : cx : 50 cy : 50 tools : - type : circle position : cx : 50 cy : 50 radius : 45 styles : circle : stroke-width : 2em stroke : red stroke-opacity : 0.5 fill : bisque fill-opacity : 0.5 - type : icon position : cx : 50 cy : 25 align : center icon_size : 25 entity_index : 0 - type : state position : cx : 50 cy : 70 entity_index : 0 styles : state : font-size : 15em Step 9: Add the name \u00b6 Add an Entity Name tool horizontally and vertically centered. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 title : TUT-01-P1 path : tut-01-p1 panel : false cards : - type : vertical-stack cards : - type : horizontal-stack cards : - type : 'custom:swiss-army-knife-card' aspectratio : 1/1 entities : - entity : sensor.humidity name : Study layout : toolsets : - toolset : just-a-name position : cx : 50 cy : 50 tools : - type : circle position : cx : 50 cy : 50 radius : 45 styles : circle : stroke-width : 2em stroke : red stroke-opacity : 0.5 fill : bisque fill-opacity : 0.5 - type : icon position : cx : 50 cy : 25 align : center icon_size : 25 entity_index : 0 - type : state position : cx : 50 cy : 70 entity_index : 0 styles : state : font-size : 15em - type : name position : cx : 50 cy : 50 entity_index : 0 Step 10: Format the name \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 title : TUT-01-P1 path : tut-01-p1 panel : false cards : - type : vertical-stack cards : - type : horizontal-stack cards : - type : 'custom:swiss-army-knife-card' aspectratio : 1/1 entities : - entity : sensor.humidity name : Study layout : toolsets : - toolset : just-a-name position : cx : 50 cy : 50 tools : - type : circle position : cx : 50 cy : 50 radius : 45 styles : circle : stroke-width : 2em stroke : red stroke-opacity : 0.5 fill : bisque fill-opacity : 0.5 - type : icon position : cx : 50 cy : 25 align : center icon_size : 25 entity_index : 0 - type : state position : cx : 50 cy : 70 entity_index : 0 styles : state : font-size : 15em - type : name position : cx : 50 cy : 50 entity_index : 0 styles : name : font-size : 15em font-weight : 900 Done! \u00b6","title":"Part 1 - One Sensor/1"},{"location":"tutorials/10-step-tutorial-01-part1/#tutorial-1-part-1","text":"In this part, you will learn to make the following square card:![10-step-tutorial-01-part1-step-10]","title":"Tutorial #1, Part 1"},{"location":"tutorials/10-step-tutorial-01-part1/#step-1-create-the-yml-view-file","text":"Create view-tutorial-basic-series01-part1.yml in the lovelace/views/sak-tutorial-views/ folder. Add it to the sak-tutorials-dashboard.yaml in your root folder.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Step 1: Create the yml view file"},{"location":"tutorials/10-step-tutorial-01-part1/#step-2-define-the-view-basics","text":"1 2 3 4 5 6 7 8 title : TUT-01-P1 path : tut-01-p1 panel : false cards : - type : vertical-stack cards : - type : horizontal-stack cards :","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Step 2: define the view basics"},{"location":"tutorials/10-step-tutorial-01-part1/#step-3-define-a-square-card-with-1-entity","text":"You should replace the sensor.humidity with a sensor of your own. 1 2 3 4 5 6 7 8 9 10 11 12 13 title : TUT-01-P1 path : tut-01-p1 panel : false cards : - type : vertical-stack cards : - type : horizontal-stack cards : - type : 'custom:swiss-army-knife-card' aspectratio : 1/1 entities : - entity : sensor.humidity name : Study","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Step 3: Define a square card with 1 entity"},{"location":"tutorials/10-step-tutorial-01-part1/#step-4-add-the-layout-and-toolsets-part","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 title : TUT-01-P1 path : tut-01-p1 panel : false cards : - type : vertical-stack cards : - type : horizontal-stack cards : - type : 'custom:swiss-army-knife-card' aspectratio : 1/1 entities : - entity : sensor.humidity name : Study layout : toolsets : - toolset : just-a-name position : cx : 50 cy : 50 tools :","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Step 4: Add the layout and toolsets part"},{"location":"tutorials/10-step-tutorial-01-part1/#step-5-add-a-circle-tool","text":"Add a Circle tool centered on the card with a radius of 45. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 title : TUT-01-P1 path : tut-01-p1 panel : false cards : - type : vertical-stack cards : - type : horizontal-stack cards : - type : 'custom:swiss-army-knife-card' aspectratio : 1/1 entities : - entity : sensor.humidity name : Study layout : toolsets : - toolset : just-a-name position : cx : 50 cy : 50 tools : - type : circle position : cx : 50 cy : 50 radius : 45","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Step 5: Add a circle tool"},{"location":"tutorials/10-step-tutorial-01-part1/#step-6-make-the-circle-a-bit-reddish","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 title : TUT-01-P1 path : tut-01-p1 panel : false cards : - type : vertical-stack cards : - type : horizontal-stack cards : - type : 'custom:swiss-army-knife-card' aspectratio : 1/1 entities : - entity : sensor.humidity name : Study layout : toolsets : - toolset : just-a-name position : cx : 50 cy : 50 tools : - type : circle position : cx : 50 cy : 50 radius : 45 styles : circle : stroke-width : 2em stroke : red stroke-opacity : 0.5 fill : bisque fill-opacity : 0.5","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Step 6: Make the circle a bit reddish"},{"location":"tutorials/10-step-tutorial-01-part1/#step-7-add-an-icon","text":"Add an Entity Icon tool horizontally centered and vertically above the center and give it a size of 25 (25% of the 100x100 grid) and center it on that position. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 title : TUT-01-P1 path : tut-01-p1 panel : false cards : - type : vertical-stack cards : - type : horizontal-stack cards : - type : 'custom:swiss-army-knife-card' aspectratio : 1/1 entities : - entity : sensor.humidity name : Study layout : toolsets : - toolset : just-a-name position : cx : 50 cy : 50 tools : - type : circle position : cx : 50 cy : 50 radius : 45 styles : circle : stroke-width : 2em stroke : red stroke-opacity : 0.5 fill : bisque fill-opacity : 0.5 - type : icon position : cx : 50 cy : 25 align : center icon_size : 25 entity_index : 0","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Step 7: Add an icon"},{"location":"tutorials/10-step-tutorial-01-part1/#step-8-add-the-state","text":"Add an Entity State tool horizontally centered and vertically below the center and give it a font size of 15em (15% of the 100x100 grid). An entity state tool MUST have a font-size! 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 title : TUT-01-P1 path : tut-01-p1 panel : false cards : - type : vertical-stack cards : - type : horizontal-stack cards : - type : 'custom:swiss-army-knife-card' aspectratio : 1/1 entities : - entity : sensor.humidity name : Study layout : toolsets : - toolset : just-a-name position : cx : 50 cy : 50 tools : - type : circle position : cx : 50 cy : 50 radius : 45 styles : circle : stroke-width : 2em stroke : red stroke-opacity : 0.5 fill : bisque fill-opacity : 0.5 - type : icon position : cx : 50 cy : 25 align : center icon_size : 25 entity_index : 0 - type : state position : cx : 50 cy : 70 entity_index : 0 styles : state : font-size : 15em","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Step 8: Add the state"},{"location":"tutorials/10-step-tutorial-01-part1/#step-9-add-the-name","text":"Add an Entity Name tool horizontally and vertically centered. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 title : TUT-01-P1 path : tut-01-p1 panel : false cards : - type : vertical-stack cards : - type : horizontal-stack cards : - type : 'custom:swiss-army-knife-card' aspectratio : 1/1 entities : - entity : sensor.humidity name : Study layout : toolsets : - toolset : just-a-name position : cx : 50 cy : 50 tools : - type : circle position : cx : 50 cy : 50 radius : 45 styles : circle : stroke-width : 2em stroke : red stroke-opacity : 0.5 fill : bisque fill-opacity : 0.5 - type : icon position : cx : 50 cy : 25 align : center icon_size : 25 entity_index : 0 - type : state position : cx : 50 cy : 70 entity_index : 0 styles : state : font-size : 15em - type : name position : cx : 50 cy : 50 entity_index : 0","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Step 9: Add the name"},{"location":"tutorials/10-step-tutorial-01-part1/#step-10-format-the-name","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 title : TUT-01-P1 path : tut-01-p1 panel : false cards : - type : vertical-stack cards : - type : horizontal-stack cards : - type : 'custom:swiss-army-knife-card' aspectratio : 1/1 entities : - entity : sensor.humidity name : Study layout : toolsets : - toolset : just-a-name position : cx : 50 cy : 50 tools : - type : circle position : cx : 50 cy : 50 radius : 45 styles : circle : stroke-width : 2em stroke : red stroke-opacity : 0.5 fill : bisque fill-opacity : 0.5 - type : icon position : cx : 50 cy : 25 align : center icon_size : 25 entity_index : 0 - type : state position : cx : 50 cy : 70 entity_index : 0 styles : state : font-size : 15em - type : name position : cx : 50 cy : 50 entity_index : 0 styles : name : font-size : 15em font-weight : 900","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Step 10: Format the name"},{"location":"tutorials/10-step-tutorial-01-part1/#done","text":"","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Done!"},{"location":"tutorials/10-step-tutorial-01-part2/","tags":["Tutorials","10 Steps or less"],"text":"Tutorial #1, Part 2 \u00b6 In this tutorial, you will learn to make the following tall 1 by 2 card: By doing this, you learn something about toolset placement: We place tools on a different position on the card without changing the position of the tools itself, but just by moving the position of the overall toolset! Prerequisites \u00b6 Step 1: Create the yml view file \u00b6 Create view-tutorial-basic-series01-part2.yml in the lovelace/views/sak-tutorial-views/ folder. Add it to the sak-tutorials-dashboard.yaml in your root folder. Step 2: define the view basics \u00b6 1 2 3 4 5 6 7 8 title : TUT-01-P2 path : tut-01-p2 panel : false cards : - type : vertical-stack cards : - type : horizontal-stack cards : Step 3: Copy the previous tutorial result \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 title : TUT-01-P2 path : tut-01-p2 panel : false cards : - type : vertical-stack cards : - type : horizontal-stack cards : - type : 'custom:swiss-army-knife-card' aspectratio : 1/1 entities : - entity : sensor.humidity name : Study layout : toolsets : - toolset : just-a-name position : cx : 50 cy : 50 tools : - type : circle position : cx : 50 cy : 50 radius : 45 styles : circle : stroke-width : 2em stroke : red stroke-opacity : 0.5 fill : bisque fill-opacity : 0.5 - type : icon position : cx : 50 cy : 25 align : center icon_size : 25 entity_index : 0 - type : state position : cx : 50 cy : 70 entity_index : 0 styles : state : font-size : 15em - type : name position : cx : 50 cy : 50 entity_index : 0 styles : name : font-size : 15em font-weight : 900 Step 4: Change card aspect ratio to \u00bd \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 title : TUT-01-P2 path : tut-01-p2 panel : false cards : - type : vertical-stack cards : - type : horizontal-stack cards : - type : 'custom:swiss-army-knife-card' aspectratio : 1/2 entities : - entity : sensor.humidity name : Study layout : toolsets : - toolset : just-a-name position : cx : 50 cy : 50 tools : - type : circle position : cx : 50 cy : 50 radius : 45 styles : circle : stroke-width : 2em stroke : red stroke-opacity : 0.5 fill : bisque fill-opacity : 0.5 - type : icon position : cx : 50 cy : 25 align : center icon_size : 25 entity_index : 0 - type : state position : cx : 50 cy : 70 entity_index : 0 styles : state : font-size : 15em - type : name position : cx : 50 cy : 50 entity_index : 0 styles : name : font-size : 15em font-weight : 900 Step 5: Rename toolset to first \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 title : TUT-01-P2 path : tut-01-p2 panel : false cards : - type : vertical-stack cards : - type : horizontal-stack cards : - type : 'custom:swiss-army-knife-card' aspectratio : 1/2 entities : - entity : sensor.humidity name : Study layout : toolsets : - toolset : first position : cx : 50 cy : 50 tools : - type : circle position : cx : 50 cy : 50 radius : 45 styles : circle : stroke-width : 2em stroke : red stroke-opacity : 0.5 fill : bisque fill-opacity : 0.5 - type : icon position : cx : 50 cy : 25 align : center icon_size : 25 entity_index : 0 - type : state position : cx : 50 cy : 70 entity_index : 0 styles : state : font-size : 15em - type : name position : cx : 50 cy : 50 entity_index : 0 styles : name : font-size : 15em font-weight : 900 Step 6: Add second entity definition \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 title : TUT-01-P2 path : tut-01-p2 panel : false cards : - type : vertical-stack cards : - type : horizontal-stack cards : - type : 'custom:swiss-army-knife-card' aspectratio : 1/2 entities : - entity : sensor.humidity name : Study - entity : sensor.temperature name : Study layout : toolsets : - toolset : first position : cx : 50 cy : 50 tools : - type : circle position : cx : 50 cy : 50 radius : 45 styles : circle : stroke-width : 2em stroke : red stroke-opacity : 0.5 fill : bisque fill-opacity : 0.5 - type : icon position : cx : 50 cy : 25 align : center icon_size : 25 entity_index : 0 - type : state position : cx : 50 cy : 70 entity_index : 0 styles : state : font-size : 15em - type : name position : cx : 50 cy : 50 entity_index : 0 styles : name : font-size : 15em font-weight : 900 Step 7: Duplicate toolset and name it second \u00b6 Duplicate first toolset to create the identical second one. You won't see any difference on the card, as the two toolsets are exactly positioned on top of each other and display the exact same entity data. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 title : TUT-01-P2 path : tut-01-p2 panel : false cards : - type : vertical-stack cards : - type : horizontal-stack cards : - type : 'custom:swiss-army-knife-card' aspectratio : 1/2 entities : - entity : sensor.humidity name : Study - entity : sensor.temperature name : Study layout : toolsets : - toolset : first position : cx : 50 cy : 50 tools : - type : circle position : cx : 50 cy : 50 radius : 45 styles : circle : stroke-width : 2em stroke : red stroke-opacity : 0.5 fill : bisque fill-opacity : 0.5 - type : icon position : cx : 50 cy : 25 align : center icon_size : 25 entity_index : 0 - type : state position : cx : 50 cy : 70 entity_index : 0 styles : state : font-size : 15em - type : name position : cx : 50 cy : 50 entity_index : 0 styles : name : font-size : 15em font-weight : 900 - toolset : second position : cx : 50 cy : 50 tools : - type : circle position : cx : 50 cy : 50 radius : 45 styles : circle : stroke-width : 2em stroke : red stroke-opacity : 0.5 fill : bisque fill-opacity : 0.5 - type : icon position : cx : 50 cy : 25 align : center icon_size : 25 entity_index : 0 - type : state position : cx : 50 cy : 70 entity_index : 0 styles : state : font-size : 15em - type : name position : cx : 50 cy : 50 entity_index : 0 styles : name : font-size : 15em font-weight : 900 Step 8: connect second toolset to entity index 1 \u00b6 Connect second toolset to entity index 1. You will now see the two toolsets displayed over each other. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 title : TUT-01-P2 path : tut-01-p2 panel : false cards : - type : vertical-stack cards : - type : horizontal-stack cards : - type : 'custom:swiss-army-knife-card' aspectratio : 1/2 entities : - entity : sensor.humidity name : Study - entity : sensor.temperature name : Study layout : toolsets : - toolset : first position : cx : 50 cy : 50 tools : - type : circle position : cx : 50 cy : 50 radius : 45 styles : circle : stroke-width : 2em stroke : red stroke-opacity : 0.5 fill : bisque fill-opacity : 0.5 - type : icon position : cx : 50 cy : 25 align : center icon_size : 25 entity_index : 0 - type : state position : cx : 50 cy : 70 entity_index : 0 styles : state : font-size : 15em - type : name position : cx : 50 cy : 50 entity_index : 0 - toolset : second position : cx : 50 cy : 50 tools : - type : circle position : cx : 50 cy : 50 radius : 45 styles : circle : stroke-width : 2em stroke : red stroke-opacity : 0.5 fill : bisque fill-opacity : 0.5 - type : icon position : cx : 50 cy : 25 align : center icon_size : 25 entity_index : 1 - type : state position : cx : 50 cy : 70 entity_index : 1 styles : state : font-size : 15em - type : name position : cx : 50 cy : 50 entity_index : 1 styles : name : font-size : 15em font-weight : 900 Step 9: Position the second toolset \u00b6 Finally, position the second toolset below the first toolset. The center position is (50,150). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 title : TUT-01-P2 path : tut-01-p2 panel : false cards : - type : vertical-stack cards : - type : horizontal-stack cards : - type : 'custom:swiss-army-knife-card' aspectratio : 1/2 entities : - entity : sensor.humidity name : Study - entity : sensor.temperature name : Study layout : toolsets : - toolset : first position : cx : 50 cy : 50 tools : - type : circle position : cx : 50 cy : 50 radius : 45 styles : circle : stroke-width : 2em stroke : red stroke-opacity : 0.5 fill : bisque fill-opacity : 0.5 - type : icon position : cx : 50 cy : 25 align : center icon_size : 25 entity_index : 0 - type : state position : cx : 50 cy : 70 entity_index : 0 styles : state : font-size : 15em - type : name position : cx : 50 cy : 50 entity_index : 0 styles : name : font-size : 15em font-weight : 900 - toolset : second position : cx : 50 cy : 150 tools : - type : circle position : cx : 50 cy : 50 radius : 45 styles : circle : stroke-width : 2em stroke : red stroke-opacity : 0.5 fill : bisque fill-opacity : 0.5 - type : icon position : cx : 50 cy : 25 align : center icon_size : 25 entity_index : 1 - type : state position : cx : 50 cy : 70 entity_index : 1 styles : state : font-size : 15em - type : name position : cx : 50 cy : 50 entity_index : 1 styles : name : font-size : 15em font-weight : 900 Done! \u00b6","title":"Part 2 - Two Sensors/1"},{"location":"tutorials/10-step-tutorial-01-part2/#tutorial-1-part-2","text":"In this tutorial, you will learn to make the following tall 1 by 2 card: By doing this, you learn something about toolset placement: We place tools on a different position on the card without changing the position of the tools itself, but just by moving the position of the overall toolset!","title":"Tutorial #1, Part 2"},{"location":"tutorials/10-step-tutorial-01-part2/#prerequisites","text":"","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Prerequisites"},{"location":"tutorials/10-step-tutorial-01-part2/#step-1-create-the-yml-view-file","text":"Create view-tutorial-basic-series01-part2.yml in the lovelace/views/sak-tutorial-views/ folder. Add it to the sak-tutorials-dashboard.yaml in your root folder.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Step 1: Create the yml view file"},{"location":"tutorials/10-step-tutorial-01-part2/#step-2-define-the-view-basics","text":"1 2 3 4 5 6 7 8 title : TUT-01-P2 path : tut-01-p2 panel : false cards : - type : vertical-stack cards : - type : horizontal-stack cards :","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Step 2: define the view basics"},{"location":"tutorials/10-step-tutorial-01-part2/#step-3-copy-the-previous-tutorial-result","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 title : TUT-01-P2 path : tut-01-p2 panel : false cards : - type : vertical-stack cards : - type : horizontal-stack cards : - type : 'custom:swiss-army-knife-card' aspectratio : 1/1 entities : - entity : sensor.humidity name : Study layout : toolsets : - toolset : just-a-name position : cx : 50 cy : 50 tools : - type : circle position : cx : 50 cy : 50 radius : 45 styles : circle : stroke-width : 2em stroke : red stroke-opacity : 0.5 fill : bisque fill-opacity : 0.5 - type : icon position : cx : 50 cy : 25 align : center icon_size : 25 entity_index : 0 - type : state position : cx : 50 cy : 70 entity_index : 0 styles : state : font-size : 15em - type : name position : cx : 50 cy : 50 entity_index : 0 styles : name : font-size : 15em font-weight : 900","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Step 3: Copy the previous tutorial result"},{"location":"tutorials/10-step-tutorial-01-part2/#step-4-change-card-aspect-ratio-to-12","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 title : TUT-01-P2 path : tut-01-p2 panel : false cards : - type : vertical-stack cards : - type : horizontal-stack cards : - type : 'custom:swiss-army-knife-card' aspectratio : 1/2 entities : - entity : sensor.humidity name : Study layout : toolsets : - toolset : just-a-name position : cx : 50 cy : 50 tools : - type : circle position : cx : 50 cy : 50 radius : 45 styles : circle : stroke-width : 2em stroke : red stroke-opacity : 0.5 fill : bisque fill-opacity : 0.5 - type : icon position : cx : 50 cy : 25 align : center icon_size : 25 entity_index : 0 - type : state position : cx : 50 cy : 70 entity_index : 0 styles : state : font-size : 15em - type : name position : cx : 50 cy : 50 entity_index : 0 styles : name : font-size : 15em font-weight : 900","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Step 4: Change card aspect ratio to 1/2"},{"location":"tutorials/10-step-tutorial-01-part2/#step-5-rename-toolset-to-first","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 title : TUT-01-P2 path : tut-01-p2 panel : false cards : - type : vertical-stack cards : - type : horizontal-stack cards : - type : 'custom:swiss-army-knife-card' aspectratio : 1/2 entities : - entity : sensor.humidity name : Study layout : toolsets : - toolset : first position : cx : 50 cy : 50 tools : - type : circle position : cx : 50 cy : 50 radius : 45 styles : circle : stroke-width : 2em stroke : red stroke-opacity : 0.5 fill : bisque fill-opacity : 0.5 - type : icon position : cx : 50 cy : 25 align : center icon_size : 25 entity_index : 0 - type : state position : cx : 50 cy : 70 entity_index : 0 styles : state : font-size : 15em - type : name position : cx : 50 cy : 50 entity_index : 0 styles : name : font-size : 15em font-weight : 900","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Step 5: Rename toolset to first"},{"location":"tutorials/10-step-tutorial-01-part2/#step-6-add-second-entity-definition","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 title : TUT-01-P2 path : tut-01-p2 panel : false cards : - type : vertical-stack cards : - type : horizontal-stack cards : - type : 'custom:swiss-army-knife-card' aspectratio : 1/2 entities : - entity : sensor.humidity name : Study - entity : sensor.temperature name : Study layout : toolsets : - toolset : first position : cx : 50 cy : 50 tools : - type : circle position : cx : 50 cy : 50 radius : 45 styles : circle : stroke-width : 2em stroke : red stroke-opacity : 0.5 fill : bisque fill-opacity : 0.5 - type : icon position : cx : 50 cy : 25 align : center icon_size : 25 entity_index : 0 - type : state position : cx : 50 cy : 70 entity_index : 0 styles : state : font-size : 15em - type : name position : cx : 50 cy : 50 entity_index : 0 styles : name : font-size : 15em font-weight : 900","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Step 6: Add second entity definition"},{"location":"tutorials/10-step-tutorial-01-part2/#step-7-duplicate-toolset-and-name-it-second","text":"Duplicate first toolset to create the identical second one. You won't see any difference on the card, as the two toolsets are exactly positioned on top of each other and display the exact same entity data. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 title : TUT-01-P2 path : tut-01-p2 panel : false cards : - type : vertical-stack cards : - type : horizontal-stack cards : - type : 'custom:swiss-army-knife-card' aspectratio : 1/2 entities : - entity : sensor.humidity name : Study - entity : sensor.temperature name : Study layout : toolsets : - toolset : first position : cx : 50 cy : 50 tools : - type : circle position : cx : 50 cy : 50 radius : 45 styles : circle : stroke-width : 2em stroke : red stroke-opacity : 0.5 fill : bisque fill-opacity : 0.5 - type : icon position : cx : 50 cy : 25 align : center icon_size : 25 entity_index : 0 - type : state position : cx : 50 cy : 70 entity_index : 0 styles : state : font-size : 15em - type : name position : cx : 50 cy : 50 entity_index : 0 styles : name : font-size : 15em font-weight : 900 - toolset : second position : cx : 50 cy : 50 tools : - type : circle position : cx : 50 cy : 50 radius : 45 styles : circle : stroke-width : 2em stroke : red stroke-opacity : 0.5 fill : bisque fill-opacity : 0.5 - type : icon position : cx : 50 cy : 25 align : center icon_size : 25 entity_index : 0 - type : state position : cx : 50 cy : 70 entity_index : 0 styles : state : font-size : 15em - type : name position : cx : 50 cy : 50 entity_index : 0 styles : name : font-size : 15em font-weight : 900","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Step 7: Duplicate toolset and name it second"},{"location":"tutorials/10-step-tutorial-01-part2/#step-8-connect-second-toolset-to-entity-index-1","text":"Connect second toolset to entity index 1. You will now see the two toolsets displayed over each other. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 title : TUT-01-P2 path : tut-01-p2 panel : false cards : - type : vertical-stack cards : - type : horizontal-stack cards : - type : 'custom:swiss-army-knife-card' aspectratio : 1/2 entities : - entity : sensor.humidity name : Study - entity : sensor.temperature name : Study layout : toolsets : - toolset : first position : cx : 50 cy : 50 tools : - type : circle position : cx : 50 cy : 50 radius : 45 styles : circle : stroke-width : 2em stroke : red stroke-opacity : 0.5 fill : bisque fill-opacity : 0.5 - type : icon position : cx : 50 cy : 25 align : center icon_size : 25 entity_index : 0 - type : state position : cx : 50 cy : 70 entity_index : 0 styles : state : font-size : 15em - type : name position : cx : 50 cy : 50 entity_index : 0 - toolset : second position : cx : 50 cy : 50 tools : - type : circle position : cx : 50 cy : 50 radius : 45 styles : circle : stroke-width : 2em stroke : red stroke-opacity : 0.5 fill : bisque fill-opacity : 0.5 - type : icon position : cx : 50 cy : 25 align : center icon_size : 25 entity_index : 1 - type : state position : cx : 50 cy : 70 entity_index : 1 styles : state : font-size : 15em - type : name position : cx : 50 cy : 50 entity_index : 1 styles : name : font-size : 15em font-weight : 900","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Step 8: connect second toolset to entity index 1"},{"location":"tutorials/10-step-tutorial-01-part2/#step-9-position-the-second-toolset","text":"Finally, position the second toolset below the first toolset. The center position is (50,150). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 title : TUT-01-P2 path : tut-01-p2 panel : false cards : - type : vertical-stack cards : - type : horizontal-stack cards : - type : 'custom:swiss-army-knife-card' aspectratio : 1/2 entities : - entity : sensor.humidity name : Study - entity : sensor.temperature name : Study layout : toolsets : - toolset : first position : cx : 50 cy : 50 tools : - type : circle position : cx : 50 cy : 50 radius : 45 styles : circle : stroke-width : 2em stroke : red stroke-opacity : 0.5 fill : bisque fill-opacity : 0.5 - type : icon position : cx : 50 cy : 25 align : center icon_size : 25 entity_index : 0 - type : state position : cx : 50 cy : 70 entity_index : 0 styles : state : font-size : 15em - type : name position : cx : 50 cy : 50 entity_index : 0 styles : name : font-size : 15em font-weight : 900 - toolset : second position : cx : 50 cy : 150 tools : - type : circle position : cx : 50 cy : 50 radius : 45 styles : circle : stroke-width : 2em stroke : red stroke-opacity : 0.5 fill : bisque fill-opacity : 0.5 - type : icon position : cx : 50 cy : 25 align : center icon_size : 25 entity_index : 1 - type : state position : cx : 50 cy : 70 entity_index : 1 styles : state : font-size : 15em - type : name position : cx : 50 cy : 50 entity_index : 1 styles : name : font-size : 15em font-weight : 900","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Step 9: Position the second toolset"},{"location":"tutorials/10-step-tutorial-01-part2/#done","text":"","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Done!"},{"location":"tutorials/10-step-tutorial-01-part3/","tags":["Tutorials","10 Steps or less"],"text":"Tutorial #1, Part 3 \u00b6 In this tutorial, you will learn how to create a Swiss Army Knife toolset template from the toolset created in part 1 and to define and use template variables. Prerequisites \u00b6 Step 1: Create the yaml template file \u00b6 Create toolset-tutorial-basic-01-part3-template.yaml in the lovelace/sak_templates/templates/toolsets/ folder. The template is automatically included once you force a refresh of Lovelace. Step 2: define the template basics \u00b6 1 2 3 toolset_tutorial_basic_03 : template : type : toolset Step 3: Add defaults for the variables we can pass to the template \u00b6 1 2 3 4 5 6 7 8 toolset_tutorial_basic_03 : template : type : toolset defaults : - var_entity_index : 0 - var_toolset_position_cx : 50 - var_toolset_position_cy : 50 toolset : Step 4: Remember tutorial 1? \u00b6 This is the yml file we created earlier! Actions: Select and copy the toolset part. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 title : TUT-01-P1 path : tut-01-p1 panel : false cards : - type : vertical-stack cards : - type : horizontal-stack cards : - type : 'custom:swiss-army-knife-card' aspectratio : 1/1 entities : - entity : sensor.humidity name : Study layout : toolsets : - toolset : just-a-name position : cx : 50 cy : 50 tools : - type : circle position : cx : 50 cy : 50 radius : 45 styles : circle : stroke-width : 2em stroke : red stroke-opacity : 0.5 fill : bisque fill-opacity : 0.5 - type : icon position : cx : 50 cy : 25 align : center icon_size : 25 entity_index : 0 - type : state position : cx : 50 cy : 70 entity_index : 0 styles : state : font-size : 15em - type : name position : cx : 50 cy : 50 entity_index : 0 styles : name : font-size : 15em font-weight : 900 Step 5: Copy toolset part to template and take care of indentation \u00b6 Actions: Copy the selected YAML code in Step 4 into this file. Remove the dash before toolset, as this is not an array anymore (single toolset, not toolsets) Shift all to the left to get the correct YAML indentation. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 toolset_tutorial_01_part3 : template : type : toolset defaults : - var_entity_index : 0 - var_toolset_position_cx : 50 - var_toolset_position_cy : 50 toolset : toolset : just-a-name position : cx : 50 cy : 50 tools : - type : circle position : cx : 50 cy : 50 radius : 45 styles : circle : stroke-width : 2em stroke : red stroke-opacity : 0.5 fill : bisque fill-opacity : 0.5 - type : icon position : cx : 50 cy : 25 align : center icon_size : 25 entity_index : 0 - type : state position : cx : 50 cy : 70 entity_index : 0 styles : state : font-size : 15em - type : name position : cx : 50 cy : 50 entity_index : 0 styles : name : font-size : 15em font-weight : 900 Step 6: Rename toolset name \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 toolset_tutorial_01_part3 : template : type : toolset defaults : - var_entity_index : 0 - var_toolset_position_cx : 50 - var_toolset_position_cy : 50 toolset : toolset : tutorial-basic-01-part3 position : cx : 50 cy : 50 tools : - type : circle position : cx : 50 cy : 50 radius : 45 styles : circle : stroke-width : 2em stroke : red stroke-opacity : 0.5 fill : bisque fill-opacity : 0.5 - type : icon position : cx : 50 cy : 25 align : center icon_size : 25 entity_index : 0 - type : state position : cx : 50 cy : 70 entity_index : 0 styles : state : font-size : 15em - type : name position : cx : 50 cy : 50 entity_index : 0 styles : name : font-size : 15em font-weight : 900 Step 7: Use variables for the toolset position \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 toolset_tutorial_01_part3 : template : type : toolset defaults : - var_entity_index : 0 - var_toolset_position_cx : 50 - var_toolset_position_cy : 50 toolset : toolset : tutorial-basic-01-part3 position : cx : '[[var_toolset_position_cx]]' cy : '[[var_toolset_position_cy]]' tools : - type : circle position : cx : 50 cy : 50 radius : 45 styles : circle : stroke-width : 2em stroke : red stroke-opacity : 0.5 fill : bisque fill-opacity : 0.5 - type : icon position : cx : 50 cy : 25 align : center icon_size : 25 entity_index : 0 - type : state position : cx : 50 cy : 70 entity_index : 0 styles : state : font-size : 15em - type : name position : cx : 50 cy : 50 entity_index : 0 styles : name : font-size : 15em font-weight : 900 Step 8: use variable for the entity \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 toolset_tutorial_01_part3 : template : type : toolset defaults : - var_entity_index : 0 - var_toolset_position_cx : 50 - var_toolset_position_cy : 50 toolset : toolset : tutorial-basic-01-part3 position : cx : '[[var_toolset_position_cx]]' cy : '[[var_toolset_position_cy]]' tools : - type : circle position : cx : 50 cy : 50 radius : 45 styles : circle : stroke-width : 2em stroke : red stroke-opacity : 0.5 fill : bisque fill-opacity : 0.5 - type : icon position : cx : 50 cy : 25 align : center icon_size : 25 entity_index : '[[var_entity_index]]' - type : state position : cx : 50 cy : 70 entity_index : '[[var_entity_index]]' styles : state : font-size : 15em - type : name position : cx : 50 cy : 50 entity_index : '[[var_entity_index]]' styles : name : font-size : 15em font-weight : 900 Done! \u00b6","title":"Part 3 - One Sensor/2"},{"location":"tutorials/10-step-tutorial-01-part3/#tutorial-1-part-3","text":"In this tutorial, you will learn how to create a Swiss Army Knife toolset template from the toolset created in part 1 and to define and use template variables.","title":"Tutorial #1, Part 3"},{"location":"tutorials/10-step-tutorial-01-part3/#prerequisites","text":"","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Prerequisites"},{"location":"tutorials/10-step-tutorial-01-part3/#step-1-create-the-yaml-template-file","text":"Create toolset-tutorial-basic-01-part3-template.yaml in the lovelace/sak_templates/templates/toolsets/ folder. The template is automatically included once you force a refresh of Lovelace.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Step 1: Create the yaml template file"},{"location":"tutorials/10-step-tutorial-01-part3/#step-2-define-the-template-basics","text":"1 2 3 toolset_tutorial_basic_03 : template : type : toolset","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Step 2: define the template basics"},{"location":"tutorials/10-step-tutorial-01-part3/#step-3-add-defaults-for-the-variables-we-can-pass-to-the-template","text":"1 2 3 4 5 6 7 8 toolset_tutorial_basic_03 : template : type : toolset defaults : - var_entity_index : 0 - var_toolset_position_cx : 50 - var_toolset_position_cy : 50 toolset :","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Step 3: Add defaults for the variables we can pass to the template"},{"location":"tutorials/10-step-tutorial-01-part3/#step-4-remember-tutorial-1","text":"This is the yml file we created earlier! Actions: Select and copy the toolset part. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 title : TUT-01-P1 path : tut-01-p1 panel : false cards : - type : vertical-stack cards : - type : horizontal-stack cards : - type : 'custom:swiss-army-knife-card' aspectratio : 1/1 entities : - entity : sensor.humidity name : Study layout : toolsets : - toolset : just-a-name position : cx : 50 cy : 50 tools : - type : circle position : cx : 50 cy : 50 radius : 45 styles : circle : stroke-width : 2em stroke : red stroke-opacity : 0.5 fill : bisque fill-opacity : 0.5 - type : icon position : cx : 50 cy : 25 align : center icon_size : 25 entity_index : 0 - type : state position : cx : 50 cy : 70 entity_index : 0 styles : state : font-size : 15em - type : name position : cx : 50 cy : 50 entity_index : 0 styles : name : font-size : 15em font-weight : 900","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Step 4: Remember tutorial 1?"},{"location":"tutorials/10-step-tutorial-01-part3/#step-5-copy-toolset-part-to-template-and-take-care-of-indentation","text":"Actions: Copy the selected YAML code in Step 4 into this file. Remove the dash before toolset, as this is not an array anymore (single toolset, not toolsets) Shift all to the left to get the correct YAML indentation. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 toolset_tutorial_01_part3 : template : type : toolset defaults : - var_entity_index : 0 - var_toolset_position_cx : 50 - var_toolset_position_cy : 50 toolset : toolset : just-a-name position : cx : 50 cy : 50 tools : - type : circle position : cx : 50 cy : 50 radius : 45 styles : circle : stroke-width : 2em stroke : red stroke-opacity : 0.5 fill : bisque fill-opacity : 0.5 - type : icon position : cx : 50 cy : 25 align : center icon_size : 25 entity_index : 0 - type : state position : cx : 50 cy : 70 entity_index : 0 styles : state : font-size : 15em - type : name position : cx : 50 cy : 50 entity_index : 0 styles : name : font-size : 15em font-weight : 900","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Step 5: Copy toolset part to template and take care of indentation"},{"location":"tutorials/10-step-tutorial-01-part3/#step-6-rename-toolset-name","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 toolset_tutorial_01_part3 : template : type : toolset defaults : - var_entity_index : 0 - var_toolset_position_cx : 50 - var_toolset_position_cy : 50 toolset : toolset : tutorial-basic-01-part3 position : cx : 50 cy : 50 tools : - type : circle position : cx : 50 cy : 50 radius : 45 styles : circle : stroke-width : 2em stroke : red stroke-opacity : 0.5 fill : bisque fill-opacity : 0.5 - type : icon position : cx : 50 cy : 25 align : center icon_size : 25 entity_index : 0 - type : state position : cx : 50 cy : 70 entity_index : 0 styles : state : font-size : 15em - type : name position : cx : 50 cy : 50 entity_index : 0 styles : name : font-size : 15em font-weight : 900","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Step 6: Rename toolset name"},{"location":"tutorials/10-step-tutorial-01-part3/#step-7-use-variables-for-the-toolset-position","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 toolset_tutorial_01_part3 : template : type : toolset defaults : - var_entity_index : 0 - var_toolset_position_cx : 50 - var_toolset_position_cy : 50 toolset : toolset : tutorial-basic-01-part3 position : cx : '[[var_toolset_position_cx]]' cy : '[[var_toolset_position_cy]]' tools : - type : circle position : cx : 50 cy : 50 radius : 45 styles : circle : stroke-width : 2em stroke : red stroke-opacity : 0.5 fill : bisque fill-opacity : 0.5 - type : icon position : cx : 50 cy : 25 align : center icon_size : 25 entity_index : 0 - type : state position : cx : 50 cy : 70 entity_index : 0 styles : state : font-size : 15em - type : name position : cx : 50 cy : 50 entity_index : 0 styles : name : font-size : 15em font-weight : 900","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Step 7: Use variables for the toolset position"},{"location":"tutorials/10-step-tutorial-01-part3/#step-8-use-variable-for-the-entity","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 toolset_tutorial_01_part3 : template : type : toolset defaults : - var_entity_index : 0 - var_toolset_position_cx : 50 - var_toolset_position_cy : 50 toolset : toolset : tutorial-basic-01-part3 position : cx : '[[var_toolset_position_cx]]' cy : '[[var_toolset_position_cy]]' tools : - type : circle position : cx : 50 cy : 50 radius : 45 styles : circle : stroke-width : 2em stroke : red stroke-opacity : 0.5 fill : bisque fill-opacity : 0.5 - type : icon position : cx : 50 cy : 25 align : center icon_size : 25 entity_index : '[[var_entity_index]]' - type : state position : cx : 50 cy : 70 entity_index : '[[var_entity_index]]' styles : state : font-size : 15em - type : name position : cx : 50 cy : 50 entity_index : '[[var_entity_index]]' styles : name : font-size : 15em font-weight : 900","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Step 8: use variable for the entity"},{"location":"tutorials/10-step-tutorial-01-part3/#done","text":"","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Done!"},{"location":"tutorials/10-step-tutorial-01-part4/","tags":["Tutorials","10 Steps or less"],"text":"Tutorial #1, Part 4 \u00b6 In this tutorial, you will learn how to create a Swiss Army Knife toolset template from the toolset created in Part 3 . By doing this, you learn something about how to use a toolset template and variables. Prerequisites \u00b6 Step 1: Create the yml view file \u00b6 Create view-tutorial-basic-series01-part4.yml in the lovelace/views/sak-tutorial-views/ folder. Add it to the sak-tutorials-dashboard.yaml in your root folder. Step 2: define the view basics \u00b6 1 2 3 4 5 6 7 8 title : TUT-01-P4 path : tut-01-p4 panel : false cards : - type : vertical-stack cards : - type : horizontal-stack cards : Step 3: Define card, entities and layout structure \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 title : TUT-01-P4 path : tut-01-p4 panel : false cards : - type : vertical-stack cards : - type : horizontal-stack cards : - type : 'custom:swiss-army-knife-card' aspectratio : 1/2 entities : - entity : sensor.humidity name : Study - entity : sensor.temperature name : Study layout : toolsets : Step 4: Add first toolset using the template \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 title : TUT-01-P4 path : tut-01-p4 panel : false cards : - type : vertical-stack cards : - type : horizontal-stack cards : - type : 'custom:swiss-army-knife-card' aspectratio : 1/2 entities : - entity : sensor.humidity name : Study - entity : sensor.temperature name : Study layout : toolsets : - toolset : first template : name : toolset_tutorial_01_part3 variables : - var_entity_index : 0 Step 5: Add second toolset using the template \u00b6 Actions: Add second template Pass entity index 1 as a variable Pass the new toolset cy position as a variable 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 title : TUT-01-P4 path : tut-01-p4 panel : false cards : - type : vertical-stack cards : - type : horizontal-stack cards : - type : 'custom:swiss-army-knife-card' aspectratio : 1/2 entities : - entity : sensor.humidity name : Study - entity : sensor.temperature name : Study layout : toolsets : - toolset : first template : name : toolset_tutorial_01_part3 variables : - var_entity_index : 0 - toolset : second template : name : toolset_tutorial_01_part3 variables : - var_entity_index : 1 - var_toolset_position_cy : 150 Done! \u00b6","title":"Part 4 - Two Sensors/2"},{"location":"tutorials/10-step-tutorial-01-part4/#tutorial-1-part-4","text":"In this tutorial, you will learn how to create a Swiss Army Knife toolset template from the toolset created in Part 3 . By doing this, you learn something about how to use a toolset template and variables.","title":"Tutorial #1, Part 4"},{"location":"tutorials/10-step-tutorial-01-part4/#prerequisites","text":"","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Prerequisites"},{"location":"tutorials/10-step-tutorial-01-part4/#step-1-create-the-yml-view-file","text":"Create view-tutorial-basic-series01-part4.yml in the lovelace/views/sak-tutorial-views/ folder. Add it to the sak-tutorials-dashboard.yaml in your root folder.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Step 1: Create the yml view file"},{"location":"tutorials/10-step-tutorial-01-part4/#step-2-define-the-view-basics","text":"1 2 3 4 5 6 7 8 title : TUT-01-P4 path : tut-01-p4 panel : false cards : - type : vertical-stack cards : - type : horizontal-stack cards :","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Step 2: define the view basics"},{"location":"tutorials/10-step-tutorial-01-part4/#step-3-define-card-entities-and-layout-structure","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 title : TUT-01-P4 path : tut-01-p4 panel : false cards : - type : vertical-stack cards : - type : horizontal-stack cards : - type : 'custom:swiss-army-knife-card' aspectratio : 1/2 entities : - entity : sensor.humidity name : Study - entity : sensor.temperature name : Study layout : toolsets :","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Step 3: Define card, entities and layout structure"},{"location":"tutorials/10-step-tutorial-01-part4/#step-4-add-first-toolset-using-the-template","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 title : TUT-01-P4 path : tut-01-p4 panel : false cards : - type : vertical-stack cards : - type : horizontal-stack cards : - type : 'custom:swiss-army-knife-card' aspectratio : 1/2 entities : - entity : sensor.humidity name : Study - entity : sensor.temperature name : Study layout : toolsets : - toolset : first template : name : toolset_tutorial_01_part3 variables : - var_entity_index : 0","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Step 4: Add first toolset using the template"},{"location":"tutorials/10-step-tutorial-01-part4/#step-5-add-second-toolset-using-the-template","text":"Actions: Add second template Pass entity index 1 as a variable Pass the new toolset cy position as a variable 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 title : TUT-01-P4 path : tut-01-p4 panel : false cards : - type : vertical-stack cards : - type : horizontal-stack cards : - type : 'custom:swiss-army-knife-card' aspectratio : 1/2 entities : - entity : sensor.humidity name : Study - entity : sensor.temperature name : Study layout : toolsets : - toolset : first template : name : toolset_tutorial_01_part3 variables : - var_entity_index : 0 - toolset : second template : name : toolset_tutorial_01_part3 variables : - var_entity_index : 1 - var_toolset_position_cy : 150","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Step 5: Add second toolset using the template"},{"location":"tutorials/10-step-tutorial-01-part4/#done","text":"","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Done!"},{"location":"tutorials/10-step-tutorial-02-intro/","tags":["Tutorials","10 Steps or less"],"text":"Tutorial #3, Introduction \u00b6 Skill Level / Required Knowledge \u00b6 ... Contents \u00b6 In this tutorial series, you will learn the following: Recreate the advanced wide server statistics card from example 12 Create a template with variables from the segmented arc / icon / state toolset Use the template to visualize the server statistics See how much YAML it saves by using SAK toolset templates Prerequisites \u00b6 To follow this tutorial, the following is required: All tutorials are created in the \"Swiss Army Knife Tutorials\" dashboard. You already should have included that one in your Lovelace configuration. This tutorial requires a Material 3 theme.","title":"Wide cards Example 12"},{"location":"tutorials/10-step-tutorial-02-intro/#tutorial-3-introduction","text":"","title":"Tutorial #3, Introduction"},{"location":"tutorials/10-step-tutorial-02-intro/#skill-level-required-knowledge","text":"...","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Skill Level / Required Knowledge"},{"location":"tutorials/10-step-tutorial-02-intro/#contents","text":"In this tutorial series, you will learn the following: Recreate the advanced wide server statistics card from example 12 Create a template with variables from the segmented arc / icon / state toolset Use the template to visualize the server statistics See how much YAML it saves by using SAK toolset templates","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Contents"},{"location":"tutorials/10-step-tutorial-02-intro/#prerequisites","text":"To follow this tutorial, the following is required: All tutorials are created in the \"Swiss Army Knife Tutorials\" dashboard. You already should have included that one in your Lovelace configuration. This tutorial requires a Material 3 theme.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Prerequisites"},{"location":"tutorials/10-step-tutorial-02-part1/","tags":["Tutorials","10 Steps or less"],"text":"Tutorial #2, Part 1 \u00b6 In this tutorial, we are going to make the following wide card: Such a card is part of Example 12 . But as opposed to the example, we will create a toolset template for the 4 segmented arcs with icon and state displayed. So the result of the tutorial is in fact better than the original! And much shorter due to the use of templates. Prerequisites \u00b6 This tutorial requires: An active Material 3 theme Step 1: Create the yml view file \u00b6 Create view-tutorial-02-part1.yml in the lovelace/views/sak-tutorial-views/ folder. Add it to the sak-tutorials-dashboard.yaml in your root folder. Step 2: Define the view basics, card, entities and layout \u00b6 We are going to use 5 entities from the System Monitor integration. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 title : TUT-02-P1 path : tut-02-p1 panel : false cards : - type : vertical-stack cards : - type : horizontal-stack cards : - type : 'custom:swiss-army-knife-card' entities : # CPU - entity : sensor.processor_use decimals : 0 name : 'Hestia' # Memory - entity : sensor.memory_use_percent icon : mdi:memory decimals : 0 # Disk - entity : sensor.disk_use_percent decimals : 0 icon : mdi:harddisk # System Load - entity : sensor.load_1m decimals : 2 unit : '1m' # Last changed - entity : sensor.processor_use secondary_info : last_changed format : relative # Define aspect ratio aspectratio : 6/1 Step 3: Header, first column \u00b6 The header is divided into three columns: the half circle with the icon, then the name and the state, and in the last header column the vertical line. Define the first column of the header: half a circle, which is in fact a full circle but clipped by the card due to our positioning the circles center at the card's edge. a fixed icon 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 title : TUT-02-P1 path : tut-02-p1 panel : false cards : - type : vertical-stack cards : - type : horizontal-stack cards : - type : 'custom:swiss-army-knife-card' entities : # Removed for brevity! # Define aspect ratio aspectratio : 6/1 layout : toolsets : # ================================================================ - toolset : half-circle position : cx : 0 cy : 50 tools : # ------------------------------------------------------------ - type : circle position : cx : 50 cy : 50 radius : 50 styles : circle : stroke : none fill : var(--theme-sys-palette-primary30) # ================================================================ - toolset : colomn-icon position : cx : 30 cy : 50 tools : # ------------------------------------------------------------ - type : icon position : cx : 50 cy : 50 align : center icon_size : 30 icon : mdi:server-network styles : icon : fill : var(--primary-background-color) opacity : 0.9 Step 4: Header, second column \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 title : TUT-02-P1 path : tut-02-p1 panel : false cards : - type : vertical-stack cards : - type : horizontal-stack cards : - type : 'custom:swiss-army-knife-card' entities : # Removed for brevity! # Define aspect ratio aspectratio : 6/1 layout : toolsets : # ================================================================ - toolset : half-circle # Removed for brevity! # ================================================================ - toolset : colomn-icon # Removed for brevity! # ================================================================ - toolset : colomn-name position : cx : 120 cy : 50 tools : # ------------------------------------------------------------ - type : name position : cx : 50 cy : 50 entity_index : 0 styles : name : text-anchor : middle font-size : 25em font-weight : 700 opacity : 1 # ------------------------------------------------------------ - type : state position : cx : 50 cy : 80 entity_index : 4 show : uom : none styles : state : text-anchor : middle font-size : 14em font-weight : 500 Step 5: Header, third column \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 title : TUT-02-P1 path : tut-02-p1 panel : false cards : - type : vertical-stack cards : - type : horizontal-stack cards : - type : 'custom:swiss-army-knife-card' entities : # Removed for brevity! # Define aspect ratio aspectratio : 6/1 layout : toolsets : # ================================================================ - toolset : half-circle # Removed for brevity! # ================================================================ - toolset : colomn-icon # Removed for brevity! # ================================================================ - toolset : colomn-name # Removed for brevity! # ================================================================ - toolset : line1 position : cx : 200 cy : 50 tools : # ------------------------------------------------------------ - type : line position : cx : 50 cy : 50 orientation : vertical length : 50 styles : line : fill : var(--primary-text-color) opacity : 0.5 Step 6: Add segmented arc as part of the segarc, icon, state toolset \u00b6 We design the toolset with a segmented arc tool , icon tool and state tool in this card before converting it to a toolset template. The segarc consists of 4 segments, each having a slightly different primary Material 3 theme color. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 title : TUT-02-P1 path : tut-02-p1 panel : false cards : - type : vertical-stack cards : - type : horizontal-stack cards : - type : 'custom:swiss-army-knife-card' entities : # Removed for brevity! # Define aspect ratio aspectratio : 6/1 layout : toolsets : # ================================================================ - toolset : half-circle # Removed for brevity! # ================================================================ - toolset : colomn-icon # Removed for brevity! # ================================================================ - toolset : colomn-name # Removed for brevity! # ================================================================ - toolset : line1 # Removed for brevity! # ================================================================ - toolset : colomn-cpu position : cx : 260 cy : 50 tools : # -------------------------------------------------------------- - type : 'segarc' id : 0 position : cx : 50 cy : 50 start_angle : 0 end_angle : 360 width : 6 radius : 40 entity_index : 0 scale : min : 0 max : 100 width : 6 offset : 12 show : scale : false style : 'colorlist' segments : colorlist : gap : 1 colors : - var(--theme-sys-palette-primary50) - var(--theme-sys-palette-primary45) - var(--theme-sys-palette-primary40) - var(--theme-sys-palette-primary35) styles : foreground : fill : darkgrey background : fill : var(--theme-sys-elevation-surface-neutral4) opacity : 1 Step 7: Add icon as part of the segarc, icon, state toolset \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 title : TUT-02-P1 path : tut-02-p1 panel : false cards : - type : vertical-stack cards : - type : horizontal-stack cards : - type : 'custom:swiss-army-knife-card' entities : # Removed for brevity! # Define aspect ratio aspectratio : 6/1 layout : toolsets : # ================================================================ - toolset : half-circle # Removed for brevity! # ================================================================ - toolset : colomn-icon # Removed for brevity! # ================================================================ - toolset : colomn-name # Removed for brevity! # ================================================================ - toolset : line1 # Removed for brevity! # ================================================================ - toolset : colomn-cpu position : cx : 260 cy : 50 tools : # -------------------------------------------------------------- - type : 'segarc' id : 0 position : cx : 50 cy : 50 start_angle : 0 end_angle : 360 width : 6 radius : 40 entity_index : 0 scale : min : 0 max : 100 width : 6 offset : 12 show : scale : false style : 'colorlist' segments : colorlist : gap : 1 colors : - var(--theme-sys-palette-primary50) - var(--theme-sys-palette-primary45) - var(--theme-sys-palette-primary40) - var(--theme-sys-palette-primary35) styles : foreground : fill : darkgrey background : fill : var(--theme-sys-elevation-surface-neutral4) opacity : 1 # -------------------------------------------------------------- - type : icon position : cx : 50 cy : 30 align : center icon_size : 25 entity_index : 0 Step 8: Add state as part of the segarc, icon, state toolset \u00b6 And the last part of the toolset: the state . The uom is shown below the state value. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 title : TUT-02-P1 path : tut-02-p1 panel : false cards : - type : vertical-stack cards : - type : horizontal-stack cards : - type : 'custom:swiss-army-knife-card' entities : # Removed for brevity! # Define aspect ratio aspectratio : 6/1 layout : toolsets : # ================================================================ - toolset : half-circle # Removed for brevity! # ================================================================ - toolset : colomn-icon # Removed for brevity! # ================================================================ - toolset : colomn-name # Removed for brevity! # ================================================================ - toolset : line1 # Removed for brevity! # ================================================================ - toolset : colomn-cpu position : cx : 260 cy : 50 tools : # -------------------------------------------------------------- - type : 'segarc' id : 0 position : cx : 50 cy : 50 start_angle : 0 # Arc clockwise from end_angle : 360 # 0 to 360 degrees width : 6 radius : 40 # Radius on 100x100 grid entity_index : 0 scale : min : 0 max : 100 width : 6 offset : 12 show : scale : false # Disable scale of segarc style : 'colorlist' segments : colorlist : gap : 1 # Gap between segments colors : - var(--theme-sys-palette-primary50) # Use 4 system palette - var(--theme-sys-palette-primary45) # colors that adhere - var(--theme-sys-palette-primary40) # to light and dark - var(--theme-sys-palette-primary35) # theme modes! styles : foreground : fill : darkgrey background : fill : var(--theme-sys-elevation-surface-neutral4) opacity : 1 # -------------------------------------------------------------- - type : icon position : cx : 50 cy : 30 align : center icon_size : 25 entity_index : 0 # -------------------------------------------------------------- - type : state position : cx : 50 cy : 55 entity_index : 0 show : uom : bottom styles : state : text-anchor : middle font-size : 20em font-weight : 700 fill : var(--primary-text-color) uom : fill : var(--primary-text-color) font-weight : 700 Step 9: Create template for segarc/icon/state toolset \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 toolset_tutorial_02_part1 : template : type : toolset defaults : - var_entity_index : 0 - var_toolset_position_cx : 50 - var_toolset_position_cy : 50 - var_segarc_scale_min : 0 - var_segarc_scale_max : 100 toolset : toolset : tutorial-advanced-01 position : cx : '[[var_toolset_position_cx]]' cy : '[[var_toolset_position_cy]]' tools : # ------------------------------------------------------------------------ - type : icon position : cx : 50 cy : 30 align : center icon_size : 25 entity_index : '[[var_entity_index]]' # ------------------------------------------------------------------------ - type : state position : cx : 50 cy : 55 entity_index : '[[var_entity_index]]' show : uom : bottom # Show UOM below state value styles : state : text-anchor : middle font-size : 20em font-weight : 700 fill : var(--primary-text-color) uom : fill : var(--primary-text-color) font-weight : 700 # ------------------------------------------------------------------------ - type : 'segarc' id : 0 position : cx : 50 cy : 50 start_angle : 0 # Arc clockwise from end_angle : 360 # 0 to 360 degrees width : 6 radius : 40 # Radius on 100x100 grid entity_index : '[[var_entity_index]]' scale : min : '[[var_segarc_scale_min]]' max : '[[var_segarc_scale_max]]' width : 6 offset : 12 show : scale : false # Disable scale of segarc style : 'colorlist' segments : colorlist : gap : 1 # Gap between segments colors : - var(--theme-sys-palette-primary50) # Use 4 system palette - var(--theme-sys-palette-primary45) # colors that adhere - var(--theme-sys-palette-primary40) # to light and dark - var(--theme-sys-palette-primary35) # theme modes! styles : foreground : fill : darkgrey background : fill : var(--theme-sys-elevation-surface-neutral4) opacity : 1 Step 10: Finalize card by using 4 of the templates \u00b6 Use the in the previous step created tools template to finalize the card. Use the templates to show the CPU, Memory, Disk and load values. view-tutorial-01-part1.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 title : TUT-02-P1 path : tut-02-p1 panel : false cards : - type : vertical-stack cards : - type : horizontal-stack cards : - type : 'custom:swiss-army-knife-card' entities : # CPU - entity : sensor.processor_use decimals : 0 name : 'Hestia' # Memory - entity : sensor.memory_use_percent icon : mdi:memory decimals : 0 # Disk - entity : sensor.disk_use_percent decimals : 0 icon : mdi:harddisk # System Load - entity : sensor.load_1m decimals : 2 unit : '1m' # Last changed - entity : sensor.processor_use secondary_info : last_changed format : relative # Define aspect ratio aspectratio : 6/1 # Card is 600x100 grid layout : toolsets : # ================================================================ - toolset : half-circle position : cx : 0 # Center on cards border cy : 50 tools : # ------------------------------------------------------------ - type : circle position : cx : 50 cy : 50 radius : 50 styles : circle : stroke : none fill : var(--theme-sys-palette-primary30) # ================================================================ - toolset : colomn-icon position : cx : 30 cy : 50 tools : # ------------------------------------------------------------ - type : icon position : cx : 50 cy : 50 align : center icon_size : 30 icon : mdi:server-network styles : icon : fill : var(--primary-background-color) opacity : 0.9 # ================================================================ - toolset : colomn-name position : cx : 120 cy : 50 tools : # ------------------------------------------------------------ - type : name position : cx : 50 cy : 50 entity_index : 0 styles : name : text-anchor : middle font-size : 25em font-weight : 700 opacity : 1 # ------------------------------------------------------------ - type : state position : cx : 50 cy : 80 entity_index : 4 show : uom : none styles : state : text-anchor : middle font-size : 14em font-weight : 500 # ================================================================ - toolset : line1 position : cx : 200 # On 1/3 of card width cy : 50 tools : # ------------------------------------------------------------ - type : line position : cx : 50 cy : 50 orientation : vertical length : 50 styles : line : fill : var(--primary-text-color) opacity : 0.5 # ================================================================ - toolset : colomn-cpu template : name : toolset_tutorial_02_part1 variables : - var_toolset_position_cx : 260 # ================================================================ - toolset : colomn-memory template : name : toolset_tutorial_02_part1 variables : - var_entity_index : 1 - var_toolset_position_cx : 355 # ================================================================ - toolset : colomn-disk template : name : toolset_tutorial_02_part1 variables : - var_entity_index : 2 - var_toolset_position_cx : 450 # ================================================================ - toolset : colomn-load template : name : toolset_tutorial_02_part1 variables : - var_entity_index : 3 - var_toolset_position_cx : 545 - var_segarc_scale_max : 2 The final result: Done! \u00b6","title":"Part 1 - Server Card"},{"location":"tutorials/10-step-tutorial-02-part1/#tutorial-2-part-1","text":"In this tutorial, we are going to make the following wide card: Such a card is part of Example 12 . But as opposed to the example, we will create a toolset template for the 4 segmented arcs with icon and state displayed. So the result of the tutorial is in fact better than the original! And much shorter due to the use of templates.","title":"Tutorial #2, Part 1"},{"location":"tutorials/10-step-tutorial-02-part1/#prerequisites","text":"This tutorial requires: An active Material 3 theme","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Prerequisites"},{"location":"tutorials/10-step-tutorial-02-part1/#step-1-create-the-yml-view-file","text":"Create view-tutorial-02-part1.yml in the lovelace/views/sak-tutorial-views/ folder. Add it to the sak-tutorials-dashboard.yaml in your root folder.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Step 1: Create the yml view file"},{"location":"tutorials/10-step-tutorial-02-part1/#step-2-define-the-view-basics-card-entities-and-layout","text":"We are going to use 5 entities from the System Monitor integration. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 title : TUT-02-P1 path : tut-02-p1 panel : false cards : - type : vertical-stack cards : - type : horizontal-stack cards : - type : 'custom:swiss-army-knife-card' entities : # CPU - entity : sensor.processor_use decimals : 0 name : 'Hestia' # Memory - entity : sensor.memory_use_percent icon : mdi:memory decimals : 0 # Disk - entity : sensor.disk_use_percent decimals : 0 icon : mdi:harddisk # System Load - entity : sensor.load_1m decimals : 2 unit : '1m' # Last changed - entity : sensor.processor_use secondary_info : last_changed format : relative # Define aspect ratio aspectratio : 6/1","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Step 2: Define the view basics, card, entities and layout"},{"location":"tutorials/10-step-tutorial-02-part1/#step-3-header-first-column","text":"The header is divided into three columns: the half circle with the icon, then the name and the state, and in the last header column the vertical line. Define the first column of the header: half a circle, which is in fact a full circle but clipped by the card due to our positioning the circles center at the card's edge. a fixed icon 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 title : TUT-02-P1 path : tut-02-p1 panel : false cards : - type : vertical-stack cards : - type : horizontal-stack cards : - type : 'custom:swiss-army-knife-card' entities : # Removed for brevity! # Define aspect ratio aspectratio : 6/1 layout : toolsets : # ================================================================ - toolset : half-circle position : cx : 0 cy : 50 tools : # ------------------------------------------------------------ - type : circle position : cx : 50 cy : 50 radius : 50 styles : circle : stroke : none fill : var(--theme-sys-palette-primary30) # ================================================================ - toolset : colomn-icon position : cx : 30 cy : 50 tools : # ------------------------------------------------------------ - type : icon position : cx : 50 cy : 50 align : center icon_size : 30 icon : mdi:server-network styles : icon : fill : var(--primary-background-color) opacity : 0.9","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Step 3: Header, first column"},{"location":"tutorials/10-step-tutorial-02-part1/#step-4-header-second-column","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 title : TUT-02-P1 path : tut-02-p1 panel : false cards : - type : vertical-stack cards : - type : horizontal-stack cards : - type : 'custom:swiss-army-knife-card' entities : # Removed for brevity! # Define aspect ratio aspectratio : 6/1 layout : toolsets : # ================================================================ - toolset : half-circle # Removed for brevity! # ================================================================ - toolset : colomn-icon # Removed for brevity! # ================================================================ - toolset : colomn-name position : cx : 120 cy : 50 tools : # ------------------------------------------------------------ - type : name position : cx : 50 cy : 50 entity_index : 0 styles : name : text-anchor : middle font-size : 25em font-weight : 700 opacity : 1 # ------------------------------------------------------------ - type : state position : cx : 50 cy : 80 entity_index : 4 show : uom : none styles : state : text-anchor : middle font-size : 14em font-weight : 500","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Step 4: Header, second column"},{"location":"tutorials/10-step-tutorial-02-part1/#step-5-header-third-column","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 title : TUT-02-P1 path : tut-02-p1 panel : false cards : - type : vertical-stack cards : - type : horizontal-stack cards : - type : 'custom:swiss-army-knife-card' entities : # Removed for brevity! # Define aspect ratio aspectratio : 6/1 layout : toolsets : # ================================================================ - toolset : half-circle # Removed for brevity! # ================================================================ - toolset : colomn-icon # Removed for brevity! # ================================================================ - toolset : colomn-name # Removed for brevity! # ================================================================ - toolset : line1 position : cx : 200 cy : 50 tools : # ------------------------------------------------------------ - type : line position : cx : 50 cy : 50 orientation : vertical length : 50 styles : line : fill : var(--primary-text-color) opacity : 0.5","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Step 5: Header, third column"},{"location":"tutorials/10-step-tutorial-02-part1/#step-6-add-segmented-arc-as-part-of-the-segarc-icon-state-toolset","text":"We design the toolset with a segmented arc tool , icon tool and state tool in this card before converting it to a toolset template. The segarc consists of 4 segments, each having a slightly different primary Material 3 theme color. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 title : TUT-02-P1 path : tut-02-p1 panel : false cards : - type : vertical-stack cards : - type : horizontal-stack cards : - type : 'custom:swiss-army-knife-card' entities : # Removed for brevity! # Define aspect ratio aspectratio : 6/1 layout : toolsets : # ================================================================ - toolset : half-circle # Removed for brevity! # ================================================================ - toolset : colomn-icon # Removed for brevity! # ================================================================ - toolset : colomn-name # Removed for brevity! # ================================================================ - toolset : line1 # Removed for brevity! # ================================================================ - toolset : colomn-cpu position : cx : 260 cy : 50 tools : # -------------------------------------------------------------- - type : 'segarc' id : 0 position : cx : 50 cy : 50 start_angle : 0 end_angle : 360 width : 6 radius : 40 entity_index : 0 scale : min : 0 max : 100 width : 6 offset : 12 show : scale : false style : 'colorlist' segments : colorlist : gap : 1 colors : - var(--theme-sys-palette-primary50) - var(--theme-sys-palette-primary45) - var(--theme-sys-palette-primary40) - var(--theme-sys-palette-primary35) styles : foreground : fill : darkgrey background : fill : var(--theme-sys-elevation-surface-neutral4) opacity : 1","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Step 6: Add segmented arc as part of the segarc, icon, state toolset"},{"location":"tutorials/10-step-tutorial-02-part1/#step-7-add-icon-as-part-of-the-segarc-icon-state-toolset","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 title : TUT-02-P1 path : tut-02-p1 panel : false cards : - type : vertical-stack cards : - type : horizontal-stack cards : - type : 'custom:swiss-army-knife-card' entities : # Removed for brevity! # Define aspect ratio aspectratio : 6/1 layout : toolsets : # ================================================================ - toolset : half-circle # Removed for brevity! # ================================================================ - toolset : colomn-icon # Removed for brevity! # ================================================================ - toolset : colomn-name # Removed for brevity! # ================================================================ - toolset : line1 # Removed for brevity! # ================================================================ - toolset : colomn-cpu position : cx : 260 cy : 50 tools : # -------------------------------------------------------------- - type : 'segarc' id : 0 position : cx : 50 cy : 50 start_angle : 0 end_angle : 360 width : 6 radius : 40 entity_index : 0 scale : min : 0 max : 100 width : 6 offset : 12 show : scale : false style : 'colorlist' segments : colorlist : gap : 1 colors : - var(--theme-sys-palette-primary50) - var(--theme-sys-palette-primary45) - var(--theme-sys-palette-primary40) - var(--theme-sys-palette-primary35) styles : foreground : fill : darkgrey background : fill : var(--theme-sys-elevation-surface-neutral4) opacity : 1 # -------------------------------------------------------------- - type : icon position : cx : 50 cy : 30 align : center icon_size : 25 entity_index : 0","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Step 7: Add icon as part of the segarc, icon, state toolset"},{"location":"tutorials/10-step-tutorial-02-part1/#step-8-add-state-as-part-of-the-segarc-icon-state-toolset","text":"And the last part of the toolset: the state . The uom is shown below the state value. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 title : TUT-02-P1 path : tut-02-p1 panel : false cards : - type : vertical-stack cards : - type : horizontal-stack cards : - type : 'custom:swiss-army-knife-card' entities : # Removed for brevity! # Define aspect ratio aspectratio : 6/1 layout : toolsets : # ================================================================ - toolset : half-circle # Removed for brevity! # ================================================================ - toolset : colomn-icon # Removed for brevity! # ================================================================ - toolset : colomn-name # Removed for brevity! # ================================================================ - toolset : line1 # Removed for brevity! # ================================================================ - toolset : colomn-cpu position : cx : 260 cy : 50 tools : # -------------------------------------------------------------- - type : 'segarc' id : 0 position : cx : 50 cy : 50 start_angle : 0 # Arc clockwise from end_angle : 360 # 0 to 360 degrees width : 6 radius : 40 # Radius on 100x100 grid entity_index : 0 scale : min : 0 max : 100 width : 6 offset : 12 show : scale : false # Disable scale of segarc style : 'colorlist' segments : colorlist : gap : 1 # Gap between segments colors : - var(--theme-sys-palette-primary50) # Use 4 system palette - var(--theme-sys-palette-primary45) # colors that adhere - var(--theme-sys-palette-primary40) # to light and dark - var(--theme-sys-palette-primary35) # theme modes! styles : foreground : fill : darkgrey background : fill : var(--theme-sys-elevation-surface-neutral4) opacity : 1 # -------------------------------------------------------------- - type : icon position : cx : 50 cy : 30 align : center icon_size : 25 entity_index : 0 # -------------------------------------------------------------- - type : state position : cx : 50 cy : 55 entity_index : 0 show : uom : bottom styles : state : text-anchor : middle font-size : 20em font-weight : 700 fill : var(--primary-text-color) uom : fill : var(--primary-text-color) font-weight : 700","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Step 8: Add state as part of the segarc, icon, state toolset"},{"location":"tutorials/10-step-tutorial-02-part1/#step-9-create-template-for-segarciconstate-toolset","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 toolset_tutorial_02_part1 : template : type : toolset defaults : - var_entity_index : 0 - var_toolset_position_cx : 50 - var_toolset_position_cy : 50 - var_segarc_scale_min : 0 - var_segarc_scale_max : 100 toolset : toolset : tutorial-advanced-01 position : cx : '[[var_toolset_position_cx]]' cy : '[[var_toolset_position_cy]]' tools : # ------------------------------------------------------------------------ - type : icon position : cx : 50 cy : 30 align : center icon_size : 25 entity_index : '[[var_entity_index]]' # ------------------------------------------------------------------------ - type : state position : cx : 50 cy : 55 entity_index : '[[var_entity_index]]' show : uom : bottom # Show UOM below state value styles : state : text-anchor : middle font-size : 20em font-weight : 700 fill : var(--primary-text-color) uom : fill : var(--primary-text-color) font-weight : 700 # ------------------------------------------------------------------------ - type : 'segarc' id : 0 position : cx : 50 cy : 50 start_angle : 0 # Arc clockwise from end_angle : 360 # 0 to 360 degrees width : 6 radius : 40 # Radius on 100x100 grid entity_index : '[[var_entity_index]]' scale : min : '[[var_segarc_scale_min]]' max : '[[var_segarc_scale_max]]' width : 6 offset : 12 show : scale : false # Disable scale of segarc style : 'colorlist' segments : colorlist : gap : 1 # Gap between segments colors : - var(--theme-sys-palette-primary50) # Use 4 system palette - var(--theme-sys-palette-primary45) # colors that adhere - var(--theme-sys-palette-primary40) # to light and dark - var(--theme-sys-palette-primary35) # theme modes! styles : foreground : fill : darkgrey background : fill : var(--theme-sys-elevation-surface-neutral4) opacity : 1","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Step 9: Create template for segarc/icon/state toolset"},{"location":"tutorials/10-step-tutorial-02-part1/#step-10-finalize-card-by-using-4-of-the-templates","text":"Use the in the previous step created tools template to finalize the card. Use the templates to show the CPU, Memory, Disk and load values. view-tutorial-01-part1.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 title : TUT-02-P1 path : tut-02-p1 panel : false cards : - type : vertical-stack cards : - type : horizontal-stack cards : - type : 'custom:swiss-army-knife-card' entities : # CPU - entity : sensor.processor_use decimals : 0 name : 'Hestia' # Memory - entity : sensor.memory_use_percent icon : mdi:memory decimals : 0 # Disk - entity : sensor.disk_use_percent decimals : 0 icon : mdi:harddisk # System Load - entity : sensor.load_1m decimals : 2 unit : '1m' # Last changed - entity : sensor.processor_use secondary_info : last_changed format : relative # Define aspect ratio aspectratio : 6/1 # Card is 600x100 grid layout : toolsets : # ================================================================ - toolset : half-circle position : cx : 0 # Center on cards border cy : 50 tools : # ------------------------------------------------------------ - type : circle position : cx : 50 cy : 50 radius : 50 styles : circle : stroke : none fill : var(--theme-sys-palette-primary30) # ================================================================ - toolset : colomn-icon position : cx : 30 cy : 50 tools : # ------------------------------------------------------------ - type : icon position : cx : 50 cy : 50 align : center icon_size : 30 icon : mdi:server-network styles : icon : fill : var(--primary-background-color) opacity : 0.9 # ================================================================ - toolset : colomn-name position : cx : 120 cy : 50 tools : # ------------------------------------------------------------ - type : name position : cx : 50 cy : 50 entity_index : 0 styles : name : text-anchor : middle font-size : 25em font-weight : 700 opacity : 1 # ------------------------------------------------------------ - type : state position : cx : 50 cy : 80 entity_index : 4 show : uom : none styles : state : text-anchor : middle font-size : 14em font-weight : 500 # ================================================================ - toolset : line1 position : cx : 200 # On 1/3 of card width cy : 50 tools : # ------------------------------------------------------------ - type : line position : cx : 50 cy : 50 orientation : vertical length : 50 styles : line : fill : var(--primary-text-color) opacity : 0.5 # ================================================================ - toolset : colomn-cpu template : name : toolset_tutorial_02_part1 variables : - var_toolset_position_cx : 260 # ================================================================ - toolset : colomn-memory template : name : toolset_tutorial_02_part1 variables : - var_entity_index : 1 - var_toolset_position_cx : 355 # ================================================================ - toolset : colomn-disk template : name : toolset_tutorial_02_part1 variables : - var_entity_index : 2 - var_toolset_position_cx : 450 # ================================================================ - toolset : colomn-load template : name : toolset_tutorial_02_part1 variables : - var_entity_index : 3 - var_toolset_position_cx : 545 - var_segarc_scale_max : 2 The final result:","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Step 10: Finalize card by using 4 of the templates"},{"location":"tutorials/10-step-tutorial-02-part1/#done","text":"","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Done!"},{"location":"tutorials/10-step-tutorial-03-intro/","tags":["Tutorials","10 Steps or less"],"text":"Tutorial #3, Introduction \u00b6 Skill Level / Required Knowledge \u00b6 Contents \u00b6 In this tutorial series, you will learn the following: Recreate the basic entity from example 4 . That the order in which tools are defined, they are created, so you can overlay tools on top of each other. Prerequisites \u00b6 To follow this tutorial, the following is required: All tutorials are created in the \"Swiss Army Knife Tutorials\" dashboard. You already should have included that one in your Lovelace configuration. This tutorial requires the \"NM - Gonsboro\" theme. We use some color definitions from that theme!","title":"Simple card Example 4"},{"location":"tutorials/10-step-tutorial-03-intro/#tutorial-3-introduction","text":"","title":"Tutorial #3, Introduction"},{"location":"tutorials/10-step-tutorial-03-intro/#skill-level-required-knowledge","text":"","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Skill Level / Required Knowledge"},{"location":"tutorials/10-step-tutorial-03-intro/#contents","text":"In this tutorial series, you will learn the following: Recreate the basic entity from example 4 . That the order in which tools are defined, they are created, so you can overlay tools on top of each other.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Contents"},{"location":"tutorials/10-step-tutorial-03-intro/#prerequisites","text":"To follow this tutorial, the following is required: All tutorials are created in the \"Swiss Army Knife Tutorials\" dashboard. You already should have included that one in your Lovelace configuration. This tutorial requires the \"NM - Gonsboro\" theme. We use some color definitions from that theme!","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Prerequisites"},{"location":"tutorials/10-step-tutorial-03-part1/","tags":["Tutorials","10 Steps or less"],"text":"Tutorial #3, Part 1 \u00b6 In this tutorial, we are going to make the following basic card: Such a card is part of Example 4 , second row of cards. Prerequisites \u00b6 This tutorial requires: The \"NM - Gonsboro\" theme to be downloaded in the theme folder. It uses some color definitions from that theme. Step 1: Create the yml view file \u00b6 Create view-tutorial-03-part1.yml in the lovelace/views/sak-tutorial-views/ folder. Add it to the sak-tutorials-dashboard.yaml in your root folder. Step 2: Define the view basics, card, entities and layout \u00b6 We are going to use a lux sensor. But you can use any other sensor, as long as it has history. So a temperature or humidity sensor is also ok. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 title : TUT-03-P1 path : tut-03-p1 theme : 'NM - Gonsboro' panel : false cards : - type : vertical-stack cards : - type : horizontal-stack cards : - type : 'custom:swiss-army-knife-card' entities : # Lux - entity : sensor.illuminance decimals : 0 icon : mdi:alarm-light-outline name : 'Study' aspectratio : 1/1 layout : Step 3a: Define card background \u00b6 Actions: Add a rectangle covering the card completely as a kind of card background. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 title : TUT-03-P1 path : tut-03-p1 theme : 'NM - Gonsboro' panel : false cards : - type : vertical-stack cards : - type : horizontal-stack cards : - type : 'custom:swiss-army-knife-card' entities : # Lux - entity : sensor.illuminance decimals : 0 icon : mdi:alarm-light-outline name : 'Study' aspectratio : 1/1 layout : toolsets : - toolset : lux position : cx : 50 cy : 50 scale : 1 tools : # Card Background # --------------------------------------------- - type : rectex position : cx : 50 cy : 50 width : 100 height : 100 styles : rectex : fill : var(--theme-gradient-color-01) Step 3b: Define darker top part \u00b6 Actions: Add a second rectangle covering the top part of the card background. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 title : TUT-03-P1 path : tut-03-p1 theme : 'NM - Gonsboro' panel : false cards : - type : vertical-stack cards : - type : horizontal-stack cards : - type : 'custom:swiss-army-knife-card' entities : # Lux - entity : sensor.illuminance decimals : 0 icon : mdi:alarm-light-outline name : 'Study' aspectratio : 1/1 layout : toolsets : - toolset : lux position : cx : 50 cy : 50 scale : 1 tools : # Card Background # --------------------------------------------- - type : rectex # Removed for brevity # Top part # --------------------------------------------- - type : rectex position : cx : 50 cy : 20 width : 100 height : 40 styles : rectex : fill : var(--theme-gradient-color-03) Step 4: Add extra 'neck' background \u00b6 Actions: Add a third rectangle as a kind of neck 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 title : TUT-03-P1 path : tut-03-p1 theme : 'NM - Gonsboro' panel : false cards : - type : vertical-stack cards : - type : horizontal-stack cards : - type : 'custom:swiss-army-knife-card' entities : # Lux - entity : sensor.illuminance decimals : 0 icon : mdi:alarm-light-outline name : 'Study' aspectratio : 1/1 layout : toolsets : - toolset : lux position : cx : 50 cy : 50 scale : 1 tools : # Card Background # --------------------------------------------- - type : rectex # Removed for brevity # Top part # --------------------------------------------- - type : rectex # Removed for brevity # Neck to connect two parts # --------------------------------------------- - type : rectex position : cx : 50 cy : 33 width : 80 height : 15 styles : rectex : fill : var(--theme-gradient-color-01) Step 5: Add background for State and Icon \u00b6 Actions: Add another rectex tool. This time with top_radius: 5 to get round corners at the topside of the rectangle. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 title : TUT-03-P1 path : tut-03-p1 theme : 'NM - Gonsboro' panel : false cards : - type : vertical-stack cards : - type : horizontal-stack cards : - type : 'custom:swiss-army-knife-card' entities : # Lux - entity : sensor.illuminance decimals : 0 icon : mdi:alarm-light-outline name : 'Study' aspectratio : 1/1 layout : toolsets : - toolset : lux position : cx : 50 cy : 50 scale : 1 tools : # Card Background # --------------------------------------------- - type : rectex # Removed for brevity # Top part # --------------------------------------------- - type : rectex # Removed for brevity # Background for Name and Bar # --------------------------------------------- - type : rectex # Removed for brevity # State and Icon background # --------------------------------------------- - type : rectex position : cx : 50 cy : 18 width : 80 height : 16 radius : top : 5 styles : rectex : fill : var(--theme-gradient-color-02) Step 6: Add state \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 title : TUT-03-P1 path : tut-03-p1 theme : 'NM - Gonsboro' panel : false cards : - type : vertical-stack cards : - type : horizontal-stack cards : - type : 'custom:swiss-army-knife-card' entities : # Lux - entity : sensor.illuminance decimals : 0 icon : mdi:alarm-light-outline name : 'Study' aspectratio : 1/1 layout : toolsets : - toolset : lux position : cx : 50 cy : 50 scale : 1 tools : # Card Background # --------------------------------------------- - type : rectex # Removed for brevity # Top part # --------------------------------------------- - type : rectex # Removed for brevity # Background for Name and Bar # --------------------------------------------- - type : rectex # Removed for brevity # State and Icon background # --------------------------------------------- - type : rectex # Removed for brevity # --------------------------------------------- - type : state position : cx : 35 cy : 18 entity_index : 0 styles : state : font-size : 12em font-weight : 700 fill : black uom : fill : black font-weight : 700 Step 7: Add vertical line as separator \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 title : TUT-03-P1 path : tut-03-p1 theme : 'NM - Gonsboro' panel : false cards : - type : vertical-stack cards : - type : horizontal-stack cards : - type : 'custom:swiss-army-knife-card' entities : # Lux - entity : sensor.illuminance decimals : 0 icon : mdi:alarm-light-outline name : 'Study' aspectratio : 1/1 layout : toolsets : - toolset : lux position : cx : 50 cy : 50 scale : 1 tools : # Card Background # --------------------------------------------- - type : rectex # Removed for brevity # Top part # --------------------------------------------- - type : rectex # Removed for brevity # Background for Name and Bar # --------------------------------------------- - type : rectex # Removed for brevity # State and Icon background # --------------------------------------------- - type : rectex # Removed for brevity # --------------------------------------------- - type : state # Removed for brevity # --------------------------------------------- - type : state # Removed for brevity # --------------------------------------------- - type : line position : cx : 60 cy : 18 length : 10 orientation : vertical styles : line : stroke : black stroke-opacity : 0.5 stroke-width : 3 Step 8: Add Icon tool \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 title : TUT-03-P1 path : tut-03-p1 theme : 'NM - Gonsboro' panel : false cards : - type : vertical-stack cards : - type : horizontal-stack cards : - type : 'custom:swiss-army-knife-card' entities : # Lux - entity : sensor.illuminance decimals : 0 icon : mdi:alarm-light-outline name : 'Study' aspectratio : 1/1 layout : toolsets : - toolset : lux position : cx : 50 cy : 50 scale : 1 tools : # Card Background # --------------------------------------------- - type : rectex # Removed for brevity # Top part # --------------------------------------------- - type : rectex # Removed for brevity # Background for Name and Bar # --------------------------------------------- - type : rectex # Removed for brevity # State and Icon background # --------------------------------------------- - type : rectex # Removed for brevity # --------------------------------------------- - type : state # Removed for brevity # --------------------------------------------- - type : line # Removed for brevity # --------------------------------------------- - type : icon position : cx : 75 cy : 18 align : center icon_size : 12 entity_index : 0 styles : icon : fill : black Step 9: Add entity name tool \u00b6 Actions: Add an entity name tool 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 title : TUT-03-P1 path : tut-03-p1 theme : 'NM - Gonsboro' panel : false cards : - type : vertical-stack cards : - type : horizontal-stack cards : - type : 'custom:swiss-army-knife-card' entities : # Lux - entity : sensor.illuminance decimals : 0 icon : mdi:alarm-light-outline name : 'Study' aspectratio : 1/1 layout : toolsets : - toolset : lux position : cx : 50 cy : 50 scale : 1 tools : # Card Background # --------------------------------------------- - type : rectex # Removed for brevity # Top part # --------------------------------------------- - type : rectex # Removed for brevity # Background for Name and Bar # --------------------------------------------- - type : rectex # Removed for brevity # State and Icon background # --------------------------------------------- - type : rectex # Removed for brevity # --------------------------------------------- - type : state # Removed for brevity # --------------------------------------------- - type : line # Removed for brevity # --------------------------------------------- - type : icon # Removed for brevity # --------------------------------------------- - type : name position : cx : 50 cy : 50 entity_index : 0 styles : name : font-size : 10em font-weight : 700 fill : black Step 10: Finalize card by adding the history bar \u00b6 Actions: Add the bar tool to show 24 hour history ( hours: 24 ) with 12 bars ( barhours: 2 , ie hours/barhours=12) view-tutorial-03-part1.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 title : TUT-03-P1 path : tut-03-p1 theme : 'NM - Gonsboro' panel : false cards : - type : vertical-stack cards : - type : horizontal-stack cards : - type : 'custom:swiss-army-knife-card' entities : # Lux - entity : sensor.illuminance decimals : 0 icon : mdi:alarm-light-outline name : 'Study' aspectratio : 1/1 layout : toolsets : - toolset : lux position : cx : 50 cy : 50 scale : 1 tools : # Card Background # --------------------------------------------- - type : rectex position : cx : 50 cy : 50 width : 100 height : 100 styles : rectex : fill : var(--theme-gradient-color-01) # Top part # --------------------------------------------- - type : rectex position : cx : 50 cy : 20 width : 100 height : 40 styles : rectex : fill : var(--theme-gradient-color-03) # Background for Name and Bar # --------------------------------------------- - type : rectex position : cx : 50 cy : 33 width : 80 height : 15 styles : rectex : fill : var(--theme-gradient-color-01) # State and Icon background # --------------------------------------------- - type : rectex position : cx : 50 cy : 18 width : 80 height : 16 radius : top : 5 styles : rectex : fill : var(--theme-gradient-color-02) # --------------------------------------------- - type : state position : cx : 35 cy : 18 entity_index : 0 styles : state : font-size : 12em font-weight : 700 fill : black uom : fill : black font-weight : 700 # --------------------------------------------- - type : line position : cx : 60 cy : 18 length : 10 orientation : vertical styles : line : stroke : black stroke-opacity : 0.5 stroke-width : 3 # --------------------------------------------- - type : icon position : cx : 75 cy : 18 align : center icon_size : 12 entity_index : 0 styles : icon : fill : black # --------------------------------------------- - type : name position : cx : 50 cy : 50 entity_index : 0 styles : name : font-size : 10em font-weight : 700 fill : black # --------------------------------------------- - type : bar id : 2 entity_index : 0 position : orientation : vertical cx : 50 cy : 80 width : 70 height : 25 margin : 1.5 hours : 24 barhours : 2 styles : bar : stroke : grey stroke-linecap : butt The final result: Done! \u00b6","title":"Part 1 - Sensor Card"},{"location":"tutorials/10-step-tutorial-03-part1/#tutorial-3-part-1","text":"In this tutorial, we are going to make the following basic card: Such a card is part of Example 4 , second row of cards.","title":"Tutorial #3, Part 1"},{"location":"tutorials/10-step-tutorial-03-part1/#prerequisites","text":"This tutorial requires: The \"NM - Gonsboro\" theme to be downloaded in the theme folder. It uses some color definitions from that theme.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Prerequisites"},{"location":"tutorials/10-step-tutorial-03-part1/#step-1-create-the-yml-view-file","text":"Create view-tutorial-03-part1.yml in the lovelace/views/sak-tutorial-views/ folder. Add it to the sak-tutorials-dashboard.yaml in your root folder.","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Step 1: Create the yml view file"},{"location":"tutorials/10-step-tutorial-03-part1/#step-2-define-the-view-basics-card-entities-and-layout","text":"We are going to use a lux sensor. But you can use any other sensor, as long as it has history. So a temperature or humidity sensor is also ok. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 title : TUT-03-P1 path : tut-03-p1 theme : 'NM - Gonsboro' panel : false cards : - type : vertical-stack cards : - type : horizontal-stack cards : - type : 'custom:swiss-army-knife-card' entities : # Lux - entity : sensor.illuminance decimals : 0 icon : mdi:alarm-light-outline name : 'Study' aspectratio : 1/1 layout :","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Step 2: Define the view basics, card, entities and layout"},{"location":"tutorials/10-step-tutorial-03-part1/#step-3a-define-card-background","text":"Actions: Add a rectangle covering the card completely as a kind of card background. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 title : TUT-03-P1 path : tut-03-p1 theme : 'NM - Gonsboro' panel : false cards : - type : vertical-stack cards : - type : horizontal-stack cards : - type : 'custom:swiss-army-knife-card' entities : # Lux - entity : sensor.illuminance decimals : 0 icon : mdi:alarm-light-outline name : 'Study' aspectratio : 1/1 layout : toolsets : - toolset : lux position : cx : 50 cy : 50 scale : 1 tools : # Card Background # --------------------------------------------- - type : rectex position : cx : 50 cy : 50 width : 100 height : 100 styles : rectex : fill : var(--theme-gradient-color-01)","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Step 3a: Define card background"},{"location":"tutorials/10-step-tutorial-03-part1/#step-3b-define-darker-top-part","text":"Actions: Add a second rectangle covering the top part of the card background. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 title : TUT-03-P1 path : tut-03-p1 theme : 'NM - Gonsboro' panel : false cards : - type : vertical-stack cards : - type : horizontal-stack cards : - type : 'custom:swiss-army-knife-card' entities : # Lux - entity : sensor.illuminance decimals : 0 icon : mdi:alarm-light-outline name : 'Study' aspectratio : 1/1 layout : toolsets : - toolset : lux position : cx : 50 cy : 50 scale : 1 tools : # Card Background # --------------------------------------------- - type : rectex # Removed for brevity # Top part # --------------------------------------------- - type : rectex position : cx : 50 cy : 20 width : 100 height : 40 styles : rectex : fill : var(--theme-gradient-color-03)","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Step 3b: Define darker top part"},{"location":"tutorials/10-step-tutorial-03-part1/#step-4-add-extra-neck-background","text":"Actions: Add a third rectangle as a kind of neck 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 title : TUT-03-P1 path : tut-03-p1 theme : 'NM - Gonsboro' panel : false cards : - type : vertical-stack cards : - type : horizontal-stack cards : - type : 'custom:swiss-army-knife-card' entities : # Lux - entity : sensor.illuminance decimals : 0 icon : mdi:alarm-light-outline name : 'Study' aspectratio : 1/1 layout : toolsets : - toolset : lux position : cx : 50 cy : 50 scale : 1 tools : # Card Background # --------------------------------------------- - type : rectex # Removed for brevity # Top part # --------------------------------------------- - type : rectex # Removed for brevity # Neck to connect two parts # --------------------------------------------- - type : rectex position : cx : 50 cy : 33 width : 80 height : 15 styles : rectex : fill : var(--theme-gradient-color-01)","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Step 4: Add extra 'neck' background"},{"location":"tutorials/10-step-tutorial-03-part1/#step-5-add-background-for-state-and-icon","text":"Actions: Add another rectex tool. This time with top_radius: 5 to get round corners at the topside of the rectangle. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 title : TUT-03-P1 path : tut-03-p1 theme : 'NM - Gonsboro' panel : false cards : - type : vertical-stack cards : - type : horizontal-stack cards : - type : 'custom:swiss-army-knife-card' entities : # Lux - entity : sensor.illuminance decimals : 0 icon : mdi:alarm-light-outline name : 'Study' aspectratio : 1/1 layout : toolsets : - toolset : lux position : cx : 50 cy : 50 scale : 1 tools : # Card Background # --------------------------------------------- - type : rectex # Removed for brevity # Top part # --------------------------------------------- - type : rectex # Removed for brevity # Background for Name and Bar # --------------------------------------------- - type : rectex # Removed for brevity # State and Icon background # --------------------------------------------- - type : rectex position : cx : 50 cy : 18 width : 80 height : 16 radius : top : 5 styles : rectex : fill : var(--theme-gradient-color-02)","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Step 5: Add background for State and Icon"},{"location":"tutorials/10-step-tutorial-03-part1/#step-6-add-state","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 title : TUT-03-P1 path : tut-03-p1 theme : 'NM - Gonsboro' panel : false cards : - type : vertical-stack cards : - type : horizontal-stack cards : - type : 'custom:swiss-army-knife-card' entities : # Lux - entity : sensor.illuminance decimals : 0 icon : mdi:alarm-light-outline name : 'Study' aspectratio : 1/1 layout : toolsets : - toolset : lux position : cx : 50 cy : 50 scale : 1 tools : # Card Background # --------------------------------------------- - type : rectex # Removed for brevity # Top part # --------------------------------------------- - type : rectex # Removed for brevity # Background for Name and Bar # --------------------------------------------- - type : rectex # Removed for brevity # State and Icon background # --------------------------------------------- - type : rectex # Removed for brevity # --------------------------------------------- - type : state position : cx : 35 cy : 18 entity_index : 0 styles : state : font-size : 12em font-weight : 700 fill : black uom : fill : black font-weight : 700","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Step 6: Add state"},{"location":"tutorials/10-step-tutorial-03-part1/#step-7-add-vertical-line-as-separator","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 title : TUT-03-P1 path : tut-03-p1 theme : 'NM - Gonsboro' panel : false cards : - type : vertical-stack cards : - type : horizontal-stack cards : - type : 'custom:swiss-army-knife-card' entities : # Lux - entity : sensor.illuminance decimals : 0 icon : mdi:alarm-light-outline name : 'Study' aspectratio : 1/1 layout : toolsets : - toolset : lux position : cx : 50 cy : 50 scale : 1 tools : # Card Background # --------------------------------------------- - type : rectex # Removed for brevity # Top part # --------------------------------------------- - type : rectex # Removed for brevity # Background for Name and Bar # --------------------------------------------- - type : rectex # Removed for brevity # State and Icon background # --------------------------------------------- - type : rectex # Removed for brevity # --------------------------------------------- - type : state # Removed for brevity # --------------------------------------------- - type : state # Removed for brevity # --------------------------------------------- - type : line position : cx : 60 cy : 18 length : 10 orientation : vertical styles : line : stroke : black stroke-opacity : 0.5 stroke-width : 3","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Step 7: Add vertical line as separator"},{"location":"tutorials/10-step-tutorial-03-part1/#step-8-add-icon-tool","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 title : TUT-03-P1 path : tut-03-p1 theme : 'NM - Gonsboro' panel : false cards : - type : vertical-stack cards : - type : horizontal-stack cards : - type : 'custom:swiss-army-knife-card' entities : # Lux - entity : sensor.illuminance decimals : 0 icon : mdi:alarm-light-outline name : 'Study' aspectratio : 1/1 layout : toolsets : - toolset : lux position : cx : 50 cy : 50 scale : 1 tools : # Card Background # --------------------------------------------- - type : rectex # Removed for brevity # Top part # --------------------------------------------- - type : rectex # Removed for brevity # Background for Name and Bar # --------------------------------------------- - type : rectex # Removed for brevity # State and Icon background # --------------------------------------------- - type : rectex # Removed for brevity # --------------------------------------------- - type : state # Removed for brevity # --------------------------------------------- - type : line # Removed for brevity # --------------------------------------------- - type : icon position : cx : 75 cy : 18 align : center icon_size : 12 entity_index : 0 styles : icon : fill : black","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Step 8: Add Icon tool"},{"location":"tutorials/10-step-tutorial-03-part1/#step-9-add-entity-name-tool","text":"Actions: Add an entity name tool 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 title : TUT-03-P1 path : tut-03-p1 theme : 'NM - Gonsboro' panel : false cards : - type : vertical-stack cards : - type : horizontal-stack cards : - type : 'custom:swiss-army-knife-card' entities : # Lux - entity : sensor.illuminance decimals : 0 icon : mdi:alarm-light-outline name : 'Study' aspectratio : 1/1 layout : toolsets : - toolset : lux position : cx : 50 cy : 50 scale : 1 tools : # Card Background # --------------------------------------------- - type : rectex # Removed for brevity # Top part # --------------------------------------------- - type : rectex # Removed for brevity # Background for Name and Bar # --------------------------------------------- - type : rectex # Removed for brevity # State and Icon background # --------------------------------------------- - type : rectex # Removed for brevity # --------------------------------------------- - type : state # Removed for brevity # --------------------------------------------- - type : line # Removed for brevity # --------------------------------------------- - type : icon # Removed for brevity # --------------------------------------------- - type : name position : cx : 50 cy : 50 entity_index : 0 styles : name : font-size : 10em font-weight : 700 fill : black","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Step 9: Add entity name tool"},{"location":"tutorials/10-step-tutorial-03-part1/#step-10-finalize-card-by-adding-the-history-bar","text":"Actions: Add the bar tool to show 24 hour history ( hours: 24 ) with 12 bars ( barhours: 2 , ie hours/barhours=12) view-tutorial-03-part1.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 title : TUT-03-P1 path : tut-03-p1 theme : 'NM - Gonsboro' panel : false cards : - type : vertical-stack cards : - type : horizontal-stack cards : - type : 'custom:swiss-army-knife-card' entities : # Lux - entity : sensor.illuminance decimals : 0 icon : mdi:alarm-light-outline name : 'Study' aspectratio : 1/1 layout : toolsets : - toolset : lux position : cx : 50 cy : 50 scale : 1 tools : # Card Background # --------------------------------------------- - type : rectex position : cx : 50 cy : 50 width : 100 height : 100 styles : rectex : fill : var(--theme-gradient-color-01) # Top part # --------------------------------------------- - type : rectex position : cx : 50 cy : 20 width : 100 height : 40 styles : rectex : fill : var(--theme-gradient-color-03) # Background for Name and Bar # --------------------------------------------- - type : rectex position : cx : 50 cy : 33 width : 80 height : 15 styles : rectex : fill : var(--theme-gradient-color-01) # State and Icon background # --------------------------------------------- - type : rectex position : cx : 50 cy : 18 width : 80 height : 16 radius : top : 5 styles : rectex : fill : var(--theme-gradient-color-02) # --------------------------------------------- - type : state position : cx : 35 cy : 18 entity_index : 0 styles : state : font-size : 12em font-weight : 700 fill : black uom : fill : black font-weight : 700 # --------------------------------------------- - type : line position : cx : 60 cy : 18 length : 10 orientation : vertical styles : line : stroke : black stroke-opacity : 0.5 stroke-width : 3 # --------------------------------------------- - type : icon position : cx : 75 cy : 18 align : center icon_size : 12 entity_index : 0 styles : icon : fill : black # --------------------------------------------- - type : name position : cx : 50 cy : 50 entity_index : 0 styles : name : font-size : 10em font-weight : 700 fill : black # --------------------------------------------- - type : bar id : 2 entity_index : 0 position : orientation : vertical cx : 50 cy : 80 width : 70 height : 25 margin : 1.5 hours : 24 barhours : 2 styles : bar : stroke : grey stroke-linecap : butt The final result:","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Step 10: Finalize card by adding the history bar"},{"location":"tutorials/10-step-tutorial-03-part1/#done","text":"","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n Done!"},{"location":"tutorials/10-step-tutorial-introduction/","tags":["Tutorials","Introduction","10 steps"],"text":"Introducing 10 step (or less) tutorials \u00b6 Everybody has learned to count from 1 to 10 when we were young. 10 steps are also manageable to learning something. Not all tutorials will contain the full 10 steps if we simply don't need more steps to finish the tutorial. I just started creating these tutorials, so I am still finding out what works and what doesn't work. TBD \u00b6","title":"10 step or less tutorials"},{"location":"tutorials/10-step-tutorial-introduction/#introducing-10-step-or-less-tutorials","text":"Everybody has learned to count from 1 to 10 when we were young. 10 steps are also manageable to learning something. Not all tutorials will contain the full 10 steps if we simply don't need more steps to finish the tutorial. I just started creating these tutorials, so I am still finding out what works and what doesn't work.","title":"Introducing 10 step (or less) tutorials"},{"location":"tutorials/10-step-tutorial-introduction/#tbd","text":"","title":"\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n TBD"}]}